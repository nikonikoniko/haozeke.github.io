<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nix on Rohit Goswami</title><link>https://rgoswami.me/tags/nix/</link><description>Recent content in nix on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Sat, 17 Oct 2020 10:40:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/nix/index.xml" rel="self" type="application/rss+xml"/><item><title>Talk Supplements for NixCon 2020</title><link>https://rgoswami.me/posts/nixcon-in-2020-meta/</link><pubDate>Sat, 17 Oct 2020 10:40:00 +0000</pubDate><guid>https://rgoswami.me/posts/nixcon-in-2020-meta/</guid><description>A meta-post on my lightning talk at NixCon 2020
Background Much the same as the rationale behind my meta-post on my talk at PyCon India 2020, that is:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one location 1 It would be nice to have my own thoughts here afterwards Details Title Nix from the dark ages (without Root) Proposal See the cfp response here Abstract Short comments from the trenches of High Performance Clusters on working with Nix on kernel locked-in systems without proot support.</description></item><item><title>Talk Supplements for PyCon India 2020</title><link>https://rgoswami.me/posts/pycon-in-2020-meta/</link><pubDate>Fri, 02 Oct 2020 23:56:00 +0000</pubDate><guid>https://rgoswami.me/posts/pycon-in-2020-meta/</guid><description>A meta-post on my talk at PyCon India 2020
Background I am to present at PyCon IN 2020. Some of the motivating reasons for having a post are:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one location 1 It would be nice to have my own thoughts here afterwards Details of this happy circumstance are reproduced below from the CFP here.</description></item><item><title>Publishing Doxygen and Sphinx with Nix and Rake</title><link>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</link><pubDate>Tue, 22 Sep 2020 10:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</guid><description>Automating documenation deployment with Travis, rake and nix
Background In the previous post we generated documentation using Doxygen with Exhale to handle Sphinx. Now we will clean up the earlier workflow with rake and ensure the environment is reproducible with nix while deploying to Travis CI.
Series Documenting C++ with Doxygen and Sphinx - Exhale Publishing Doxygen and Sphinx with Nix and Rake &amp;lt;&amp;ndash; You are here Documenting C++ with Doxygen and Sphinx - doxyrest Adding Tutorials to Sphinx Projects Setup A quick reminder of the setup we generated in the last post:</description></item><item><title>Local Nix without Root</title><link>https://rgoswami.me/posts/local-nix-no-root/</link><pubDate>Mon, 07 Sep 2020 18:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/local-nix-no-root/</guid><description>Monkeying around with nix for HPC systems which have no root access and NFS filesystems.
Background Nix is not well known for being friendly to users without root access. This is typically made worse by the &amp;ldquo;exotic&amp;rdquo; filesystem attributes common to HPC networks (this also plagues hermes). An earlier post details how and why proot failed. The short pitch is simply:
Figure 1: Does your HPC look like this?</description></item><item><title>Niv and Mach-Nix for Nix Python</title><link>https://rgoswami.me/posts/mach-nix-niv-python/</link><pubDate>Wed, 26 Aug 2020 05:42:00 +0000</pubDate><guid>https://rgoswami.me/posts/mach-nix-niv-python/</guid><description>Short post on using mach-nix with niv.
Background In previous posts, there was a discussion on a ground up approach to adding packages which aren&amp;rsquo;t on the core nixpkgs channels using GitHub or PyPi sources. However, this lacked a way to do so programmatically, and also a way to convert existing python projects.
Python Dependency Management This time, instead of the more pedagogical approach of building packages from PyPi or GitHub, we will use overlays and the excellent mach-nix to speed up the process.</description></item><item><title>Nix Shells for Node Projects</title><link>https://rgoswami.me/posts/nix-shell-node/</link><pubDate>Sun, 23 Aug 2020 10:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-shell-node/</guid><description>Background As a prelude to writing up the details of how this site is generated, I realized I should write up a nix oriented workflow for node packages.
Tooling and Idea The basic concepts are:
Use npm to generate a package-lock.json file Use node2nix in a shell to generate a set of nix derivations Enter a shell environment with the nix inputs Profit However, the nuances of this are a bit annoying at first.</description></item><item><title>A Tutorial Introduction to Nix</title><link>https://rgoswami.me/posts/ccon-tut-nix/</link><pubDate>Tue, 18 Aug 2020 16:18:00 +0000</pubDate><guid>https://rgoswami.me/posts/ccon-tut-nix/</guid><description>Brief introduction to a nix based project workflow.
Background For CarpentryCon@Home 2020, along with Amrita Goswami, I am to prepare and deliver a workshop on &amp;ldquo;Reproducible Environments with the Nix Packaging System&amp;rdquo;. In particular, as a community of practice lesson, the focus is not on packaging (as is typical of most Nix tutorials) nor on the Nix expression language itself, but instead on the use of Nix as a replacement for virtual environments using mkShell.</description></item><item><title>Emacs for Nix-R</title><link>https://rgoswami.me/posts/emacs-nix-r/</link><pubDate>Wed, 10 Jun 2020 00:12:00 +0000</pubDate><guid>https://rgoswami.me/posts/emacs-nix-r/</guid><description>A short post on my current set-up for R with nixpkgs and emacs to auto-compile my system configuration.
Background This is my third post on working with nixpkgs and R.
Part I covered ways of working effectively with R and nixpkgs Part II dealt with composing dependent devtools packages in a per-package environment, with a focus on rethinking and tidybayes.rethinking This final part is about automating the system-wide configuration using emacs.</description></item><item><title>Statistical Rethinking and Nix</title><link>https://rgoswami.me/posts/rethinking-r-nix/</link><pubDate>Sun, 07 Jun 2020 04:24:00 +0000</pubDate><guid>https://rgoswami.me/posts/rethinking-r-nix/</guid><description>This post describes how to set up a transparent automated setup for reproducible R workflows using nixpkgs, niv, and lorri. The explanatory example used throughout the post is one of setting up the rethinking package and running some examples from the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath.
Background As detailed in an earlier post1, I had set up Nix to work with non-CRAN packages. If the rest of this section is unclear, please refer back to the earlier post.</description></item><item><title>Nix with R and devtools</title><link>https://rgoswami.me/posts/nix-r-devtools/</link><pubDate>Sat, 06 Jun 2020 05:49:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-r-devtools/</guid><description>This post discusses briefly, the nix-shell environment for reproducible programming. In particular, there is an emphasis on extensions for installing and working with packages not in CRAN, i.e. packages off Github which are normally installed with devtools.
Background The entire nix ecosystem is fantastic, and is the main packaging system used by d-SEAMS as well. Recently I began working through the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath1.</description></item></channel></rss>