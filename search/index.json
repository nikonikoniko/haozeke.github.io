[{"categories":null,"contents":" A workflow for managing private submodules in a private repository without personal access tokens for Github actions\n Background Ever since Travis CI decided to drink corporate kool-aid, the search for a new CI has been brought to the fore again. Github Actions seem uniquely suited for private repositories, since most CIs bill for private repos. However, the basic authentication setup for the checkout action involves using one SSH key, effectively a personal access token, for both the main project and all submodules. This is untenable for anyone working with a team.\nSolution The fix, as it were, is in two steps. We will first require a deploy key to be set for the private submodule, and then store the private portion in the private repo. We will begin with a concrete setup.\nSetup Consider a standard C++ build setup:\nname:Fakesecretprojecton:push:branches:[master,development]pull_request:branches:[master]jobs:build:runs-on:${{matrix.os}}strategy:max-parallel:4matrix:os:[ubuntu-18.04]cpp-version:[g++-7,g++-9,clang++]steps:- uses:actions/checkout@v2- name:buildenv:CXX:${{matrix.cpp-version}}run:| mkdir build \u0026amp;\u0026amp; cd buildcmake-DCMAKE_CXX_COMPILER=\u0026#34;$CXX\u0026#34;-DCMAKE_CXX_FLAGS=\u0026#34;-std=c++11\u0026#34;../make-j$(nproc)- name:runrun:| ./super_secretKey Generation This section is standard. We will generate a deploy key essentially. Note that it isn\u0026rsquo;t necessary to set a password, using one would only minimally improve security and bring in some annoying script modifications.\n# Anywhere safe ssh-keygen -t rsa -b 4096 -C \u0026#34;Fake Deployment Key\u0026#34; -f \u0026#39;priv_sub_a\u0026#39; -N \u0026#39;\u0026#39; Private Submodule Repo We will store the public portion of the key as a deploy key in the private submodule repository.\n# Copy contents cat priv_sub_a.pub | xclip -selection clipboard Note that, as shown in Fig. 1 we do not need to give write access to this key.\n  Private Project Repo Now we will need the private portion of the key as a secret in the private project repository (see Fig. 2).\n# Copy contents of private key cat priv_sub_a | xclip -selection clipboard   Figure 1: Secret setup in the private project\n  Workflow Modifications Now we will simply update our workflowÂ 1. We will simply add the following step:\n- name:get_submenv:SSHK:${{secrets.SUB_SSHK_A}}run:| mkdir -p $HOME/.sshecho\u0026#34;$SSHK\u0026#34;\u0026gt;$HOME/.ssh/ssh.keychmod600$HOME/.ssh/ssh.keyexportGIT_SSH_COMMAND=\u0026#34;ssh -i $HOME/.ssh/ssh.key\u0026#34;gitsubmoduleupdate--init--recursiveThis will work for a single private submodule and multiple public submodules. For multiple private submodules, we would not initialize them recursively, but instead use a separate key for each.\n- name:get_subm_aenv:SSHK:${{secrets.SUB_SSHK_A}}run:| mkdir -p $HOME/.sshecho\u0026#34;$SSHK\u0026#34;\u0026gt;$HOME/.ssh/ssh.keychmod600$HOME/.ssh/ssh.keyexportGIT_SSH_COMMAND=\u0026#34;ssh -i $HOME/.ssh/ssh.key\u0026#34;gitsubmoduleupdate--init-- \u0026lt;specificrelativepathtosubmoduleA\u0026gt;- name:get_subm_benv:SSHK:${{secrets.SUB_SSHK_B}}run:| mkdir -p $HOME/.sshecho\u0026#34;$SSHK\u0026#34;\u0026gt;$HOME/.ssh/ssh.keychmod600$HOME/.ssh/ssh.keyexportGIT_SSH_COMMAND=\u0026#34;ssh -i $HOME/.ssh/ssh.key\u0026#34;gitsubmoduleupdate--init-- \u0026lt;specificrelativepathtosubmoduleB\u0026gt;Note that it is not possible to use the same SSH key in multiple submodule repositories, as each deploy key can only be associated with one repository.\nComplete Workflow Putting the above steps together, for the case of a single private submodule and multiple public submodules, we have:\nname:Fakesecretprojecton:push:branches:[master,development]pull_request:branches:[master]jobs:build:runs-on:${{matrix.os}}strategy:max-parallel:4matrix:os:[ubuntu-18.04]cpp-version:[g++-7,g++-9,clang++]steps:- uses:actions/checkout@v2- name:get_submenv:SSHK:${{secrets.SUB_SSHK_A}}run:| mkdir -p $HOME/.sshecho\u0026#34;$SSHK\u0026#34;\u0026gt;$HOME/.ssh/ssh.keychmod600$HOME/.ssh/ssh.keyexportGIT_SSH_COMMAND=\u0026#34;ssh -i $HOME/.ssh/ssh.key\u0026#34;gitsubmoduleupdate--init--recursive- name:buildenv:CXX:${{matrix.cpp-version}}run:| mkdir build \u0026amp;\u0026amp; cd buildcmake-DCMAKE_CXX_COMPILER=\u0026#34;$CXX\u0026#34;-DCMAKE_CXX_FLAGS=\u0026#34;-std=c++11\u0026#34;../make-j$(nproc)- name:runrun:| ./super_secretConclusions We have demonstrated a minimally invasive setup for working with a private submodule, which is trivially extensible to multiple such submodules. With this, it appears that GH actions might a viable option (as opposed to say, Wercker), at least for private teams. A more full comparative post might be warranted at a later date.\n  submodule-checkout uses a similar concept but unfortunately does not extend to multiple submodules and the submodules are checked out as root \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/priv-gh-actions/","tags":null,"title":"Private Github Actions without PAT"},{"categories":["personal"],"contents":" An introduction to hacking keyboard layouts with X keyboard extension (XKB) and klfc, focused on Colemak and vim bindings\n Background Inspite of maximizing ergonomic bindings for most common software (e.g. Vimium, doom-emacs), every operation with the arrow keys still trouble me. Here I will lay out my experiments transitioning to a stable, uniquely defined setup with the X keyboard extension.\nSeries This post is part of a series on Colemak and keyboard management in general.\n Switching to Colemak Refactoring Dotfiles For Colemak Remapping Keys Globally and Persistently with XKB \u0026lt;\u0026ndash; You are here!  Keyboard Basics Some terms to keep in mind for this post are1:\n Dead Keys These don\u0026rsquo;t actually output anything, but modify the next key pressed. Like applying an umlaut on the subsequent letter. Lock Keys State modifiers which are toggled, like Caps Lock Compose Key A key which interprets a series of subsequent key strokes. A dead key on steroids.  Also the different levels (from here) are concisely defined in the following table.\nTable 1: Levels for a keyboard     Level Modifier Keys     1 None Lowercase letters, numbers other symbols   2 Shift Uppercase letters, symbols placed above numbers   3 AltGr Accented characters, symbols, some dead keys   4 Shift+AltGr More dead keys and symbols   5 Extend User-defined   6 Shift+Extend User-defined    Modification Strategies Common approaches to quick remapping of keys involves xmodmap, which does not persist between reboots. Manually recreating or spinning off of XKB configuration files was also not very appealing.\nKLFC A more elegant approach is by using the excellent klfc Haskell binary. To install this from source:\ngit clone https://github.com/39aldo39/klfc cd klfc # Kanged from the AUR https://aur.archlinux.org/packages/klfc/ cabal v1-sandbox init cabal v1-update cabal v1-install --only-dependencies --ghc-options=-dynamic --force-reinstalls cabal v1-configure --prefix=/usr --ghc-options=-dynamic cabal v1-build The output binary is in ./dist/build/klfc/klfc.\nNote that the set of keys mapped by the json files are relative to the QWERTY layout, that is:\n  This means that we have to ensure that the keys are mapped relative to QWERTY as well, not relative to the modified base layout.\nRemapping Some goals were:\n Programming (particularly in python and lisp) put a lot of stress on the right hand pinky for Colemak users2 VIM keys should be global but toggled with a lock  My primary use case is currently my ThinkPad X380, which comes with a basic QWERTY contracted layout as shown in Fig. 1.\n\n  Figure 1: Basic X380 QWERTY\n  Colemak - Layers 1 and 2 The first mapping is a basic Colemak setup as shown in Fi. fig:colemak.\n\n  Figure 2: Basic X380 Colemak\n  It wouldn\u0026rsquo;t make much sense to remap the first two layers. We can use the json from the examples of the klfc repository.\n// Base Colemak layout // https://colemak.com { \u0026#34;fullName\u0026#34;: \u0026#34;Colemak\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;colemak\u0026#34;, \u0026#34;localeId\u0026#34;: \u0026#34;00000409\u0026#34;, \u0026#34;copyright\u0026#34;: \u0026#34;Public Domain\u0026#34;, \u0026#34;company\u0026#34;: \u0026#34;2006-01-01 Shai Coleman\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;shiftlevels\u0026#34;: [ \u0026#34;None\u0026#34;, \u0026#34;Shift\u0026#34; ], \u0026#34;singletonKeys\u0026#34;: [ [ \u0026#34;CapsLock\u0026#34;, \u0026#34;Backspace\u0026#34; ] ], \u0026#34;keys\u0026#34;: [ { \u0026#34;pos\u0026#34;: \u0026#34;~\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;`\u0026#34;, \u0026#34;~\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;1\u0026#34;, \u0026#34;!\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;2\u0026#34;, \u0026#34;@\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;3\u0026#34;, \u0026#34;#\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;4\u0026#34;, \u0026#34;$\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;5\u0026#34;, \u0026#34;%\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;6\u0026#34;, \u0026#34;^\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;7\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;7\u0026#34;, \u0026#34;\u0026amp;\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;8\u0026#34;, \u0026#34;*\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;9\u0026#34;, \u0026#34;(\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;0\u0026#34;, \u0026#34;)\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;-\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;-\u0026#34;, \u0026#34;_\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;+\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;=\u0026#34;, \u0026#34;+\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;Q\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;q\u0026#34;, \u0026#34;Q\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;W\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;w\u0026#34;, \u0026#34;W\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;E\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;f\u0026#34;, \u0026#34;F\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;R\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;p\u0026#34;, \u0026#34;P\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;T\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;G\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;Y\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;j\u0026#34;, \u0026#34;J\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;U\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;l\u0026#34;, \u0026#34;L\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;I\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;u\u0026#34;, \u0026#34;U\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;O\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;y\u0026#34;, \u0026#34;Y\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;P\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;;\u0026#34;, \u0026#34;:\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;[\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;[\u0026#34;, \u0026#34;{\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;]\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;]\u0026#34;, \u0026#34;}\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;\\\\\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;\\\\\u0026#34;, \u0026#34;|\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;a\u0026#34;, \u0026#34;A\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;S\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;r\u0026#34;, \u0026#34;R\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;D\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;s\u0026#34;, \u0026#34;S\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;F\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;t\u0026#34;, \u0026#34;T\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;G\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;d\u0026#34;, \u0026#34;D\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;h\u0026#34;, \u0026#34;H\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;J\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;n\u0026#34;, \u0026#34;N\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;K\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;e\u0026#34;, \u0026#34;E\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;L\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;i\u0026#34;, \u0026#34;I\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;;\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;o\u0026#34;, \u0026#34;O\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;\u0026#39;\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;\u0026#39;\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;Z\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;z\u0026#34;, \u0026#34;Z\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;X\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;x\u0026#34;, \u0026#34;X\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;c\u0026#34;, \u0026#34;C\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;V\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;v\u0026#34;, \u0026#34;V\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;b\u0026#34;, \u0026#34;B\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;k\u0026#34;, \u0026#34;K\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;M\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;m\u0026#34;, \u0026#34;M\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;,\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;,\u0026#34;, \u0026#34;\u0026lt;\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;.\u0026#34;, \u0026#34;\u0026gt;\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;/\u0026#34;, \u0026#34;?\u0026#34; ] } ], \u0026#34;variants\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;mod-dh\u0026#34;, \u0026#34;shiftlevels\u0026#34;: [ \u0026#34;None\u0026#34;, \u0026#34;Shift\u0026#34; ], \u0026#34;keys\u0026#34;: [ { \u0026#34;pos\u0026#34;: \u0026#34;V\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;d\u0026#34;, \u0026#34;D\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;v\u0026#34;, \u0026#34;V\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;G\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;g\u0026#34;, \u0026#34;G\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;T\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;b\u0026#34;, \u0026#34;B\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;k\u0026#34;, \u0026#34;K\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;m\u0026#34;, \u0026#34;M\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;M\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;h\u0026#34;, \u0026#34;H\u0026#34; ] } ] } ] } VIM Extensions The additions are primarily through the Extend Layer3 (Fig. 3), with a Shift addition (Fig. 4) and more keys with AltGr (Fig. 5). As mentioned before, we have to continue mapping relative to QWERTY, so these mappings can be used by QWERTY users as well. We will essentially use the ISO_5 shift key.\n\n  Figure 3: Extend layer mapping\n   Maps basic vim movement  \n  Figure 4: Extend+Shift layer mapping\n   Relatively empty, just has a bracket  \n  Figure 5: Extend+AltGr layer mapping\n   Includes deletions  These are defined in a single json as shown.\n{ \u0026#34;filter\u0026#34;: \u0026#34;no klc,keylayout\u0026#34;, \u0026#34;singletonKeys\u0026#34;: [ [ \u0026#34;CapsLock\u0026#34;, \u0026#34;Extend\u0026#34; ], [ \u0026#34;Alt_L\u0026#34;, \u0026#34;AltGr\u0026#34; ] ], \u0026#34;shiftlevels\u0026#34;: [ \u0026#34;Extend\u0026#34;, \u0026#34;Shift+Extend\u0026#34;, \u0026#34;AltGr+Extend\u0026#34; ], \u0026#34;keys\u0026#34;: [ { \u0026#34;pos\u0026#34;: \u0026#34;H\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;Left\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;Backspace\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;J\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;Down\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;K\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;Up\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;L\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;Right\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;Delete\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;;\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;Enter\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;(\u0026#34;, \u0026#34;[\u0026#34;, \u0026#34;{\u0026#34; ] }, { \u0026#34;pos\u0026#34;: \u0026#34;V\u0026#34;, \u0026#34;letters\u0026#34;: [ \u0026#34;)\u0026#34;, \u0026#34;]\u0026#34; , \u0026#34;}\u0026#34;] } ] }  The key idea is to have the AltGr keys placed symmetrically One major issue is that Backspace has gone from a single stroke of CapsLock to a three-key-combo  This is the least intuitive, and might need to be changed   The third level (Extend+AltGr) is more accessible than the second in this layout  Usage To generate the files needed to load the new layout:\nklfc colemak.json extendVIM.json -o coleVIM cd coleVIM/xkb ./run-session.sh # to try them out ./install-system.sh \u0026amp;\u0026amp; ./scripts/install-xcompose.sh # to install them Conclusions The layout takes a bit of time to get used to, but it is a lot more transparent in the end compared to manually remapping to Colemak\u0026rsquo;s NEIO instead of HJKL for movement. It is both persistent and easily extended, though it is likely that more needs to be done. Perhaps some metricsÂ 4 might be collected as well.\n  For more details the Wikipedia article on Keyboard Layouts is useful \u0026#x21a9;\u0026#xfe0e;\n Colemak, unlike Dvorak, prioritises finger rolls over alternating hands \u0026#x21a9;\u0026#xfe0e;\n DreymaR\u0026rsquo;s Extend mappings might be good for QWERTY people \u0026#x21a9;\u0026#xfe0e;\n The metric collection of Michael White or the CARPALX metrics \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/remap-keys-xkb-klfc/","tags":["workflow","tools"],"title":"Remapping Keys with XKB and KLFC"},{"categories":["programming"],"contents":" Setting up unicode math and orgmode for painless Anki deck building\n Background A recent Hacker News post reminded me of Anki, and that brought back memories of my Anki orgmode setup. I thought I\u0026rsquo;d re-create and immortalize it.\nThe standard way of working with Anki, is with a pretty awkward GUI. There are changes to be made here, which make life a little easier, including the setup of custom cards, but the inherent concerns of the WYSIWYG editor are basically insurmountable.\n  Figure 1: Anki GUI\n  The goal is to get this a better workflow than manual editing of Anki decks. orgmode is perfect for making cards, especially in the larger context of using it for storing images and rich pdfs.\n  Figure 2: A pleasant way to make anki decks\n  Methodology To accomplish this, we basically need to have the following:\n anki-editor This emacs plugin will facilitate the conversion from our orgmode files to the Anki markup anki-connect We need a server of sorts set up to allow us to push pull and get errors from the running Anki server, this is an Anki plugin LaTeX process editor It wouldn\u0026rsquo;t be much better than manually making cards in Anki if we couldn\u0026rsquo;t leverage unicode characters, so we need to modify the internal Anki build process for TeX  Anki Editor As with all emacs related setup snippets on this site, these should be modified and adapted as needed, especially for those not using doom-emacs.\n(use-package anki-editor :after org-noter :config ; I like making decks (setq anki-editor-create-decks \u0026#39;t)) Also, my full configuration has additional non-essential quality of life keybindings amongst other things.\nAnki Connect CTRL+Shift+A will bring up the addon settings, and Anki has to be restarted after installing the addons. Anki Connect itself does not need any further configuration, though the readme is very comprehensive.\nTeX Setup The LaTeX process editor can be set in two stages, wherein we will first ensure that we can use xelatex and that we can generate an svg.\n{ \u0026#34;svgCommands\u0026#34;: [ [ \u0026#34;xelatex\u0026#34;, \u0026#34;--no-pdf\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;tmp.tex\u0026#34; ], [ \u0026#34;dvisvgm\u0026#34;, \u0026#34;--no-fonts\u0026#34;, \u0026#34;-Z\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;tmp.xdv\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;tmp.svg\u0026#34; ] ] } The png settings can be modified in a similar manner if required, but it is better to generate svg files, which will set up in the cosmetics section. Note that we pass --no-pdf to get the xdv file which has replaced dvi files for xelatex.\nCosmetics The final aspect of this is to be configured with the GUI. The easiest option is to clone the Basic card type and customize that. CTRL+Shift+N should bring up the card editor. The relevant styles are1 (from the Cards option):\n.card { font-family: Literata; font-size: 26px; text-align: center; color: black; background-color: white; } img { max-height:1000px; height: auto; width: auto; } img[src*=\u0026#34;latex\u0026#34;] { vertical-align: middle; } Now we need setup our TeX headers as well, and enable the Create scalable images with dvisvgm option. The header needs to have (minimally):\n\\documentclass[12pt]{article} \\special{papersize=3in,5in} \\usepackage{geometry} \\usepackage{unicode-math} \\usepackage{mathtools} \\pagestyle{empty} \\setlength{\\parindent}{0in} \\begin{document} While the footer is simply \\end{document}. With this, we have achieved pretty formatting.\n  Figure 3: Pretty card formatting\n  Font Locking Inspired by this post, we will also use orgcss to obtain some orgmode font-locking. We will add the following styles:\n:not(pre) \u0026gt; code { padding: 2px 5px; margin: auto 1px; border: 1px solid #ddd; border-radius: 3px; background-clip: padding-box; color: #333; font-size: $code-size; } .org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: $monospace; font-size: $code-size; margin: 1em auto; padding: 0.1em 0.5em; position: relative; } .org-src-container \u0026gt; pre { overflow: auto; } .org-src-container \u0026gt; pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.5em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: $code-size; } /* from http://demo.thi.ng/org-spec/ */ .org-src-container \u0026gt; pre.src-sh:before { content: \u0026#34;sh\u0026#34;; } .org-src-container \u0026gt; pre.src-bash:before { content: \u0026#34;bash\u0026#34;; } .org-src-container \u0026gt; pre.src-emacs-lisp:before { content: \u0026#34;Emacs Lisp\u0026#34;; } .org-src-container \u0026gt; pre.src-R:before { content: \u0026#34;R\u0026#34;; } .org-src-container \u0026gt; pre.src-org:before { content: \u0026#34;Org\u0026#34;; } .org-src-container \u0026gt; pre.src-cpp:before { content: \u0026#34;C++\u0026#34;; } .org-src-container \u0026gt; pre.src-c:before { content: \u0026#34;C\u0026#34;; } .org-src-container \u0026gt; pre.src-html:before { content: \u0026#34;HTML\u0026#34;; } .org-src-container \u0026gt; pre.src-js:before { content: \u0026#34;Javascript\u0026#34;; } .org-src-container \u0026gt; pre.src-javascript:before { content: \u0026#34;Javascript\u0026#34;; } // More languages from http://orgmode.org/worg/org-contrib/babel/languages.html .org-src-container \u0026gt; pre.src-abc:before { content: \u0026#34;ABC\u0026#34;; } .org-src-container \u0026gt; pre.src-asymptote:before { content: \u0026#34;Asymptote\u0026#34;; } .org-src-container \u0026gt; pre.src-awk:before { content: \u0026#34;Awk\u0026#34;; } .org-src-container \u0026gt; pre.src-C:before { content: \u0026#34;C\u0026#34;; } .org-src-container \u0026gt; pre.src-calc:before { content: \u0026#34;Calc\u0026#34;; } .org-src-container \u0026gt; pre.src-clojure:before { content: \u0026#34;Clojure\u0026#34;; } .org-src-container \u0026gt; pre.src-comint:before { content: \u0026#34;comint\u0026#34;; } .org-src-container \u0026gt; pre.src-css:before { content: \u0026#34;CSS\u0026#34;; } .org-src-container \u0026gt; pre.src-D:before { content: \u0026#34;D\u0026#34;; } .org-src-container \u0026gt; pre.src-ditaa:before { content: \u0026#34;Ditaa\u0026#34;; } .org-src-container \u0026gt; pre.src-dot:before { content: \u0026#34;Dot\u0026#34;; } .org-src-container \u0026gt; pre.src-ebnf:before { content: \u0026#34;ebnf\u0026#34;; } .org-src-container \u0026gt; pre.src-forth:before { content: \u0026#34;Forth\u0026#34;; } .org-src-container \u0026gt; pre.src-F90:before { content: \u0026#34;Fortran\u0026#34;; } .org-src-container \u0026gt; pre.src-gnuplot:before { content: \u0026#34;Gnuplot\u0026#34;; } .org-src-container \u0026gt; pre.src-haskell:before { content: \u0026#34;Haskell\u0026#34;; } .org-src-container \u0026gt; pre.src-io:before { content: \u0026#34;Io\u0026#34;; } .org-src-container \u0026gt; pre.src-java:before { content: \u0026#34;Java\u0026#34;; } .org-src-container \u0026gt; pre.src-latex:before { content: \u0026#34;LaTeX\u0026#34;; } .org-src-container \u0026gt; pre.src-ledger:before { content: \u0026#34;Ledger\u0026#34;; } .org-src-container \u0026gt; pre.src-ly:before { content: \u0026#34;Lilypond\u0026#34;; } .org-src-container \u0026gt; pre.src-lisp:before { content: \u0026#34;Lisp\u0026#34;; } .org-src-container \u0026gt; pre.src-makefile:before { content: \u0026#34;Make\u0026#34;; } .org-src-container \u0026gt; pre.src-matlab:before { content: \u0026#34;Matlab\u0026#34;; } .org-src-container \u0026gt; pre.src-max:before { content: \u0026#34;Maxima\u0026#34;; } .org-src-container \u0026gt; pre.src-mscgen:before { content: \u0026#34;Mscgen\u0026#34;; } .org-src-container \u0026gt; pre.src-Caml:before { content: \u0026#34;Objective\u0026#34;; } .org-src-container \u0026gt; pre.src-octave:before { content: \u0026#34;Octave\u0026#34;; } .org-src-container \u0026gt; pre.src-org:before { content: \u0026#34;Org\u0026#34;; } .org-src-container \u0026gt; pre.src-perl:before { content: \u0026#34;Perl\u0026#34;; } .org-src-container \u0026gt; pre.src-picolisp:before { content: \u0026#34;Picolisp\u0026#34;; } .org-src-container \u0026gt; pre.src-plantuml:before { content: \u0026#34;PlantUML\u0026#34;; } .org-src-container \u0026gt; pre.src-python:before { content: \u0026#34;Python\u0026#34;; } .org-src-container \u0026gt; pre.src-ruby:before { content: \u0026#34;Ruby\u0026#34;; } .org-src-container \u0026gt; pre.src-sass:before { content: \u0026#34;Sass\u0026#34;; } .org-src-container \u0026gt; pre.src-scala:before { content: \u0026#34;Scala\u0026#34;; } .org-src-container \u0026gt; pre.src-scheme:before { content: \u0026#34;Scheme\u0026#34;; } .org-src-container \u0026gt; pre.src-screen:before { content: \u0026#34;Screen\u0026#34;; } .org-src-container \u0026gt; pre.src-sed:before { content: \u0026#34;Sed\u0026#34;; } .org-src-container \u0026gt; pre.src-shell:before { content: \u0026#34;shell\u0026#34;; } .org-src-container \u0026gt; pre.src-shen:before { content: \u0026#34;Shen\u0026#34;; } .org-src-container \u0026gt; pre.src-sql:before { content: \u0026#34;SQL\u0026#34;; } .org-src-container \u0026gt; pre.src-sqlite:before { content: \u0026#34;SQLite\u0026#34;; } .org-src-container \u0026gt; pre.src-stan:before { content: \u0026#34;Stan\u0026#34;; } .org-src-container \u0026gt; pre.src-vala:before { content: \u0026#34;Vala\u0026#34;; } .org-src-container \u0026gt; pre.src-axiom:before { content: \u0026#34;Axiom\u0026#34;; } .org-src-container \u0026gt; pre.src-browser:before { content: \u0026#34;HTML\u0026#34;; } .org-src-container \u0026gt; pre.src-cypher:before { content: \u0026#34;Neo4j\u0026#34;; } .org-src-container \u0026gt; pre.src-elixir:before { content: \u0026#34;Elixir\u0026#34;; } .org-src-container \u0026gt; pre.src-request:before { content: \u0026#34;http\u0026#34;; } .org-src-container \u0026gt; pre.src-ipython:before { content: \u0026#34;iPython\u0026#34;; } .org-src-container \u0026gt; pre.src-kotlin:before { content: \u0026#34;Kotlin\u0026#34;; } .org-src-container \u0026gt; pre.src-Flavored Erlang lfe:before { content: \u0026#34;Lisp\u0026#34;; } .org-src-container \u0026gt; pre.src-mongo:before { content: \u0026#34;MongoDB\u0026#34;; } .org-src-container \u0026gt; pre.src-prolog:before { content: \u0026#34;Prolog\u0026#34;; } .org-src-container \u0026gt; pre.src-rec:before { content: \u0026#34;rec\u0026#34;; } .org-src-container \u0026gt; pre.src-ML sml:before { content: \u0026#34;Standard\u0026#34;; } .org-src-container \u0026gt; pre.src-Translate translate:before { content: \u0026#34;Google\u0026#34;; } .org-src-container \u0026gt; pre.src-typescript:before { content: \u0026#34;Typescript\u0026#34;; } .org-src-container \u0026gt; pre.src-rust:before { content: \u0026#34;Rust\u0026#34;; } However, in the interests of sanity, we will leverage the Syntax Highlighting Anki plugin for managing the actual style-sheets instead of manual edits to each card type.\n  Figure 4: A screencast from the plugin readme\n  At this stage, we have a card which can gracefully handle both XeLaTeX and code in an elegant manner. An example is presented in the next section.\nUsage For the sample card2 shown, the markup is dead simple.\n*Basis Vectors:math:quantum:linear: :properties: :anki_deck: CompChem :anki_note_type: LaTeX :ANKI_NOTE_ID: 1603755931922 ð ** Front For a three dimensional vector with components $aáµ¢,i=1,2,3$ what are the basis vectors? ** Back This is defined as follows: $$ \\mathbf{a}=\\mathbf{e}âaâ+\\mathbf{e}âaâ+\\mathbf{e}âaâ=âáµ¢\\mathbf{e}áµ¢aáµ¢ $$ Essentially:\n Enable and load anki-editor  Add local variable section to ensure we load anki-editor. This is essentially via eval: (anki-editor-mode) in the Local variables block   Fire up Anki Export at will, and continue adding more cards or non-card details to the orgmode file  The Anki editor examples file is excellent and the issue tracker also has a ton of information.\nCode *Test Code:code:python: :properties: :anki_deck: CodeWiki :anki_note_type: myTex :ANKI_NOTE_ID: 1603891864091 ð ** Front What is the definition of an inner product? What are some examples of a code block in Python and R? ** Back This is essentially a *norm* with more structure. The first two properties, positive definiteness and symmetry (conjugate) defines a *norm*. $$ \\mathbf{a}=\\mathbf{e}âaâ+\\mathbf{e}âaâ+\\mathbf{e}âaâ=âáµ¢\\mathbf{e}áµ¢aáµ¢ $$ #+begin_src pythondef test(): x = [1,2,3] for i in x: print(i) #+end_src #+begin_src Rlibrary(\u0026#34;dplyr\u0026#34;) x = 1 #+end_src   Figure 5: Code card with TeX\n  More Content  Fundamental Haskell An excellent example of how a multiple frontend learning repository can be, written with org-drill3 Anki powerups with orgmode A post brought to my attention after I had published this, an excellent introduction with videos  Conclusions Some final comments:\n Screenshots and other images linked are automatically synced The TeX is best rendered on the PC first, so run through these at-least once  A missing link in this setup is the ability to use a touch screen and stylus to write proofs or skip the TeX setup altogether, but that would require another post altogether. Additionally, all the standard bells and whistles of having an orgmode document can be applied, including, crucially, the ability to have long-form notes as well, a coherent approach to this can also be covered later.\n  The alignment trick is from this post \u0026#x21a9;\u0026#xfe0e;\n It is a gag card, no judgement here \u0026#x21a9;\u0026#xfe0e;\n org-drill doesn\u0026rsquo;t support any kind of mobile synchronization \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/anki-decks-orgmode/","tags":["workflow","projects","tools","emacs","orgmode"],"title":"Anki Decks with Orgmode"},{"categories":null,"contents":" Dual screen workflows without screens across operating systems\n Background My X380 sadly has been having port issues. This meant that my M14 was no longer a viable option for my second screen needs.\nOutline The general form of the solution works in one of two ways:\n VNC Viewer Where the (second-screen) laptop connects to a VNC server on the primary laptop Peripheral Shares Where the secondary laptop runs a server to enable proxying mouse and keyboard access from the primary laptop  VNC and Windows For laptops running Windows, I personally just set up TightVNC. The standard settings work well enough for the peripheral share described below.\nComments This is best used for working with Windows only stuff like Office.\nVNC and Linux Peripheral Share For the secondary laptop we need to run a server (tigervnc) without setting an external screen.\nx0vncserver -rfbauth ~/.vnc/passwd Now on the main laptop, we will simply leverage x2vnc to extend into the secondary laptop.\nx2vnc $ip -west Where we can get the IP (local) by checking with ifconfig on the secondary laptop.\nMeta This works best when combined with a networked file-system, since then you can interact with files in tandem. Otherwise, there is quite a bit of git based back and forth.\nVNC and Android There are two parts to this solution. Note that, as Android devices don\u0026rsquo;t run X11 systems in a meaningful way, the direct access method is through a paid application, a2vnc server lite, which also did not work well in my tests. We will therefore focus on setting a VNC viewer up to connect to the primary laptop.\nPrimary Settings XRandR Setup For the primary laptop, we will start by obtaining our present screens configuration.\nxrandr | grep \u0026#34; connected\u0026#34; eDP1 connected primary 1920x1080+1920+0 (normal left inverted right x axis y axis) 290mm x 170mm Naturally your output will differ. We also need the resolution of the Android device. In my case, they are the same. At this point we are ready to figure out the mode-line.\ngtf 1920 1080 60 # 1920x1080 @ 60.00 Hz (GTF) hsync: 67.08 kHz; pclk: 172.80 MHz Modeline \u0026#34;1920x1080_60.00\u0026#34; 172.80 1920 2040 2248 2576 1080 1081 1084 1118 -HSync +Vsync Let us now use this information to create a bunch of modelines.\nxrandr --newmode \u0026#34;1920x1080_60.00\u0026#34; 172.80 1920 2040 2248 2576 1080 1081 1084 1118 -HSync +Vsync Note that we can create more of these in the same manner. We can now move forward with making a virtual screen.\nxrandr --addmode VIRTUAL1 1920x1080_60.00 We can now finally set up the output.\nxrandr --output VIRTUAL1 --mode 1920x1080_60.00 --left-of eDP1 Note that it is better to use mons to work with our newly created virtual screen.\nmons -e left This is still a bit ugly, since the process needs to be repeated with each reboot.\nVNC Setup Now we need prepare our VNC. x11vnc is recommended at the moment.\nx11vnc -vencrypt nodh:only-ssl -ssl SAVE -clip 1920x1080+0+0 Android Settings For this section, I personally use bVNC Pro. The setup is pretty dead simple. A basic VNC connection is all that is required.\nComments In practice, I use the x86 setup, with the secondary laptop acting as a viewer for a virtual screen, mostly because that way I can tune into multiple Zoom meetings (a bonus).\nConclusion The final setup is quite robust to changes. Future posts might go into setting up the kind of local networking tools to help move files, code and more between both machines, to improve on the peripheral share approach. Additionally, there are still some manual steps which can and should be automated. I\u0026rsquo;m not super pleased with the setup, it takes longer than a wireless screen. This post is complimented by the work and setup with touchscreens here.\n","permalink":"https://rgoswami.me/posts/laptop-as-second-screens/","tags":null,"title":"Old Laptops as Secondary Monitors"},{"categories":["conferences"],"contents":" A meta-post on my lightning talk at NixCon 2020\n Background Much the same as the rationale behind my meta-post on my talk at PyCon India 2020, that is:\n I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one locationÂ 1 It would be nice to have my own thoughts here afterwards  Details  Title Nix from the dark ages (without Root) Proposal See the cfp response here  Abstract  Short comments from the trenches of High Performance Clusters on working with Nix on kernel locked-in systems without proot support.\n Linked Posts  Local Nix without Root Motivation and installation  Provisioning Dotfiles on an HPC: Looks into how standard approaches fail (proot) HPC Dotfiles and LMod: All the ugly manual install steps    Other Content Anything on this site tagged with Nix. Also an introduction to nix given by me (and Amrita Goswami) at CarpentryCon2020 is here:\n CarpentryCon2020 Materials A tutorial introduction to Nix and Python  Slides The slides are embedded below. The orgmode source is here on the site\u0026rsquo;s GH repo.\n   One location I am going to be able to keep track of \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/nixcon-in-2020-meta/","tags":["presentations","ramblings","nix","hpc"],"title":"Talk Supplements for NixCon 2020"},{"categories":["notes"],"contents":" A post on local recordings\n Background Since the advent of the COVID-19 situation, there has been an increase in the demand for recorded materials. Standard approaches involve Zoom, which is not only proprietary, but also quite a bit of a privacy nightmare. The last straw was the random placement of my speaker bauble head.\n  Figure 1: Zoom webcam placement\n  At this point, given that I was to set up a pre-recorded video for PyCon India 2020, I decided to look into alternatives.\nAlternatives The search for alternative screen recording systems isn\u0026rsquo;t really a very new one. For group work (like W3cmÂ 1), I tend to prefer Skype, since it handles speaker galleries very well. Unfortunately, Skype has no capacity for recording single person calls, at least as yet. This is not the place for an extended debate on the pros and cons of Skype, or Google Meet (only records corporate accounts), or the rest. Instead, lets sum up all these issue with the simple understanding that, if one person wants to record a webcam connected to their local computer, along with the screen, it is insane to imagine that the only way to get this is by:\n Making an account somewhere (Zoom, Meet, Skype, anything) Giving a cloud service permission to record our screens  At the same time, a lot of standard tools for screen recording do not play nice with webcam recorders (like Simple Screen Recorder and Cheese).\nOpen Broadcaster Software The OBS studio project is a godsend. It allows for simultaneously managing multiple streams, of both audio and video. Furthermore, since these are implemented as overlays, it is possible to fine-tune the positioning of each of these, which is something Zoom and friends lack.\n  Figure 2: Into the matrix\n  The ability to resize the webcam is best shown in the figure below.\n  Figure 3: Almost Zoom, only better\n  OBS also generates beautifully small videos and supports live-streaming.\nCommon Caveats  The standard setting is set to work with hardware acceleration, which may not be present for many users  Use the settings to change this back to the software setting    Conclusions I cannot imagine going back to Zoom to record anything local. It is an added bonus that OBS is both cross-platform and FOSS. It is only incredible more people do not use it.\n  Water, Chemicals and more with Computers for Chemistry, a computational chemistry course aimed at middle school students taught with my sister Amrita Goswami \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/rep-zoom-obs/","tags":["workflow","tools"],"title":"Replacing Zoom with Open Broadcaster Software"},{"categories":["conferences"],"contents":" A meta-post on my talk at PyCon India 2020\n Background I am to present at PyCon IN 2020. Some of the motivating reasons for having a post are:\n I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one locationÂ 1 It would be nice to have my own thoughts here afterwards  Details of this happy circumstance are reproduced below from the CFP here.\nDetails  Title Reproducible Scalable Workflows with Nix, Papermill and Renku  Abstract  The provenance of Jupyter notebook interfaces can no longer be denied in the data-science and analysis community. In particular, fledgling and \u0026ldquo;fresh out of school\u0026rdquo; researchers and practitioners are used to using Jupyter notebooks for their initial analysis. As might be expected, these workflows are difficult to reproduce and also store. Caching efficiency and dependency re-use are almost always sub-optimal with virtual environments, compared to native installations, and the same issues (along with additional security concerns) plague docker setups as well. There are a set of Jupyter tools which have evolved to close this gap, like JupyText. However, the fundamental aspect of reproducing workflows on high performance computing clusters, of being able to compose programmatically, compilation rules which efficiently use underlying hardware with minimal user intervention is still not a solved problem. In this talk, I will discuss packaging Python applications and workflows in an end-to-end composable manner using the Nix ecosystem, which leverages a functional programming paradigm and then show how this allows for both user-friendly low-compute analysis, while being scalable on large clusters. To that end, the tools introduced will be:\nThe Nix programming language (emphasis on developer environments for python with mkShell) Jupyter Python kernels (the Xeus kernel for Python debugging) and Jupytext Papermill for parameterizing notebooks Renku for tracing provenance The goal is to have the audience familiarized with the best practices for reproducibility and analysis. The focus will be on scientific HPC applications, though any managed cluster can and will benefit from the practices described.\n Other Content A more in-depth introductory workshop on Nix itself given by me (and Amrita Goswami) at CarpentryCon2020 is here:\n CarpentryCon2020 Materials A tutorial introduction to Nix and Python  Slides The slides are embedded below. The orgmode source is here on the site\u0026rsquo;s GH repo.\n   One location I am going to be able to keep track of \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/pycon-in-2020-meta/","tags":["presentations","ramblings","nix","python"],"title":"Talk Supplements for PyCon India 2020"},{"categories":["programming"],"contents":" Automating documenation deployment with Travis, rake and nix\n Background In the previous post we generated documentation using Doxygen with Exhale to handle Sphinx. Now we will clean up the earlier workflow with rake and ensure the environment is reproducible with nix while deploying to Travis CI.\nSeries  Documenting C++ with Doxygen and Sphinx - Exhale Publishing Doxygen and Sphinx with Nix and Rake \u0026lt;\u0026ndash; You are here Documenting C++ with Doxygen and Sphinx - doxyrest Adding Tutorials to Sphinx Projects  Setup A quick reminder of the setup we generated in the last post:\ntree -d $prj/ -L 2    .       âââ docs    âÂ  âââ Doxygen   âÂ  âââ Sphinx   âââ nix    âÂ  âââ pkgs   âââ projects    âÂ  âââ symengine   âââ scripts         8 directories     We had further setup files to enable documentation generation with a manual two stage process (handling doxygen and sphinx separately).\ncd docs/Doxygen doxygen Doxyfile-prj.cfg cd ../Sphinx make html mv build/html ../../public This might be extracted into a simple build.sh script, and then we might decide to have a clean.sh script and then we might try to replicate all the functionality of a good build system with scripts.\nThankfully, we will instead start with a build script defined as above to transition to nix, before using an actual build tool for our dirty work.\nAdding Nix It wouldn\u0026rsquo;t make sense for me to not stick nix into this. I recall the dark days of setting up Dockerfiles to ensure reproducible environments on Travis.\nAt this point one might assume we will leverage the requirements.txt based workflow described earlier in Niv and Mach-Nix for Nix Python. While this would make sense, there are two barriers to its usage:\n It is slower than a poetry build, as dependency resolution is performed It does not play well with existing projects  Most python projects do not rely solely on requirements.txtÂ 1    Poetry2Nix Recall that as sphinx is originally meant for and most often used for Python projects, we will need to consider the possibility (remote though it is) that there might be users who would like to test the documentation without setting up nix.\nThus we will look to the poetry2nix project instead. We note the following:\n The poetry2nix setup is faster (as it consumes a lockfile instead of solving dependencies from requirements.txt)  mach-nix however, is more flexible and can make use of the poetry2nix overrides   In a strange chicken and egg problem, we will have to manually generate the lockfile, thereby creating an impure poetry project for every update, though the nix setup will not need it later  This is one of the major reasons to prefer mach-nix for newer projects    Shell Environment We prep our sources in the usual way, by running niv init in the project root to generate the nix/ folder and the sources therein. With all that in mind, the shell.nix file at this point is fairly standard, keeping the general niv setup in mind (described in a previous Nix tutorial):\n# -*- mode: nix-mode -*- let sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; customPython = pkgs.poetry2nix.mkPoetryEnv { projectDir = ./.; }; in pkgs.mkShell { buildInputs = with pkgs; [ doxygen customPython rake darkhttpd ]; } Where the most interesting aspect is that the projectDir is to be the location of the project root, though both poetrylock and pyproject variables are supported.\nRefactoring We consider the problem of refactoring the build.sh script:\n#!/usr/bin/env bash cd docs/Doxygen doxygen Doxyfile-prj.cfg cd ../Sphinx make html mv build/html ../../public Without resorting to methods such as nix-shell --run build.sh --pure.\nNix Bash Script in hand, we would like to be able to run it directly in the nix environment. We modify the script as follows:\n#! /usr/bin/env nix-shell #! nix-shell deps.nix -i bash # Build Doxygen cd docs/Doxygen doxygen Doxyfile-syme.cfg # Build Sphinx cd ../Sphinx make html mv build/html ../../public # Local Variables: # mode: shell-script # End: This calls on a deps.nix2 which we shall generate in a manner very reminiscent of the shell.nixÂ 3 as follows:\nlet sources = import ./../nix/sources.nix; pkgs = import sources.nixpkgs { }; customPython = pkgs.poetry2nix.mkPoetryEnv { projectDir = ./../.; }; in pkgs.runCommand \u0026#34;dummy\u0026#34; { buildInputs = with pkgs; [ doxygen customPython ]; } \u0026#34;\u0026#34; Only the paths have changed, and instead of creating and returning a shell environment with mkShell we instead \u0026ldquo;run\u0026rdquo; a derivation instead. At this point we can run this simply as:\n./scripts/build.sh This is reasonably ready (as a first draft) for being incorporated into a continuous integration workflow.\nTravis CI Seeing as Travis provides first class nix support, as well as excellent integration with GitHub, we will prefer it.\nSettings A minor but necessary evil is setting up a PAP (personal access token) from here. Depending on what repositories are being used, the scope should encompass repo permissions (minimally public_repo), and admin:org permissions might be required.\nHaving obtained the token, we will need to navigate to the Settings section on the Travis web-UI and add the token as an environment variable, we might be partial to a name like GH_TOKEN.\n  Figure 1: Settings at travis-ci.com/host/proj/settings\n  Build Configuration We will leverage the following configuration:\nlanguage:nixbefore_install:- sudomkdir-p/etc/nix- echo\u0026#34;substituters = https://cache.nixos.org/ file://$HOME/nix.store\u0026#34;|sudotee-a/etc/nix/nix.conf\u0026gt;/dev/null- echo\u0026#39;require-sigs = false\u0026#39;|sudotee-a/etc/nix/nix.conf\u0026gt;/dev/nullbefore_script:- sudomkdir-p/etc/nix\u0026amp;\u0026amp;echo\u0026#39;sandbox = true\u0026#39;|sudotee/etc/nix/nix.confscript:- scripts/build.shbefore_cache:- mkdir-p$HOME/nix.store- nixcopy--tofile://$HOME/nix.store-fshell.nixbuildInputscache:nix:truedirectories:- $HOME/nix.storedeploy:provider:pageslocal_dir:./public/skip_cleanup:truegithub_token:$GH_TOKEN# Set in the settings page of your repository, as a secure variablekeep_history:truetarget_branch:master# Required for user pageson:branch:srcWhere all the action is essentially in script and deploy. Note however, that the before_cache step should change if there is a default.nix instead. We will in this case, consider the situation of having an organization or user page being the deploy target.\nRake Usable though the preceding setting is, it is still rather unwieldy in that:\n there are a bunch of artifacts which need to be cleaned manually it is fragile and tied to the folder names  We can fix this with any of the popular build systems, however here we will focus on the excellent rakeÂ 4. We shall commit to our course of action by removing make.\ncd docs/Sphinx rm Makefile make.bat # other make cruft Components Variables We will begin by requiring rake and setting basic variables.\nrequire \u0026#39;rake\u0026#39; CWD = File.expand_path(__dir__) DOXYFILE = \u0026#34;Doxyfile-prj.cfg\u0026#34; OUTDIR = File.join(CWD,\u0026#34;public\u0026#34;) SPHINXDIR = File.join(CWD,\u0026#34;docs/Sphinx\u0026#34;) This section should give a fairly clear idea of how the Rakefile itself is essentially pure ruby code. We are now beginning to have more holistic control of how our project is structured.\nTasks The general form of a task is simply:\ndesc \u0026#34;Blah blah\u0026#34; task :name do # Something end Some variations of this will be considered when appropriate.\nClean A clean task is a good first task, being as it is almost trivial in all build systems.\ndesc \u0026#34;Clean the generated content\u0026#34; task :clean do rm_rf \u0026#34;public\u0026#34; rm_rf \u0026#34;docs/Doxygen/gen_docs\u0026#34; rm_rf \u0026#34;docs/Sphinx/build\u0026#34; end Serve We will use the lightweight darkhttpd server for our generated documentation.\ndesc \u0026#34;Serve site with darkhttpd\u0026#34; task :darkServe, [:port] do |task, args| args.with_defaults(:port =\u0026gt; \u0026#34;1337\u0026#34;) sh \u0026#34;darkhttpd #{OUTDIR}--port #{args.port}\u0026#34; end Note that we have leveraged the args system in this case, and also used the top-level OUTDIR variable.\nDoxygen Since the doxygen output is a pre-requisite, it makes sense to set it up early on.\ndesc \u0026#34;Build doxygen\u0026#34; task :mkDoxy do Dir.chdir(to = File.join(CWD,\u0026#34;docs/Doxygen\u0026#34;)) system(\u0026#39;doxygen\u0026#39;, DOXYFILE) end Sphinx This task will depend on having the doxygen output, so we will express this idiomatically by making the doxygen task run early on.\ndesc \u0026#34;Build Sphinx\u0026#34; task :mkSphinx, [:builder] =\u0026gt; [\u0026#34;mkDoxy\u0026#34;] do |task, args| args.with_defaults(:builder =\u0026gt; \u0026#34;html\u0026#34;) Dir.chdir(to = File.join(CWD,\u0026#34;docs/Sphinx\u0026#34;)) sh \u0026#34;poetry install\u0026#34; sh \u0026#34;poetry run sphinx-build source #{OUTDIR}-b #{args.builder}\u0026#34; end There are some subtleties here, notably:\n The task is meant to run without nix We use the args setup as before  No Nix Meta With this we can now set up a task to build the documentation without having nix.\ndesc \u0026#34;Build site without Nix\u0026#34; task :noNixBuild =\u0026gt; \u0026#34;mkSphinx\u0026#34; do Rake::Task[\u0026#34;darkServe\u0026#34;].execute end The main take-away here is that we finally call the Rake library itself, but within the task, which means the dependency tree is respected and we get doxygen-\u0026gt;sphinx-\u0026gt;darkhttpd as required.\nNix Builder For nix use we note that we are unable to enter the nix environment from within the Rakefile itself. We work around this by being more descriptive.\ndesc \u0026#34;Build Nix Sphinx, use as nix-shell --run \u0026#39;rake mkNixDoc\u0026#39; --pure\u0026#34; task :mkNixDoc, [:builder] =\u0026gt; \u0026#34;mkDoxy\u0026#34; do |task, args| args.with_defaults(:builder =\u0026gt; \u0026#34;html\u0026#34;) Dir.chdir(to = SPHINXDIR) sh \u0026#34;sphinx-build source #{OUTDIR}-b #{args.builder}\u0026#34; end Final Form The final Rakefile shall be (with a default task defined):\nrequire \u0026#39;rake\u0026#39; # Variables CWD = File.expand_path(__dir__) DOXYFILE = \u0026#34;Doxyfile-prj.cfg\u0026#34; OUTDIR = File.join(CWD,\u0026#34;public\u0026#34;) SPHINXDIR = File.join(CWD,\u0026#34;docs/Sphinx\u0026#34;) # Tasks task :default =\u0026gt; :darkServe desc \u0026#34;Clean the generated content\u0026#34; task :clean do rm_rf \u0026#34;public\u0026#34; rm_rf \u0026#34;docs/Doxygen/gen_docs\u0026#34; rm_rf \u0026#34;docs/Sphinx/build\u0026#34; end desc \u0026#34;Serve site with darkhttpd\u0026#34; task :darkServe, [:port] do |task, args| args.with_defaults(:port =\u0026gt; \u0026#34;1337\u0026#34;) sh \u0026#34;darkhttpd #{OUTDIR}--port #{args.port}\u0026#34; end desc \u0026#34;Build Nix Sphinx, use as nix-shell --run \u0026#39;rake mkNixDoc\u0026#39; --pure\u0026#34; task :mkNixDoc, [:builder] =\u0026gt; \u0026#34;mkDoxy\u0026#34; do |task, args| args.with_defaults(:builder =\u0026gt; \u0026#34;html\u0026#34;) Dir.chdir(to = SPHINXDIR) sh \u0026#34;sphinx-build source #{OUTDIR}-b #{args.builder}\u0026#34; end desc \u0026#34;Build site without Nix\u0026#34; task :noNixBuild =\u0026gt; \u0026#34;mkSphinx\u0026#34; do Rake::Task[\u0026#34;darkServe\u0026#34;].execute end desc \u0026#34;Build doxygen\u0026#34; task :mkDoxy do Dir.chdir(to = File.join(CWD,\u0026#34;docs/Doxygen\u0026#34;)) system(\u0026#39;doxygen\u0026#39;, DOXYFILE) end desc \u0026#34;Build Sphinx\u0026#34; task :mkSphinx, [:builder] =\u0026gt; [\u0026#34;mkDoxyRest\u0026#34;] do |task, args| args.with_defaults(:builder =\u0026gt; \u0026#34;html\u0026#34;) Dir.chdir(to = File.join(CWD,\u0026#34;docs/Sphinx\u0026#34;)) sh \u0026#34;poetry install\u0026#34; sh \u0026#34;poetry run sphinx-build source #{OUTDIR}-b #{args.builder}\u0026#34; end Travis We are now in a position to fix our travis build configuration. Simply replace the old and fragile build.sh script section with the following:\nscript:- nix-shell--run\u0026#34;rake mkNixDoc\u0026#34;--show-trace--verbose--pureDirenv As a bonus section, consider the addition of the following .envrc for those who keep multiple ruby versions:\neval \u0026#34;$(rbenv init -)\u0026#34; rbenv shell 2.6.2 rake -T Activate this with the usual direnv allow. This has the added benefit of listing the defined tasks when cd'ing into the project directory.\nConclusions A lot has happened on the tooling end, even though the documentation itself has not been updated further. We have managed to setup a robust environment which is both reproducible and also amenable to users who do not have nix. We have also setup a build system, which can help us in many more ways as well (asset optimization through the rails pipeline). In the next post, we will return to the documentation itself for further tinkering.\n  Poetry and Pipenv come to mind \u0026#x21a9;\u0026#xfe0e;\n Chris Warbo has a good introduction to the nix shebang \u0026#x21a9;\u0026#xfe0e;\n In this instance, we could have simply called on shell.nix instead, but it illustrates a more general concept \u0026#x21a9;\u0026#xfe0e;\n Avdi\u0026rsquo;s blog has a fantastic introduction to rake and Rakefiles \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/","tags":["documentation","workflow","nix","cpp"],"title":"Publishing Doxygen and Sphinx with Nix and Rake"},{"categories":["programming"],"contents":" This post outlines a basic workflow for C++ projects using Doxygen, Sphinx, and Exhale.\n Background My project proposal for documenting Symengine was recently accepted for the Google Summer of Docs initiative. In the past I have been more than happy to document C++ code using only Doxygen (with pretty fantastic results), while keeping example usage separate (d-SEAMS wiki). Though this is still a feasible method, a monolithic multi-project setup might benefit from Sphinx, which is what will be covered.\nSeries This post is the first in a series based on best C++ documentation practices for Sphinx+Doxygen workflows.\n Documenting C++ with Doxygen and Sphinx - Exhale \u0026lt;\u0026ndash; You are here! Publishing Doxygen and Sphinx with Nix and Rake Documenting C++ with Doxygen and Sphinx - doxyrest (TBD) Adding Tutorials to Sphinx Projects (TBD)  Goals A couple of goals informed this approach:\n We expect our documentation to link to the source files We expect a lot of Python developers to contribute  Hence Sphinx   We would like to write .ipynb files into the docs  Another reason to use Sphinx (via MyST{NB})    Folder Structure tree -d $prj/ -L 2    .       âââ docs    âÂ  âââ Doxygen   âÂ  âââ Sphinx   âââ nix    âÂ  âââ pkgs   âââ projects    âÂ  âââ symengine   âââ scripts         8 directories     Essentially we have a scripts directory to store basic build scripts, and two kinds of documentation folders.\nBasic Doxygen The doxygen setup is beautifully simple:\ncd docs/Doxygen doxygen -g # Easier to edit mv Doxyfile Doxyfile.cfg Now we can modify some basic settings in a separate file\ntouch Doxyfile-prj.cfg vim Doxyfile-prj.cfg # or whatever Edit the file to be (minimally):\n@INCLUDE = \u0026#34;./Doxyfile.cfg\u0026#34; GENERATE_HTML = NO GENERATE_XML = YES XML_PROGRAMLISTING = NO # Project Stuff PROJECT_NAME = \u0026#34;myProject\u0026#34; PROJECT_BRIEF = \u0026#34;Dev docs\u0026#34; OUTPUT_DIRECTORY = \u0026#34;./gen_docs\u0026#34; # Inputs INPUT = \u0026#34;./../../projects/symengine/symengine\u0026#34; RECURSIVE = NO With this we will now be able to obtain the xml files for the rest of this setup.\nExhale For our first attempt, we will focus on the automation of Sphinx using the exhale tool.\n# Basic setup poetry init poetry add exhale breathe Now we can generate the basic Sphinx structure.\n# Separate source and build sphinx-quickstart --sep --makefile docs/Sphinx \\  --project \u0026#34;My Proj\u0026#34; \\  --author \u0026#34;Juurj\u0026#34; \\  --release \u0026#34;latest\u0026#34; \\  --language \u0026#34;en\u0026#34; This allows us to generate the Sphinx documentation we require, with some changes to the docs/Sphinx/source/config.py file (lifted from the exhale documentation):\nextensions = [ \u0026#39;breathe\u0026#39;, \u0026#39;exhale\u0026#39;, ] # -- Exhale configuration --------------------------------------------------- # Setup the breathe extension breathe_projects = { \u0026#34;My Proj\u0026#34;: \u0026#34;./../../Doxygen/gen_docs/xml\u0026#34; } breathe_default_project = \u0026#34;My Proj\u0026#34; # Setup the exhale extension exhale_args = { # These arguments are required \u0026#34;containmentFolder\u0026#34;: \u0026#34;./api\u0026#34;, \u0026#34;rootFileName\u0026#34;: \u0026#34;library_root.rst\u0026#34;, \u0026#34;rootFileTitle\u0026#34;: \u0026#34;Library API\u0026#34;, \u0026#34;doxygenStripFromPath\u0026#34;: \u0026#34;..\u0026#34;, # Suggested optional arguments \u0026#34;createTreeView\u0026#34;: True, # TIP: if using the sphinx-bootstrap-theme, you need # \u0026#34;treeViewIsBootstrap\u0026#34;: True, } # Tell sphinx what the primary language being documented is. primary_domain = \u0026#39;cpp\u0026#39; # Tell sphinx what the pygments highlight language should be. highlight_language = \u0026#39;cpp\u0026#39; We also need to add the output to the index.rst use the following:\n.. toctree:: :maxdepth: 2 :caption: Contents: api/library_rootAt this point we are ready to manually build our documentation.\ncd docs/Doxygen doxygen Doxyfile-prj.cfg cd ../Sphinx make html This is still pretty cumbersome though. We can view our documentation in a more pleasant manner with darkhttpd.\ndarkhttpd docs/Sphinx/build/html With this we now beautify the documentation (with the sphinx_book_theme):\npoetry add sphinx-book-theme We need to set the theme as well (in the Sphinx config.py file):\nhtml_theme = \u0026#39;sphinx_book_theme\u0026#39; This leads to some pretty documentation.\n  Figure 1: Generated documentation (Exhale)\n    Figure 2: Exhale does a great job with file-based hierarchy.\n  Conclusions At this point, we have a basic setup, which we can tweak with a bunch of themes, and/or different parsers, but this is still pretty rough around the edges. However, a caveat of this setup is that the actual contents of the source are not visible in the generated documentation. In the next post, we will look at automating this setup for deploying with Travis.\n","permalink":"https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/","tags":["documentation","workflow","cpp"],"title":"Documenting C++ with Doxygen and Sphinx - Exhale"},{"categories":["programming"],"contents":" Monkeying around with nix for HPC systems which have no root access and NFS filesystems.\n Background Nix is not well known for being friendly to users without root access. This is typically made worse by the \u0026ldquo;exotic\u0026rdquo; filesystem attributes common to HPC networks (this also plagues hermes). An earlier post details how and why proot failed. The short pitch is simply:\n  Figure 1: Does your HPC look like this?\n    Figure 2: It really is an HPC\n  If your HPC doesn\u0026rsquo;t look that swanky and you\u0026rsquo;d like it to, then read on. Note that there are all the obvious benefits of nix as well, but this is a more eye-catchy pitch.\nSetup  The basic concept is to install nix from source, with appropriate patches, and then mess around with paths until it is ready and willing to work with stores which are not /nixÂ 1\n This concept is strongly influenced by the work described in this repo. The premise is similar to my earlier post on HPC Dotfiles. For the purposes of this post, we will assume that all the packages in the previous post exist. lmod is not required, feel free to use an alternative path management system, or even just $HOME/.local but if lmod is present, it is highly recommendedÂ 2. We will need the following:\n Pinned set of nixpkgs We would like to be able to modify a lot of paths, which is normally a bad practice, but then we don\u0026rsquo;t normally rebuild all packages either. Grab a copy of the nixpkgs by following the instructions below. Now is also the time to fork the repo if you\u0026rsquo;d like to keep track of your changes.   mkdir -p $HOME/Git/Github cd $HOME/Git/Github git clone https://github.com/NixOS/nixpkgs  dotgit We use the older, bash version of the excellent dotgit since python is not always present in HPC environments.   git clone https://github.com/kobus-v-schoor/dotgit/ mkdir -p $HOME/.local/bin cp dotgit/old/bin/bash_completion dotgit/old/bin/dotgit dotgit/old/bin/dotgit_headers dotgit/old/bin/fish_completion.fish $HOME/.local/bin/ -r  lmod packages If you do not or cannot use modulefiles as described in the earlier post, inspect the module-files being loaded and set paths accordingly.   cd $HOME/Git/Github git clone https://github.com/HaoZeke/hzHPC_lmod cd hzHPC_lmod $HOME/.local/bin/dotgit restore hzhpc Now we can start by obtaining the nix sources.\nmyprefix=$HOME/.hpc/nix/nix-boot nixdir=$HOME/.nix nix_version=2.3.7 ml load gcc/9.2.0 flex bison ml load boost ml load editline ml load brotli/1.0.1 ml load libseccomp/2.4.4 ml load bdwgc/8.0.4 ml load bzip2/1.0.8 ml load openssl sqlite wget http://nixos.org/releases/nix/nix-${nix_version}/nix-${nix_version}.tar.bz2 tar xfv nix-2.3.7.tar.bz2 cd nix-2.3.7 Before actually configuring and installing from source, we need some patches.\nPatches I suggest carefully typing out the patches, though leave a comment if you want a repo with these changes (if you must star something in the meantime, star this).\n Start with this patch Also this one  Remove the following ifdef stuff from src/libutil/compression.cc, leaving only the contents of the else statement.\n#ifdef HAVE_LZMA_MT  lzma_mt mt_options = {}; mt_options.flags = 0; mt_options.timeout = 300; // Using the same setting as the xz cmd line  mt_options.preset = LZMA_PRESET_DEFAULT; mt_options.filters = NULL; mt_options.check = LZMA_CHECK_CRC64; mt_options.threads = lzma_cputhreads(); mt_options.block_size = 0; if (mt_options.threads == 0) mt_options.threads = 1; // FIXME: maybe use lzma_stream_encoder_mt_memusage() to control the  // number of threads.  ret = lzma_stream_encoder_mt(\u0026amp;strm, \u0026amp;mt_options); done = true; #else  printMsg(lvlError, \u0026#34;warning: parallel XZ compression requested but not supported, falling back to single-threaded compression\u0026#34;); #endif If there is trouble with the bzip2 library, set $HOME/.hpc/bzip2/1.0.8/include/bzlib.h in src/libutil/compression.cc, but expand $HOME.\nFinally, you will need edit nixpkgs.\n# vim pkgs/os-specific/linux/busybox/default.nix debianName = \u0026#34;busybox_1.30.1-6\u0026#34;; debianTarball = fetchzip { url = \u0026#34;http://deb.debian.org/debian/pool/main/b/busybox/${debianName}.debian.tar.xz\u0026#34;; sha256 = \u0026#34;05n6mxc8n4zsli4dijrr2x5c9ggwi223i5za4n0xwhgd4lkhqymw\u0026#34;; }; User Build We can now complete the build.\n./configure --enable-gc --prefix=$myprefix --with-store-dir=$nixdir/store --localstatedir=$nixdir/var --with-boost=$BOOST_ROOT --disable-seccomp-sandboxing --disable-doc-gen CPPFLAGS=\u0026#34;-I$HOME/.hpc/bzip2/1.0.8/include\u0026#34; LDFLAGS=\u0026#34;-L$HOME/.hpc/bzip2/1.0.8/lib -Wl,-R$HOME/.hpc/bzip2/1.0.8/lib\u0026#34; make -j $(nproc) make install ml load nix/user # Hooray! Now we still need to set a profile. Inspect .hpc/nix/nix-boot/etc/profile.d/nix.sh and check the value of NIX_PROFILES\nchmod +x .hpc/nix/nix-boot/etc/profile.d/nix.sh ./.hpc/nix/nix-boot/etc/profile.d/nix.sh # OR, and this is better nix-env --switch-profile .nix/var/nix/profiles/default mkdir -p ~/.nix/var/nix/profiles Rebuilding Natively The astute reader will have noticed that we glibly monkeyed around with the nix source in the previous section, but all will be made well since we can rebuild to use nix with itself. Do replace the variable with the corresponding path:\nstoreDir = \u0026#34;$HOME/.nix/store\u0026#34;; stateDir = \u0026#34;$HOME/.nix/var\u0026#34;; confDif = \u0026#34;$HOME/.nix/etc\u0026#34;; We can \u0026ldquo;speed up\u0026rdquo; our build by disabling all tests. Go to the copy of nixpkgs and run:\nfind pkgs -type f -name \u0026#39;default.nix\u0026#39; | xargs sed -i \u0026#39;s/doCheck = true/doCheck = false/\u0026#39; mkdir -p $HOME/.nix/var/nix/profiles/ nix-env -i nix -f $HOME/Git/Github/nixpkgs -j$(nproc) --keep-going --show-trace -v --cores 4 2\u0026gt;\u0026amp;1 | tee nix-no-root.log ml load nix/bootstrapped This will still take a couple of hours at least. Around 3-4 hours. Try to set this up on a lazy weekend to evade sysadmins.\nUsage We have finally obtained a bootstrapped nix which is bound to our set of nixpkgs. To ensure its use:\nml use $HOME/Modulefiles ml purge ml load nix/bootstrapped ml save Basic Packages Now we can get some basic stuff too.\nnix-env -i tmux zsh lsof pv git -f $HOME/Git/Github/nixpkgs -j$(nproc) --keep-going --show-trace --cores 4 2\u0026gt;\u0026amp;1 | tee nix-install-base.log Ruby Caveats While installing packages which depend on ruby, there will be permission errors inside the build folder. These can be \u0026ldquo;fixed\u0026rdquo; by setting very permissive controls on the build-directory in question. Do not set permissions directly on the .nix/store/$HASH folder, as doing so will make nix reject the build artifact.\n# neovim depends on ruby nix-env -i neovim -v -f $HOME/Git/Github/nixpkgs A more elegant way to fix permissions involves a slightly more convoluted approach. We can note where the build is occurring (e.g. /tmp) and run a watch command to fix permissions.\nwatch -n1 -x chmod 777 -R /tmp/nix-build-ruby-2.6.6.drv-0/source/lib/ Naturally this must be run in a separate window.\nDotfiles Feel free to set up dotfiles (mine, perhaps) to profit even further. We will consider the process of obtaining my set below. Minimally, we will want to obtain tmux and zsh.\nnix-env -i tmux zsh -v -f $HOME/Git/Github/nixpkgs Now we can set the dotfiles up.\ngit clone https://github.com/HaoZeke/Dotfiles cd Dotfiles $HOME/.local/bin/dotgit restore hzhpc The final installation configures neovim and tmux.\nzsh # Should install things with zinit tmux # CTRL+b --\u0026gt; SHIFT+I to install nvim Misc NFS For issues concerning NFS lock files, consider simply moving the problematic file and let things sort themselves out. Consider:\nnix-build # something about a .nfs lockfile in some .nix/$HASH-pkg/.nfs0234234 mv .nix/$HASH-pkg/ .diePKGs/ nix-build # profit Conclusions Though this is slow and seems like an inefficient use of cluster resources, the benefits of reproducible environments typically outweighs the cost. Also it is much more pleasant to have a proper package manager which can work with Dotfiles.\n  Note that this will of course entail rebuilding everything from scratch, every time, which means no binary caches. Thus there is no reasonable defence for trying this out without access to a high powered limited access machine \u0026#x21a9;\u0026#xfe0e;\n The rest of the post assumes we are on the same page and working towards the same end-goal, substitute and remix at will \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/local-nix-no-root/","tags":["workflow","projects","hpc","nix","tools"],"title":"Local Nix without Root"},{"categories":["programming"],"contents":" Short post on using mach-nix with niv.\n Background In previous posts, there was a discussion on a ground up approach to adding packages which aren\u0026rsquo;t on the core nixpkgs channels using GitHub or PyPi sources. However, this lacked a way to do so programmatically, and also a way to convert existing python projects.\nPython Dependency Management This time, instead of the more pedagogical approach of building packages from PyPi or GitHub, we will use overlays and the excellent mach-nix to speed up the process. We will continue to use niv.\nniv init niv update nixpkgs -b nixpkgs-unstable To leverage mach-nix we will simply need the following setup to work with niv.\nlet sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; mach-nix = import (builtins.fetchGit { url = \u0026#34;https://github.com/DavHau/mach-nix/\u0026#34;; ref = \u0026#34;2.2.2\u0026#34;; }); customPython = mach-nix.mkPython { requirements = \u0026#39;\u0026#39; copier pytest \u0026#39;\u0026#39;; providers = { _default = \u0026#34;nixpkgs,wheel,sdist\u0026#34;; pytest = \u0026#34;nixpkgs\u0026#34;; }; pkgs = pkgs; }; in pkgs.mkShell { buildInputs = with pkgs; [ customPython ]; } Note that we have essentially written out a requirements.txt and can actually pass a path there instead as well. The key point to make it work with niv is the pkgs parameter. To use the older method of overriding parts of the setup, we can use the overrides_pre hook as shown below:\nlet sources = import ./prjSource/nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; mach-nix = import (builtins.fetchGit { url = \u0026#34;https://github.com/DavHau/mach-nix/\u0026#34;; ref = \u0026#34;2.2.2\u0026#34;; }); customPython = mach-nix.mkPython { requirements = \u0026#39;\u0026#39; copier pytest f90wrap \u0026#39;\u0026#39;; providers = { _default = \u0026#34;nixpkgs,wheel,sdist\u0026#34;; pytest = \u0026#34;nixpkgs\u0026#34;; }; overrides_pre = [ (pythonSelf: pythonSuper: { pytest = pythonSuper.pytest.overrideAttrs (oldAttrs: { doCheck = false; doInstallCheck = false; }); f90wrap = pythonSelf.buildPythonPackage rec { pname = \u0026#34;f90wrap\u0026#34;; version = \u0026#34;0.2.3\u0026#34;; src = pkgs.fetchFromGitHub { owner = \u0026#34;jameskermode\u0026#34;; repo = \u0026#34;f90wrap\u0026#34;; rev = \u0026#34;master\u0026#34;; sha256 = \u0026#34;0d06nal4xzg8vv6sjdbmg2n88a8h8df5ajam72445mhzk08yin23\u0026#34;; }; buildInputs = with pkgs; [ gfortran stdenv ]; propagatedBuildInputs = with pythonSelf; [ setuptools setuptools-git wheel numpy ]; preConfigure = \u0026#39;\u0026#39; export F90=${pkgs.gfortran}/bin/gfortran \u0026#39;\u0026#39;; doCheck = false; doIstallCheck = false; }; }) ]; pkgs = pkgs; }; in pkgs.mkShell { buildInputs = with pkgs; [ customPython ]; } We can also pull in overrides from poetry2nix with overrides_post as described here.\nConclusion With the completion of this final remaining hurdle, nix is now fully realized as a python management system. At this point the \u0026ldquo;only\u0026rdquo; thing remaining is to find an optimal way of leveraging nix for setting up re-usable data science and scientific computing projects.\n","permalink":"https://rgoswami.me/posts/mach-nix-niv-python/","tags":["tools","nix","workflow","python"],"title":"Niv and Mach-Nix for Nix Python"},{"categories":["programming"],"contents":"Background As a prelude to writing up the details of how this site is generated, I realized I should write up a nix oriented workflow for node packages.\nTooling and Idea The basic concepts are:\n Use npm to generate a package-lock.json file Use node2nix in a shell to generate a set of nix derivations Enter a shell environment with the nix inputs Profit  However, the nuances of this are a bit annoying at first.\nPackaging Requirements We will use the standard npm installation method at first, but since we shouldn\u0026rsquo;t keep installing and removing things, so we need a way to modify package.json without running npm and will therefore add add-dependency.\nnpm install add-dependency Setting up Node2Nix We will first clean the directory of what we do not need.\nrm -rf default.nix node-env.nix node-packages.nix node_modules Now we can enter a shell with node2nix and generate files for the node packages.\nnix-shell -p \u0026#39;nodePackages.node2nix\u0026#39; node2nix -l package-lock.json A Nix Environment We will use the standard setup described in the tutorial post:\nnix-env -i niv lorri niv init niv update nixpkgs -b nixpkgs-unstable This is to be in conjunction with the following shell.nix fileÂ 1.\n{ sources ? import ./nix/sources.nix }: let pkgs = import sources.nixpkgs { }; nodeEnv = pkgs.callPackage ./node-env.nix { }; nodePackages = pkgs.callPackage ./node-packages.nix { globalBuildInputs = with pkgs; [ zsh ]; inherit nodeEnv; }; in nodePackages.shell Note that we have overridden the nodePackages shell which is defined in the files created by node2nix.\nWe can now enter the environment and setup node_modules2.\nnix-shell ln -s $NODE_PATH node_modules Updates Unfortunately, this setup is a little fragile to updates. We will need to exit and re-create the setup. Note that we are removing the lock file now as well.\n# In the nix-shell add-dependencies babel-loader @babel/core @babel/preset-env core-js @babel/plugin-transform-regenerator # Do not run in nix-shell rm -rf default.nix node-env.nix node-packages.nix node_modules package-lock.json # Update in a line nix-shell -p \u0026#39;nodePackages.node2nix\u0026#39; --run \u0026#39;node2nix package.json\u0026#39; The single line update mechanism can be run in the nix-shell itself, making things marginally less painful.\nConclusions This has been a short introduction to working with the nix-shell ecosystem. It isn\u0026rsquo;t as fast as working with the normal setup, and it is a pretty annoying workflow. Given that most CI setups have good support for caching npm dependencies, it doesn\u0026rsquo;t seem worthwhile at the moment.\n  There might be a better approach defined in this issue later \u0026#x21a9;\u0026#xfe0e;\n We can\u0026rsquo;t use lorri yet since we need to selectively add and remove the symbolic link to node_modules \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/nix-shell-node/","tags":["tools","nix","workflow","node"],"title":"Nix Shells for Node Projects"},{"categories":["programming"],"contents":" Brief introduction to a nix based project workflow.\n Background For CarpentryCon@Home 2020, along with Amrita Goswami, I am to prepare and deliver a workshop on \u0026ldquo;Reproducible Environments with the Nix Packaging System\u0026rdquo;. In particular, as a community of practice lesson, the focus is not on packaging (as is typical of most Nix tutorials) nor on the Nix expression language itself, but instead on the use of Nix as a replacement for virtual environments using mkShell.\nMaterials This is a Carpentries style single page lesson on setting up and working with Nix for reproducible environments. It was concieved to be a complimentary resource to the content of this repository, namely:\n Slides on Python packages with Nix Nix with R and devtools Statistical Rethinking and Nix An Etherpad Session recording  Ten seconds into Nix A few words to keep in mind, in no particular order.\n Nix is based of good academic principles by Dolstra, de Jonge, and Visser (2004) and Dolstra, LÃ¶h, and Pierron (2010)  It has been used in large scientific projects for reproducibility (e.g.Â d-SEAMS of Goswami, Goswami, and Singh (2020))   The Nix expression language is a domain specific language  Turing completeness is not a goal or a requirement   Can leverage binary caches  Not always true, only when installed in /nix    Setup For this particular tutorial, we will assume the standard Nix installation proceedure, that is, one where the installer has root access to create the initial /nix directory and set up the build users1. This follows directly from the Nix Manual:\n# You need root permissions for this!!! sh \u0026lt;(curl -L https://nixos.org/nix/install) --daemon At this point we will also install the canonnical first package, the hello package, which simply outputs a friendly greeting.\nnix-env -i hello Note that the basic package search operation is nix search and it gives outputs which look like:\n  Figure 1: The nix search emacs output\n  Though this is not bad by any standard, we will try to get a more interactive management tool.\nBasic Helpers The first few things to obtain are:\n nox This is a better package management helper niv For pinning dependencies as discussed later lorri For working seamlessly with project environments  Exercise 1  Try installing these and use nox emacs to test the output\n   Figure 2: The nox emacs output\n  More Dependable Dependencies Standard Channels Nix works by searching a repository (local or online) of package derivations. Indeed, we can pass nix-env any local fork of the main nixpkgs repo as well.\n# don\u0026#39;t run this, it is a large repo git clone https://github.com/NixOS/nixpkgs.git $mynixdir # make changes.. $EDITOR $nixpkgs/pkgs/applications/editors/emacs/default.nix nix-env -i emacs -f $nixpkgs  This might serve as a way to mass modify the nixpkgs in a pinch  However, we will almost never use this in practice The overlay approach is much better   It is also useful if we need to build local derivations  Pinning Dependencies Compared to globally tracking the branches of nixpkgs or even local changes and forks, for project oriented workflows it is better to use niv which we obtained previously. In a nutshell, niv will generate a json file to keep track of dependencies and wraps it in a nix file we can subsequently import and use.\nProject Setup We are now in a position to start working with a project oriented workflow.\n# Make directories mkdir myFirstNix cd myFirstNix # Setup niv init niv update nixpkgs -b nixpkgs-unstable At this stage your project should have the following structure:\ntree myFirstNix    myFirstNix        âââ nix     âââ sources.json     âââ sources.nix           1 directory, 2 files    We can now move on to the heart of this tutorial, the nix-shell. In a nutshell, running nix-shell when there is a defined shell.nix will spawn a virtual environment with the nix packages requested.\nlorri and direnv Though we haven\u0026rsquo;t as yet generated a shell.nix we should point out that writing one by hand will mean that we need to rebuild the enviroment when we make changes using nix-shell every time. A more elegant approach is to offload the rebuilding of the environment to lorri which also has a neat direnv integrration. Let\u0026rsquo;s try that out.\ncd myFirstNix lorri init    Aug 18 15:24:06.524 INFO wrote file, path: ./shell.nix     Aug 18 15:24:06.524 INFO wrote file, path: ./.envrc   Aug 18 15:24:06.524 INFO done       At this point we should now have:\ntree -a myFirstNix    myFirstNix        âââ .envrc     âââ nix     âÂ  âââ sources.json    âÂ  âââ sources.nix    âââ shell.nix           1 directory, 4 files    We might want to take a quick look at what is being loaded into the environment and the shell.nix at this point.\nlet pkgs = import \u0026lt;nixpkgs\u0026gt; {}; in pkgs.mkShell { buildInputs = [ pkgs.hello ]; } Code Snippet 1: shell.nix\n eval \u0026#34;$(lorri direnv)\u0026#34; Code Snippet 2: .envrc\n The .envrc output is not very useful at a glance, however when we cd into the directory it is very verbose and explicit about what is being set up.\n  Figure 3: Sample output of the evaluation\n  Note that in order to set lorri up, we will need to set up a daemon.\nsystemctl --user start lorri direnv allow Pinning with niv Note that inspite of having set up niv, we have not yet used the sources defined therein. We will now fix this, by modifying shell.nix.\nlet sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; in pkgs.mkShell { buildInputs = [ pkgs.hello ]; } Code Snippet 3: shell.nix with niv\n Purity and Environments There are a couple of things to note about this setup.\n The default shell is bash On occasion, depending on your Dotfiles you might have paths overriden in an annoying way  One workaround is to use nix shell with an argument:\nnix-shell --run \u0026#34;bash\u0026#34;  We can also pass --pure to the function, but at the cost of having to define many more dependencies for our shell  mkShell The mkShell function is the focus of our tutorial, and we will mostly work around passing in different environments and hooks. Let us start by defining a hook.\nShell Hooks Often, we will want to set an environment variable in our shell in advance. We should not use direnv for this, and instead we will focus on the shellHook option. Syntactically, we note that this is of the form:\nlet hook = \u0026#39;\u0026#39; export myvar=\u0026#34;Test\u0026#34; \u0026#39;\u0026#39; in pkgs.mkShell { shellHook = hook; } Often we will describe variables in the let section in favor of cluttering the actual function call itself.\nOverriding Global Packages For overriding global packages, it is best to leverage the config.nix (which is commonly in $HOME/.config/nixpkgs/config.nix) file instead of the current environment, though it could be managed in a per-project setup as well. Consider the case where we need to disable tests for a particular packages, say libuv.\n{ packageOverrides = pkgs: with pkgs; { libuv = libuv.overrideAttrs (oldAttrs: { doCheck = false; doInstallCheck = false; }); }; } Code Snippet 4: A sample config.nix file\n Python Dependencies As R dependency management has been covered in an earlier post, we will focus on the management of python environments.\nGeneric Environments We can define existing packages as follows (and can check for existence with nox) using the let..in syntax.\nlet # Niv sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; # Python pythonEnv = pkgs.python38.withPackages (ps: with ps;[ numpy toolz ]); in pkgs.mkShell { buildInputs = with pkgs; [ pythonEnv black mypy libffi openssl ]; } Code Snippet 5: Shell with basic python environment\n Project Local Pip We can leverage a trick from here to set a local directory for pip installations, which boils down to some path hacking.\nlet # Niv sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; # Python pythonEnv = pkgs.python38.withPackages (ps: with ps;[ numpy toolz ]); hook = \u0026#39;\u0026#39; export PIP_PREFIX=\u0026#34;$(pwd)/_build/pip_packages\u0026#34; export PYTHONPATH=\u0026#34;$(pwd)/_build/pip_packages/lib/python3.8/site-packages:$PYTHONPATH\u0026#34; export PATH=\u0026#34;$PIP_PREFIX/bin:$PATH\u0026#34; unset SOURCE_DATE_EPOCH \u0026#39;\u0026#39;; in pkgs.mkShell { buildInputs = with pkgs; [ pythonEnv black mypy libffi openssl ]; shellHook = hook; } Note that this is discouraged as we will lose the caching capabilities of nix.\nNon-Standard Python For more control over the environment, we can define it in more detail with some overlays.\nlet python = pkgs.python38.override { packageOverrides = self: super: { pytest = super.pytest.overridePythonAttrs (old: rec { doCheck = false; doInstallCheck = false; }); }; }; myPy = python.withPackages (p: with p; [ numpy pip pytest ]); in pkgs.mkShell { buildInputs = with pkgs; [ myPy ]; } We have used both overriden packages and standard packages in the above formulation.\nBuilding Packages For cases where we are certain that no existing package is present (use nox) we can also build them. Take f90wrap as an example, and we will use the Github version, rather than the PyPi version (the difference is in the source fetch function).\nf90wrap = self.buildPythonPackage rec { pname = \u0026#34;f90wrap\u0026#34;; version = \u0026#34;0.2.3\u0026#34;; src = pkgs.fetchFromGitHub { owner = \u0026#34;jameskermode\u0026#34;; repo = \u0026#34;f90wrap\u0026#34;; rev = \u0026#34;master\u0026#34;; sha256 = \u0026#34;0d06nal4xzg8vv6sjdbmg2n88a8h8df5ajam72445mhzk08yin23\u0026#34;; }; buildInputs = with pkgs; [ gfortran stdenv ]; propagatedBuildInputs = with self; [ setuptools setuptools-git wheel numpy ]; preConfigure = \u0026#39;\u0026#39; export F90=${pkgs.gfortran}/bin/gfortran \u0026#39;\u0026#39;; doCheck = false; doIstallCheck = false; }; This is quite involved, discuss.\nSetting Versions We can finally generalize our shell.nix to default to python 3.8 but also take a command through --argstr:\nnix-shell --argstr pythonVersion 36 --run \u0026#34;bash\u0026#34; Where we need to simply define the option at the top of the file, with a default.\n{ pythonVersion ? \u0026#34;38\u0026#34; }: # Define let sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; inherit (pkgs.lib) optional optionals; hook = \u0026#39;\u0026#39; # Python Stuff export PIP_PREFIX=\u0026#34;$(pwd)/_build/pip_packages\u0026#34; export PYTHONPATH=\u0026#34;$(pwd)/_build/pip_packages/lib/python3.8/site-packages:$PYTHONPATH\u0026#34; export PATH=\u0026#34;$PIP_PREFIX/bin:$PATH\u0026#34; unset SOURCE_DATE_EPOCH \u0026#39;\u0026#39;; # Apparently pip needs 1980 or above # https://github.com/ento/elm-doc/blob/master/shell.nix python = pkgs.\u0026#34;python${pythonVersion}\u0026#34;.override { packageOverrides = self: super: { pytest = super.pytest.overridePythonAttrs (old: rec { doCheck = false; doInstallCheck = false; }); ase = super.ase.overridePythonAttrs (old: rec { doCheck = false; doInstallCheck = false; }); f90wrap = self.buildPythonPackage rec { pname = \u0026#34;f90wrap\u0026#34;; version = \u0026#34;0.2.3\u0026#34;; src = pkgs.fetchFromGitHub { owner = \u0026#34;jameskermode\u0026#34;; repo = \u0026#34;f90wrap\u0026#34;; rev = \u0026#34;master\u0026#34;; sha256 = \u0026#34;0d06nal4xzg8vv6sjdbmg2n88a8h8df5ajam72445mhzk08yin23\u0026#34;; }; buildInputs = with pkgs; [ gfortran stdenv ]; propagatedBuildInputs = with self; [ setuptools setuptools-git wheel numpy ]; preConfigure = \u0026#39;\u0026#39; export F90=${pkgs.gfortran}/bin/gfortran \u0026#39;\u0026#39;; doCheck = false; doInstallCheck = false; }; }; }; myPy = python.withPackages (p: with p; [ ase ipython ipykernel scipy numpy f90wrap pip ]); in pkgs.mkShell { buildInputs = with pkgs; [ # Required for the shell zsh perl git direnv fzf ag fd # Building thigns gcc9 gfortran openblas myPy # https://github.com/sveitser/i-am-emotion/blob/294971493a8822940a153ba1bf211bad3ae396e6/gpt2/shell.nix ]; shellHook = hook; } Code Snippet 6: Full shell.nix\n This is enough to cover almost all use-cases for python environments.\nBuild Helpers Note that we can speed up some aspects of fetch with the prefetch commands:\nnix-prefetch-git $giturl nix-prefetch-url $url In practice, some trial and error is easier.\nSupplementary Reading Material Though these are in no means exhaustive, they may offer a slightly more advanced or different focus than the material covered here.\nCore Content  Manuals  Nix and Nixpkgs   Nix Wiki  Nix Cheatsheet   Language Sections  Learning Paths  Nix pills Official tutorials Nix dev has some nice opinionated tips  Personal Correspondence Tyson Whitehead from Compute Canada was kind enough to bring the folllowing additional training materials:\n A wiki pertaining to usage of Nix on in an HPC setting SWC style workshop materials from TECC 2018 SHARCNET live presentation materials from 2018  Conclusions The standard dive into Nix is based on building derivations and playing with language, which is in no means a bad one, just too long for the time allocated. The best way to get into Nix is to start using it for everything.\nReferences   Dolstra, Eelco, Merijn de Jonge, and Eelco Visser. 2004. \u0026ldquo;Nix: A Safe and Policy-Free System for Software Deployment,\u0026rdquo; 15.\n  Dolstra, Eelco, Andres LÃ¶h, and Nicolas Pierron. 2010. \u0026ldquo;NixOS: A Purely Functional Linux Distribution.\u0026rdquo; Journal of Functional Programming 20 (5-6): 577\u0026ndash;615. https://doi.org/10/dfrgtj.\n  Goswami, Rohit, Amrita Goswami, and Jayant K. Singh. 2020. \u0026ldquo;D-SEAMS: Deferred Structural Elucidation Analysis for Molecular Simulations.\u0026rdquo; Journal of Chemical Information and Modeling 60 (4): 2169\u0026ndash;77. https://doi.org/10.1021/acs.jcim.0c00031.\n    For reasons pertaining to latency and ease-of-use, we will assume the multi-user installation \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/ccon-tut-nix/","tags":["tools","nix","workflow","python"],"title":"A Tutorial Introduction to Nix"},{"categories":["programming"],"contents":"Background My move away from the powerful, but unimaginatively named HPC clusters of IITKÂ 1 brought me in close contact with the Lua basedÂ 2 lmod module system. Rather than fall into the rabbit hole of brew we will leverage the existing system to add our new libraries. Not finding any good collections of these composable environments, and having failed once before to install Nix as a user without admin access, I decided to start my own collection of Lmod recipies. The rest of this post details the installation proceedure to be carried out in conjunction with the hzHPC_lmod repo.\nSetting Up These are reproduced from the repo for completeness.\ngit clone https://github.com/kobus-v-schoor/dotgit.git mkdir -p ~/.local/bin cp -r dotgit/bin/dotgit* ~/.local/bin cat dotgit/bin/bash_completion \u0026gt;\u0026gt; ~/.bash_completion rm -rf dotgit I actually strongly suggest using a target from my Dotfiles in conjunction with this, but it isn\u0026rsquo;t really required, so:\n~/.local/bin/dotgit restore hzhpc Note that because of the suggested separation, I have not opted to setup a shell or even ensure that there are scripts here to help keep module in your path. Those are in my Dotfiles. If, you opt to not use these dotfiles, then do not run the ml load commands.\nLMod Libraries  Note that: garpur already has lmod and a module for GNU gcc 9.2.0\n The scripts in this post will also be part of the repo, but keep in mind that these are not meant to be robust ways to install anything, and every command should be run by hand because things will probably break badly.\nGMP myprefix=$HOME/.hpc/gcc/gmp/6.2.0 export PATH wget https://gmplib.org/download/gmp/gmp-6.2.0.tar.xz tar xfv gmp-6.2.0.tar.xz cd gmp-6.2.0 ./configure --prefix=$myprefix \\  --enable-cxx \\  --docdir=$myprefix/doc/gmp-6.1.2 make -j$(nproc) make install MPFR myprefix=$HOME/.hpc/gcc/mpfr/4.1.0 export PATH wget https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz tar xfv mpfr-4.1.0.tar.xz cd mpfr-4.1.0 ./configure --prefix=$myprefix \\  --enable-thread-safe \\  --with-gmp=$HOME/.hpc/gcc/gmp/6.2.0 \\  --docdir=$myprefix/doc/mpfr-4.1.0 make -j$(nproc) make install MPC myprefix=$HOME/.hpc/gcc/mpc/1.2.0 export PATH wget https://ftp.gnu.org/gnu/mpc/mpc-1.2.0.tar.gz tar xfv mpc-1.2.0.tar.gz cd mpc-1.2.0 ./configure --prefix=$myprefix \\  --with-gmp=$HOME/.hpc/gcc/gmp/6.2.0 \\  --with-mpfr=$HOME/.hpc/gcc/mpfr/4.1.0 \\  --docdir=$myprefix/doc/mpc-1.2.0 make -j$(nproc) make install GCC 9.2.0 mkdir -p ~/tmpHPC cd $HOME/tmpHPC myprefix=$HOME/.hpc/gcc/9.2.0 export PATH export LIBRARY_PATH=/usr/lib64/:$LIBRARY_PATH wget https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz tar xfv gcc-9.2.0.tar.xz cd gcc-9.2.0 case $(uname -m) in x86_64) sed -e \u0026#39;/m64=/s/lib64/lib/\u0026#39; \\  -i.orig gcc/config/i386/t-linux64 ;; esac mkdir -p build \u0026amp;\u0026amp; cd build \u0026amp;\u0026amp; SED=sed \\ ../configure --prefix=$myprefix \\  --enable-languages=c,c++,fortran \\  --disable-multilib \\  --with-gmp=$HOME/.hpc/gcc/gmp/6.2.0 \\  --with-mpfr=$HOME/.hpc/gcc/mpfr/4.1.0 \\  --with-mpc=$HOME/.hpc/gcc/mpc/1.2.0 \\  --disable-bootstrap \\  --with-system-zlib make -j$(nproc) ml load gcc/9.2.0 Autotools Following the standard approach outlined in the GNU Autotools FAQ:\nmkdir -p ~/tmpHPC cd $HOME/tmpHPC myprefix=$HOME/.hpc/autotools export PATH wget http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.gz wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz wget http://ftp.gnu.org/gnu/automake/automake-1.16.2.tar.gz wget http://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.gz gzip -dc m4-1.4.18.tar.gz | tar xvf - gzip -dc autoconf-2.69.tar.gz | tar xvf - gzip -dc automake-1.16.2.tar.gz | tar xvf - gzip -dc libtool-2.4.6.tar.gz | tar xvf - cd m4-1.4.18 ./configure -C --prefix=$myprefix/m4/1.4.18 \u0026amp;\u0026amp; make -j$(nproc) \u0026amp;\u0026amp; make install cd ../autoconf-2.69 ./configure -C --prefix=$myprefix/autoconf/2.69 \u0026amp;\u0026amp; make -j$(nproc) \u0026amp;\u0026amp; make install cd ../automake-1.16.2 ./configure -C --prefix=$myprefix/automake/1.16.2 \u0026amp;\u0026amp; make -j$(nproc) \u0026amp;\u0026amp; make install cd ../libtool-2.4.6 ./configure -C --prefix=$myprefix/libtool/2.4.6 \u0026amp;\u0026amp; make -j$(nproc) \u0026amp;\u0026amp; make install ml load autotools/autotools We also need the archive.\nmyprefix=$HOME/.hpc/autotools git clone git://git.sv.gnu.org/autoconf-archive.git cd autoconf-archive Combined with the lmod manual gives rise to the following definiton (roughly the same for each one):\nlocal home = os.getenv(\u0026#34;HOME\u0026#34;) local version = myModuleVersion() local pkgName = myModuleName() local pkg = pathJoin(home,\u0026#34;.hpc\u0026#34;,pkgName,version,\u0026#34;bin\u0026#34;) prepend_path(\u0026#34;PATH\u0026#34;, pkg) We will no longer bother with the module definitions for the rest of this post, as they are handled and documented in the repo.\nPerl This is essentially the setup from the main docs.\n# Get Perl curl -L http://xrl.us/installperlnix | bash # Use Perl ml use perl/5.28.0 cpanm ExtUtils::MakeMaker # For git ml load perl/5.28.0 Git This is very similar to the previous approach. However, since by default the system perl was being picked up, some slight changes have been made.\nmyprefix=$HOME/.hpc/git/2.9.5 PATH=$myprefix/bin:$PATH export PATH wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz gzip -dc git-2.9.5.tar.gz | tar xvf - cd git-2.9.5 ./configure --with-perl=$(which perl) -C --prefix=$myprefix make -j $(nproc) make install ml load git/2.9.5 Caveat Also, for TRAMP, we would prefer having a more constant path, so we can set up a symlink:\nmkdir ~/.hpc/bin ln ~/.hpc/git/2.9.5/bin/git ~/.hpc/bin/git Boost The boost website is utterly incomprehensible. As is the documentation. Also, fun fact, the move from svn makes things worse. Thankfully, a quick dive into the slightly better Github wiki led to this nugget:\ngit clone --recursive https://github.com/boostorg/boost.git cd boost git checkout tags/boost-1.73.0 # or whatever branch you want to use ./bootstrap.sh ./b2 headers This means we\u0026rsquo;re almost done!\n./b2 ./b2 install --prefix=$HOME/.hpc/boost/boost-1.73.0 ml load boost/boost-1.73.0 Pkg-Config myprefix=$HOME/.hpc/pkg-config/0.29.2 wget https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz gzip -dc pkg-config-0.29.2.tar.gz | tar xvf - cd pkg-config-0.29.2 ./configure --prefix=$myprefix --with-internal-glib --disable-host-tool --docdir=$myprefix/share/doc/pkg-config-0.29.2 mkdir $myprefix/lib make -j $(nproc) make install ml load pkg-config/0.29.2 Zlib myprefix=$HOME/.hpc/zlib/1.2.11 wget http://zlib.net/zlib-1.2.11.tar.gz gzip -dc zlib-1.2.11.tar.gz | tar xvf - cd zlib-1.2.11 ./configure --prefix=$myprefix make -j $(nproc) make install ml load zlib/1.2.11 XZ Utils myprefix=$HOME/.hpc/xz/5.2.5 wget https://tukaani.org/xz/xz-5.2.5.tar.gz gzip -dc xz-5.2.5.tar.gz | tar xvf - cd xz-5.2.5 ./configure --prefix=$myprefix --enable-threads=yes make -j $(nproc) make install ml load xz/5.2.5 OpenSSL myprefix=$HOME/.hpc/openssl/1.1.1d wget https://www.openssl.org/source/openssl-1.1.1d.tar.gz gzip -dc openssl-1.1.1d.tar.gz | tar xvf - cd openssl-1.1.1d ./config --prefix=$myprefix --openssldir=$myprefix/etc/ssl shared zlib-dynamic make -j $(nproc) make install ml load openssl/1.1.1d Cmake myprefix=$HOME/.hpc/cmake/3.18.1 wget https://github.com/Kitware/CMake/releases/download/v3.18.1/cmake-3.18.1.tar.gz gzip -dc cmake-3.18.1.tar.gz | tar xvf - cd cmake-3.18.1 ./bootstrap --prefix=$myprefix make -j $(nproc) make install ml load cmake/3.18.1 GNU-Make myprefix=$HOME/.hpc/make/4.3 wget http://ftp.gnu.org/gnu/make/make-4.3.tar.gz gzip -dc make-4.3.tar.gz | tar xvf - cd make-4.3 ./configure --prefix=$myprefix make -j $(nproc) make install ml load make/4.3 Brotli myprefix=$HOME/.hpc/brotli/1.0.1 git clone https://github.com/bagder/libbrotli cd libbrotli ./autogen.sh ./configure --prefix=$myprefix make -j $(nproc) make install ml load brotli/1.0.1 ncurses We will need to manually ensure the paths for pkg-config are in a feasible location.\nmyprefix=$HOME/.hpc/ncurses/6.2 wget https://invisible-mirror.net/archives/ncurses/ncurses-6.2.tar.gz gzip -dc ncurses-6.2.tar.gz | tar xvf - cd ncurses-6.2 ./configure --prefix=$myprefix --enable-widec --enable-pc-files --with-shared make -j $(nproc) make install mkdir pkgconfig cp misc/formw.pc misc/menuw.pc misc/ncurses++w.pc misc/ncursesw.pc misc/panelw.pc pkgconfig/ mv pkgconfig $myprefix/lib/ ml load ncurses/6.2 texinfo myprefix=$HOME/.hpc/texinfo/6.7 wget http://ftp.gnu.org/gnu/texinfo/texinfo-6.7.tar.gz gzip -dc texinfo-6.7.tar.gz | tar xvf - cd texinfo-6.7 ./configure --prefix=$myprefix make -j $(nproc) make install ml load texinfo/6.7 gperf myprefix=$HOME/.hpc/gperf/3.1 wget http://ftp.gnu.org/gnu/gperf/gperf-3.1.tar.gz gzip -dc gperf-3.1.tar.gz | tar xvf - cd gperf-3.1 ./configure --prefix=$myprefix make -j $(nproc) make install ml load gperf/3.1 libseccomp There is a bug, which requires modifying src/system.c to change __NR_seccomp to _nr_seccomp.\nmyprefix=$HOME/.hpc/libseccomp/2.5.0 git clone https://github.com/seccomp/libseccomp cd libseccomp git checkout tags/v2.5.0 ./autogen.sh ./configure --prefix=$myprefix make -j $(nproc) make install ml load libseccomp/2.5.0 Alternatively, it is easier to work with an older version.\nmyprefix=$HOME/.hpc/libseccomp/2.4.4 wget https://github.com/seccomp/libseccomp/releases/download/v2.4.4/libseccomp-2.4.4.tar.gz tar xfv libseccomp-2.4.4.tar.gz cd libseccomp-2.4.4 ./configure --prefix=$myprefix make -j $(nproc) make install ml load libseccomp/2.4.4 BDWGC myprefix=$HOME/.hpc/bdwgc/8.0.4 wget https://github.com/ivmai/bdwgc/releases/download/v8.0.4/gc-8.0.4.tar.gz gzip -dc gc-8.0.4.tar.gz | tar xvf - cd gc-8.0.4 ./configure --prefix=$myprefix --enable-cplusplus make -j $(nproc) make install ml load bdwgc/8.0.4 pcre We will prep both pcre2 and pcre.\n myprefix=$HOME/.hpc/pcre2/10.35 wget https://ftp.pcre.org/pub/pcre/pcre2-10.35.tar.gz gzip -dc pcre2-10.35.tar.gz | tar xvf - cd pcre2-10.35 ./configure \u0026ndash;prefix=$myprefix \\\n\u0026ndash;enable-pcre2-16 \\\n\u0026ndash;enable-pcre2-32 \\\n\u0026ndash;enable-pcre2grep-libz make -j $(nproc) make install ml load pcre2/10.35\n   myprefix=$HOME/.hpc/pcre/8.44 wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz gzip -dc pcre-8.44.tar.gz | tar xvf - cd pcre-8.44 ./configure \u0026ndash;prefix=$myprefix \\\n\u0026ndash;enable-pcre-16 \\\n\u0026ndash;enable-pcre-32 \\\n\u0026ndash;enable-pcregrep-libz make -j $(nproc) make install ml load pcre/8.44\n bison myprefix=$HOME/.hpc/bison/3.7.1 wget http://ftp.gnu.org/gnu/bison/bison-3.7.1.tar.gz gzip -dc bison-3.7.1.tar.gz | tar xvf - cd bison-3.7.1 ./configure --prefix=$myprefix make -j $(nproc) make install ml load bison/3.7.1 flex myprefix=$HOME/.hpc/flex/2.6.4 wget https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz gzip -dc flex-2.6.4.tar.gz | tar xvf - cd flex-2.6.4 ./configure --prefix=$myprefix make -j $(nproc) make install ml load flex/2.6.4 jq myprefix=$HOME/.hpc/jq/1.6 git clone https://github.com/stedolan/jq.git cd jq git submodule update --init git checkout tags/jq-1.6 autoreconf -fi ./configure --prefix=$myprefix --with-oniguruma=builtin make -j $(nproc) make install ml load jq/1.6 bzip2 Needed to manually configure it as shown here\nmyprefix=$HOME/.hpc/bzip2/1.0.8 wget https://www.sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz gzip -dc bzip2-1.0.8.tar.gz | tar xvf - cd bzip2-1.0.8 make -f Makefile-libbz2_so ln -sf libbz2.so.1.0 libbz2.so mkdir -p $myprefix/include mkdir -p $myprefix/lib cp -avf bzlib.h $myprefix/include cp -avf libbz2.so* $myprefix/lib make install PREFIX=$myprefix ml load bzip2/1.0.8 sqlite myprefix=$HOME/.hpc/sqlite/3.32.3 wget https://www.sqlite.org/2020/sqlite-autoconf-3320300.tar.gz gzip -dc sqlite-autoconf-3320300.tar.gz | tar xvf - cd sqlite-autoconf-3320300 ./configure --prefix=$myprefix make -j $(nproc) make install ml load sqlite/3.32.3 editline myprefix=$HOME/.hpc/editline/1.17.1 wget https://github.com/troglobit/editline/releases/download/1.17.1/editline-1.17.1.tar.gz gzip -dc editline-1.17.1.tar.gz | tar xvf - cd editline-1.17.1 ./configure --prefix=$myprefix make -j $(nproc) make install ml load editline/1.17.1 Miniconda We don\u0026rsquo;t need this very much, but it is still useful for some edge cases, mainly revolving around jupyter infrastructure.\ncd $HOME wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh chmod +x Miniconda3-latest-Linux-x86_64.sh ./Miniconda3-latest-Linux-x86_64.sh # Do not allow it to mess up the shell rc files eval \u0026#34;$($HOME/miniconda3/bin/conda shell.zsh hook)\u0026#34; Note that we will prefer the manual evaluation since it can be handled in the lmod file.\nApplications Libraries and git aside, there are some tools we might want to have.\nag The silver searcher, along with rg is very useful to have.\nmyprefix=$HOME/.hpc/the_silver_searcher/2.2.0 wget https://geoff.greer.fm/ag/releases/the_silver_searcher-2.2.0.tar.gz gzip -dc the_silver_searcher-2.2.0.tar.gz | tar xvf - cd the_silver_searcher-2.2.0 ./configure --prefix=$myprefix make -j $(nproc) make install ml load the_silver_searcher/2.2.0 Neovim myprefix=$HOME/.hpc/nvim/0.5.0 wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage chmod +x nvim.appimage ./nvim.appimage --appimage-extract mkdir -p $myprefix mv squashfs-root/usr/* $myprefix ml load nvim/0.5.0 Tmux myprefix=$HOME/.hpc/tmux/3.1b wget https://github.com/tmux/tmux/releases/download/3.1b/tmux-3.1b-x86_64.AppImage chmod +x tmux-3.1b-x86_64.AppImage rm -rf squashfs-root ./tmux-3.1b-x86_64.AppImage --appimage-extract mkdir -p $myprefix mv squashfs-root/usr/bin squashfs-root/usr/lib squashfs-root/usr/share $myprefix ml load tmux/3.1b Zsh More of an update than a requirement.\nmyprefix=$HOME/.hpc/zsh/5.8 wget https://github.com/zsh-users/zsh/archive/zsh-5.8.tar.gz gzip -dc zsh-5.8.tar.gz | tar xvf - cd zsh-zsh-5.8 ./configure --prefix=$myprefix make -j $(nproc) make install ml load zsh/5.8 Conclusion Having composed a bunch of these, I will of course try to somehow get nix up and running so it can bootstrap itself and allow me to work in peace. I might also eventually create shell scripts to automate updating these, but hopefully I can set up nix and not re-create package manager logic in lua.\n  They were called hpc2013 and hpc2010 respectively \u0026#x21a9;\u0026#xfe0e;\n I really like Lua, enough to embed it in d-SEAMS \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/hpc-dots-lmod/","tags":["workflow","projects","hpc"],"title":"HPC Dotfiles and LMod"},{"categories":["notes"],"contents":" A short post detailing the many trials and tribulations of setting brightness on multiple monitors in tandem.\n Background As regular readers might know, I have a multi-screen setup, which accounts for having touch enabled on my primary laptop screen (detailed here). A failing of this setup was that I was not able to control the brightness of both monitors at the same time.\nExisting Stack Since I use i3, my brightness control is simply done with bindsym lines as follows1:\nbindsym XF86MonBrightnessDown exec light -U 10 bindsym XF86MonBrightnessUp exec light -A 10 Note that to get the right bindsym I use screenkey with the keysyms preference. My software of choice was Unfortunately, my existing setup (with light, since that is in the Arch community repo) did not actually allow dimming external screens arbitarily. To be more exact,\nlight -h Usage: light [OPTIONS] [VALUE] Commands: -H, -h Show this help and exit -V Show program version and exit -L List available devices -A Increase brightness by value -U Decrease brightness by value -T Multiply brightness by value (can be a non-whole number, ignores raw mode) -S Set brightness to value -G Get brightness -N Set minimum brightness to value -P Get minimum brightness -O Save the current brightness -I Restore the previously saved brightness Options: -r Interpret input and output values in raw mode (ignored for -T) -s Specify device target path to use, use -L to list available -v Specify the verbosity level (default 0) 0: Values only 1: Values, Errors. 2: Values, Errors, Warnings. 3: Values, Errors, Warnings, Notices. Copyright (C) 2012 - 2018 Fredrik Haikarainen This is free software, see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE Clearly it is possible to target specific devices, but for arbitrary additions this is quite tough. Additionally, the project has been more or less been stuck in maintainence mode for a while now.\nMulti-head Configurations Exposing Brightness The first hurdle faced in o was actually getting the external monitor to expose the right controls. This is accomplished neatly with ddci-driver found here. As demonstrated (courtesy of the ArchWiki):\n# Load module sudo modprobe ddcci_backlight # Check that it worked sudo ddcutil capabilities | grep \u0026#34;Feature: 10\u0026#34; sudo ddcutil getvcp 10 # Set brightness sudo ddcutil setvcp 10 70 One of the obvious caveats of this technique is that sudo access or a dedicated polkit agent is required. My preferred method of loading this comes from a comment on the ddcci-driver-linux-dkms page of the AUR:\n# Put in /etc/systemd/system/ddcci-backlight.service: # https://aur.archlinux.org/packages/ddcci-driver-linux-dkms/ # Placing \u0026#34;ddcci_backlight\u0026#34; into /etc/modules-load.d # leads to hang on boot with external (HDMI) monitor # connected to the laptop, so we need to add the module later. # And ddcci_backlight can\u0026#39;t detect monitor during sddm.service startup. [Unit] After=multi-user.target Before=sddm.service [Service] Type=oneshot ExecStart=/usr/bin/modprobe ddcci_backlight ExecStop=/usr/bin/modprobe --remove ddcci_backlight RemainAfterExit=yes [Install] WantedBy=multi-user.target This is then activated with a standard systemctl enable ddcci_backlight.service command. At this point, the device interface should be exposed to most backlight controllers.\nXrandr This is the most obvious of all methods, and does not even require the ddcci-driver. We will simply tweak the brightness with xrandr.\n# Get devices xrandr | grep \u0026#34; connected\u0026#34; # Tweak xrandr --output DP1 --brightness 0.2 Note that this is an in-exact method, since it actually adjusts the gamma value instead, and it effectively tints your screen rather than modifying the brightness.\nClight clight is an excellent, highly performant alternative to redshift, but it tends to force the main screen brightness to zero. Nothing which can\u0026rsquo;t be configured away, but in practice, I work late and tend to turn off the tint anyway. This requires a daemon to be run, as well as needing to be turned on manually for i3. A very elegant additional feature gained by using clight is that external monitors are turned off automagically when lockscreens are activated.\nBrillo brillo is one of the newer controllers, and is pretty actively developed. The interface is almost exactly like light, and unlike clight there is no need to use a daemon. It meshes perfectly with a key-press based system like i3 and also has controls for keyboard LEDS as well as for smoothed ramping up and down of the brightness. Most importantly, it features an -e flag which sets the brightness across all output devices. Essentially this means my configuration is simply modified to:\nbindsym XF86MonBrightnessDown exec brillo -e -U 10 bindsym XF86MonBrightnessUp exec brillo -e -A 10 Conclusions tl;dr moving from light to brillo with ddcci-driver-linux-dkms was a fantastic idea.\n  My dotfiles are here \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/expl-backlight-control/","tags":["tools","workflow"],"title":"Explorations with Backlight Controllers"},{"categories":["programming"],"contents":" A meta post introducing my solutions to the fantastic excellent second edition of \u0026ldquo;Statistical Rethinking\u0026rdquo; by Richard McElreath, a.k.a. Statistical RethinkingÂ². Also discusses strategies to keep up with the material, mostly meant for self-study groups.\n Background As detailed previously, I recently was part of a course centered around Bayesian modeling for the Icelandic COVID-19 pandemic. The Bayesian mindset needs no introduction, and this post is completely inadequete to explain why anyone should be interested (that\u0026rsquo;s what the book is for!). That said, especially for self-paced study groups, it might help to have some structure.\nSolutions These are meant to be sample solutions, and everyone should solve these for themselves. Each solution contains the packages used, as well as a colophon in the later posts to ensure reproduciblity. Essentially this consists of four posts:\n Week I Covers the first four chapters {1,2,3,4} Week II Covers the next three chapters {5,6,7} Week III Covers five chapters {9,11,12} Week IV The last five chapters {13,14}  More concisely:\n   Chapter Solutions     1. The Golem of Prague N/A   2. Small Worlds and Large Worlds here   3. Sampling the Imaginary here   4. Geocentric Models here   5. The Many Variables \u0026amp; The Spurious Waffles here   6. The Haunted DAG \u0026amp; The Causal Terror here   7. Ulyssesâ Compass here   8. Conditional Manatees N/A   9. Markov Chain Monte Carlo here   10. Big Entropy and the Generalized Linear Model N/A   11. God Spiked the Integers here   12. Monsters and Mixtures here   13. Models With Memory here   14. Adventures in Covariance here   15. Missing Data and Other Opportunities TBA   16. Generalized Linear Madness TBA   17. Horoscopes N/A    Pacing The solutions compiled here were from an accelerated 4-week course covering the Statistical RethinkingÂ² in four weeks. The book is more traditionally used in a full-semester course, so that should be kept in mind as well.\nResources These are highly opinionated and the following list is in no way complete.\nCanonical Content  Richard\u0026rsquo;s Website The YouTube 2019 playlist Richard on Twitter The Stan page  Additional Content  An introduction to Frequentist and Bayesian statistics from LLNL by Kristin Lennox A simple COVID-19 model for Iceland More complete COVID-19 model for Iceland Convergence Diagnostics for MCMC Betancourt\u0026rsquo;s Conceptual Introduction to HMC  Follow-up Courses  Bayesian Data Analysis  Conclusions This has been a short meta post which is essentially meant to collect content posted with dates in the past. Though this is not exactly a complete reference for beginners, it might still help people.\n","permalink":"https://rgoswami.me/posts/some-sol-sr2/","tags":["R","SR2","solutions","workflow"],"title":"A Short Guide to Statistical RethinkingÂ²"},{"categories":["personal"],"contents":" Personal recollections of the academic grant writing process.\n Background Of the many types of writing one undertakes in a typical academic career, grant writing stands out as a rather large anomaly. For the purposes of this post, we will note that an academic writing taxonomy would consist of roughly:\n Coursework and Assignmets These are more or less comparitive writing exercises, where the only main thing which is enforced is (or should be) plagiarism checks. In terms of locality in history, these are more or less focused on the past, with little to no original content. Peer Reviewed Articles Broadly, in this category we can lump society journals, some conference articles, and even reviews to some extent. These are hyper-local in time, with enough historical perspective to make the paper worthwhile for the journal/conference, and originality of content is a key highlight. Grants Grants are unique. They are both short (in terms of a prospectus) and also long, in that there are a huge number of auxillary files to be added.  Grants At some stage, every researcher who doesn\u0026rsquo;t bow out of academia ends up faced with the prospect of proving to a funding agency that they are capable and well-adjusted enough to get money for an extended amount of time.\nLit Surveys Unlike papers and reviews, though recent papers are important, it is more relevant to actually project where the field will be in upcoming years to ensure the deliverables are not out-dated. Additionally, it is best to link to widely cited literature, to ensure that the reviewers believe in your holistic understanding.\nDeliverables This part is fun to write, building towards a goal, is a special kind of write up. It allows one to really flesh out a research plan with realistic goals.\nExtras  For most applications, there is a budgetary requirement, mostly with a spreadsheet component. A Gantt chartis also often required  I started with teamgantt, which was neat Of course I eventually ended up regressing to orgmode and TeX using org-gantt  This actually would need a whole other post, but it is great      Conclusions If this post seemed short, it is probably because even though a lot else went into the proposal, until I hear otherwise next year, it would be presumptous to write more. That said, it was and is an enjoyable exercise.\n","permalink":"https://rgoswami.me/posts/grant-proposals/","tags":["ramblings","thoughts","academia"],"title":"Grant Proposals - I"},{"categories":["notes"],"contents":" A short tutorial post on multiple screens for laptops with touch-support and ArchLinux. Also evolved into a long rant, with an Easter egg.\n Background Of late, I have been attempting to move away from paper, for environmental reasons1. Years of touch typing in Colemak (rationale, config changes) and a very customized Emacs setup (including mathematica, temporary latex templates, Nix, and org-roam annotations) have more or less kept me away from analog devices. One might even argue that my current website is essentially a set of tricks to move my life into orgmode completely.\nHowever, there are still a few things I cannot do without a pointing device (and some kind of canvas). Scrawl squiggly lines on papers I\u0026rsquo;m reviewing. That and, scrawl weird symbols which don\u0026rsquo;t actually follow a coherent mathematical notation but might be later written up in latex to prove a point. Also, and I haven\u0026rsquo;t mastered any of the drawing systems (like Tikz) yet, so for squiggly charts I rely on Jamboard (while teaching) and Xournal++ for collaborations.\nI also happen to have a ThinkPad X380 (try sudo dmidecode -t system | grep Version) which has an in-built stylus, and since Linux support for touchscreens from 2018 is known to be incredible, I coupled this with the ThinkVision M14 as a second screen.\nX-Windows and X-ternal Screens We will define two separate solutions:\n mons Using arbitrary external monitors autorandr Setting up profiles for specific monitors  Finally we will leverage both to ensure a constant touchscreen area.\nAutorandr I use the python rewrite simply because that\u0026rsquo;s the one which is in the ArchLinux community repo. To be honest, I came across this before I (re-)discovered mons. The most relevant aspect of autorandr is using complicated configurations for different monitors, but it also does a mean job of running generic scripts as postswitch and prefix scripts.\nMons xrandr is awesome. Unfortunately, more often than not, I forget the commands to interact with it appropriately. mons does my dirty work for me2.\n# -e is extend mons -e left # puts screen on the left That and the similar right option, covers around 99% of all possible dual screen use-cases.\nConstant Touch The problem is that by default, the entire combined screen area is assumed to be touch-enabled, which essentially means an awkward area of the screen which is dead to all input (since it doesn\u0026rsquo;t exist). The key insight is that I never have more touch-enabled surfaces than my default screen, no matter how many extended screens are present. So the solution is:\n Make sure the touch area is constant.\n We need to figure out what the touch input devices are:\nxinput --list    â¡ Virtual core pointer id=2 [master pointer (3)]     â â³ Virtual core XTEST pointer id=4 [slave pointer (2)]   â â³ Wacom Pen and multitouch sensor Finger touch id=10 [slave pointer (2)]   â â³ Wacom Pen and multitouch sensor Pen stylus id=11 [slave pointer (2)]   â â³ ETPS/2 Elantech TrackPoint id=14 [slave pointer (2)]   â â³ ETPS/2 Elantech Touchpad id=15 [slave pointer (2)]   â â³ Wacom Pen and multitouch sensor Pen eraser id=17 [slave pointer (2)]   â£ Virtual core keyboard id=3 [master keyboard (2)]   â³ Virtual core XTEST keyboard id=5 [slave keyboard (3)]   â³ Power Button id=6 [slave keyboard (3)]   â³ Video Bus id=7 [slave keyboard (3)]   â³ Power Button id=8 [slave keyboard (3)]   â³ Sleep Button id=9 [slave keyboard (3)]   â³ Integrated Camera: Integrated C id=12 [slave keyboard (3)]   â³ AT Translated Set 2 keyboard id=13 [slave keyboard (3)]   â³ ThinkPad Extra Buttons id=16 [slave keyboard (3)]    At this point we will leverage autorandr to ensure that these devices are mapped to the primary (touch-enabled) screen with a postswitch script. This postswitch script needs to be:\n#!/bin/sh # .config/autorandr/postswitch xinput --map-to-output \u0026#39;Wacom Pen and multitouch sensor Finger touch\u0026#39; eDP1 xinput --map-to-output \u0026#39;Wacom Pen and multitouch sensor Pen stylus\u0026#39; eDP1 xinput --map-to-output \u0026#39;Wacom Pen and multitouch sensor Pen eraser\u0026#39; eDP1 notify-send \u0026#34;Screen configuration changed\u0026#34; The last line of course is really more of an informative boast.\nAt this stage, we have the ability to set the touchscreens up by informing autorandr that our configuration has changed, through the command line for example:\nautorandr --change Automatic Touch Configuration Running a command manually on-change is the sort of thing which makes people think Linux is hard or un-intuitive. So we will instead make use of the incredibly powerful systemd framework for handling events.\nEssentially, we combine our existing workflow with autorandr-launcher from here, and then set it all up as follows:\ngit clone https://github.com/smac89/autorandr-launcher.git cd autorandr-launcher sudo make install sudo systemctl--user enable autorandr_launcher.service Conclusion We now have a setup which ensures that the touch enabled area is constant, without any explicit manual interventions for when devices are added or removed. There isn\u0026rsquo;t much else to say about this workflow here. Additional screens can be configured from older laptops described here. Separate posts can deal with how exactly I meld Zotero, org-roam and Xournal++ to wreak havoc on all kinds of documents. So, in-lieu of a conclusion, behold a recent scribble with this setup:\n  Figure 1: From the planning of this voluntary course\n    Also because paper is difficult to keep track of and is essentially the antithesis of a computer oriented workflow. \u0026#x21a9;\u0026#xfe0e;\n I actually planned a whole post called \u0026ldquo;An Ode to Mons\u0026rdquo;, when I first found out about it. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/multi-monitor-touch/","tags":["tools","workflow"],"title":"Multiple Monitors with Touchscreens"},{"categories":["notes"],"contents":" A follow up to my earlier post on analytics, and on migrating from Goat Counter to Clicky.\n Background A few days ago I recieved the following email:\n Hi there!\nI made some changes to the GoatCounter plans/pricing:\n  GoatCounter now has a \u0026ldquo;Starter\u0026rdquo; plan, this is â¬5/month, limited to 100k pageviews/month, comes with a custom domain, and allow commercial use. This is mostly the same as the \u0026ldquo;personal plus\u0026rdquo; plan there was before, except that it allows commercial use. If you had a \u0026ldquo;personal plus\u0026rdquo; for a custom domain before then you now have a Starter plan.\n  Starting on August 1st the data retention will be limited for the Free and Starter plans: the Free plan will be limited to 6 months, the Starter plan to 12 months, and the business plans remain unlimited. There is an export feature if you wish to retain your old pageviews.\n  Some background on this:\nThere seems to be a gap between \u0026ldquo;free for personal use\u0026rdquo; and \u0026ldquo;â¬15/month for commercial use\u0026rdquo;. I\u0026rsquo;ve gotten quite a bit of feedback of small (potential) commercial users who just run a small website, where â¬15/month really is prohibitively expensive.\nThe entire idea behind making it free for personal use is that I\u0026rsquo;d like GoatCounter to be usable by as many people as possible, while also ensuring commercial users pay their fair share. Redistributing software is free, but developing it is not.\nThe general thinking is that larger businesses with several employees (who can easily afford â¬15/month) will have more than 100k pageviews/month, whereas for most startups and the like 100k should be more than enough.\nThe entire thing is a bit of a balancing act ð I may tweak the pricing further in the future based on additional experience and feedback.\nAs for the data retention: the biggest issue here is that some not-especially-active sites have had short bursts of millions of pageviews in a short time because they wrote or made something that got widely shared.\nThe hits/months limit isn\u0026rsquo;t strictly enforced because I don\u0026rsquo;t want to tell people to get a plan just because they wrote a popular article that got to the front page of HN, Reddit, Twitter, etc, and GoatCounter has no problem handling these levels of pageviews, so that\u0026rsquo;s all fine.\nBut on the other hand, a million pageviews currently takes up about 400M of disk space including backups (although this could probably be reduced a bit with a more clever backup strategy). Disk space is pretty cheap, but it does add up.\nIt also means more effort on scaling GoatCounter; limiting the data retention is an easy way to reduce the pressure on this. It also gives people a bit more incentive to get a plan ð\nAs always, self-hosting isn\u0026rsquo;t affected by any of this. This just applies to the goatcounter.com service.\nFeel free to let me know if you\u0026rsquo;ve got any questions or feedback.\nCheers, Martin\n Personal Repercussions I should point out that I unequivocally support Martin\u0026rsquo;s decision. It is fair and equitable. That said, continuity is super important to me. I\u0026rsquo;ve mentioned earlier that for me, the daily limit is not much of an issue but I do like to look back at my collective history.\nGoat Counter Goat Counter is still definitely my go-to option for both self-hosting and shelling out, if the 15 euro fee is acceptable. Honestly, the best option is probably opening a PR or making a tool to aggregate metrics offline, since it is still possible to export the data. The major drawback is the six month window.\nClicky Clicky is pretty great, and they have a good example of what works out in their favor compared to Google Analytics.\nPros  Free tier has no time limit Has a nice dark theme  Cons  Not open source Capped at 3K daily views Blocked by some VPN providers (Windscribe)  Conclusions It is unfortunate to have had to move, since this does imply losing the past eight months of metrics. Eventually I might even go back to steady dependable Google Analytics. Until this, Clicky will do.\n","permalink":"https://rgoswami.me/posts/goat-clicky/","tags":["tools","rationale","workflow","ideas"],"title":"Analytics II: Goat to Clicky"},{"categories":["personal"],"contents":" A post on a surprisingly heartwarming community appreciation effort.\n Background As probably anyone who has asked me about my programming experience has heard, my first real foray into the FOSS community was being a LineageOS co-maintainer (as HaoZeke) for the Xperia Z5 Dual. I haven\u0026rsquo;t thought about the community all that much for a few years, mostly since XDA became pretty toxic, and Android development just got, less exciting.\nThe Email I recieved two of these from different accounts:\n Thank you so much for your contribution to making my phone the phone it is!\nHave a great day!\n   Conclusion This was completely unexpected, and really made my day. In reterospect this seems like something which should be made more explicit, more often.\n","permalink":"https://rgoswami.me/posts/linos-maintainer-appre/","tags":["ramblings","thoughts"],"title":"LineageOS Maintainer Appreciation"},{"categories":["programming"],"contents":" Setup details are described here, and the meta-post about these solutions is here.\n Materials The summmer course1 is based off of the second edition of Statistical Rethinking by Richard McElreath.\n Chapter 13  E{1,2,3,4,5}   Chapter 14  E{1,2,3}    Packages A colophon with details is provided at the end, but the following packages and theme parameters are used throughout.\nlibsUsed\u0026lt;-c(\u0026#34;tidyverse\u0026#34;,\u0026#34;tidybayes\u0026#34;,\u0026#34;orgutils\u0026#34;,\u0026#34;dagitty\u0026#34;, \u0026#34;rethinking\u0026#34;,\u0026#34;tidybayes.rethinking\u0026#34;, \u0026#34;ggplot2\u0026#34;,\u0026#34;kableExtra\u0026#34;,\u0026#34;dplyr\u0026#34;,\u0026#34;glue\u0026#34;, \u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;printr\u0026#34;,\u0026#34;devtools\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)); theme_set(theme_grey(base_size=24)) set.seed(1995) Chapter XIII: Models With Memory Easy Questions (Ch13) HOLD 13E1 Which of the following priors will produce more shrinkage in the estimates? (a) \\(Î±_{\\mathrm{TANK}}â¼\\mathrm{Normal}(0,1)\\); (b) \\(Î±_{\\mathrm{TANK}}â¼\\mathrm{Normal}(0,2)\\).\nSolution The normal distribution fits a probability distribution centered around the mean and the spread is given by the standard deviation. Thus the first option, (a) will produce more shrinkage in the estimates, as the prior will be more concentrated.\ncurve(dnorm(x,0,1),from=-10,to=10,col=\u0026#34;red\u0026#34;,ylab=\u0026#34;density\u0026#34;) curve(dnorm(x,0,2),add=TRUE) legend(\u0026#34;topright\u0026#34;, col = c(\u0026#34;red\u0026#34;,\u0026#34;black\u0026#34;), pch = 19, legend = c(\u0026#34;Normal(0,1)\u0026#34;,\u0026#34;Normal(0,2)\u0026#34;))   13E2 Rewrite the following model as a multilevel model.\nSolution The model can be expressed as:\nThe priors have been chosen to be essentially uninformative, as is appropriate for a situation where no further insight is present for the hyperparameters.\n13E3 Rewrite the following model as a multilevel model.\nSolution The model can be defined as:\nHOLD 13E4 Write a mathematical model formula for a Poisson regression with varying intercepts.\nSolution 13E5 Write a mathematical model formula for a Poisson regression with two different kinds of varying intercepts, a cross-classified model.\nSolution We will use the non-centered form for the cross-classified model.\nChapter XIV: Adventures in Covariance Easy Questions (Ch14) HOLD 14E1 Add to the following model varying slopes on the predictor \\(x\\).\nSolution Following the convention in the physical sciences, I will use square brackets for matrices and parenthesis for vectors.\nWhere we do not have any information so have used a standard weakly informative LKJcorr prior for correlation matrices which is flat for all valid correlation matrices. We also use weakly uninformative priors for the standard deviations among slopes and intercepts.\nHOLD 14E2 Think up a context in which varying intercepts will be positively correlated with varying slopes. Provide a mechanistic explanation for the correlation.\nSolution We note at the onset that the concept of varying intercepts is to account for blocks or sub-groups in our problem. This means that the clusters in our data which have higher average values will show a stronger positive association with predictor variables. To augment the example of the tadpoles in the book, if the data is arranged as:\n Tadpoles in tanks Some tanks have larger tadpoles (different species) which grow faster  For a repeated measurement in an interval of time, there will be a positive correlation between the initial height and the slope.\nHOLD 14E3 When is it possible for a varying slopes model to have fewer effective parameters (as estimated by WAIC or PSIS) than the corresponding model with fixed (unpooled) slopes? Explain.\nSolution The varying effects essentially causes regularization or shrinkage towards the global mean to prevent overfitting to the individual data-points. Consider the example from the text, for the chimpanzee experiment.\ndata(chimpanzees) d \u0026lt;- chimpanzees d$block_id \u0026lt;- d$block d$treatment \u0026lt;- 1L + d$prosoc_left + 2L*d$condition dat \u0026lt;- list( L = d$pulled_left, tid = as.integer(d$treatment), actor = d$actor ) We will set up a simple fixed effects model.\nm14fix \u0026lt;- ulam( alist( L ~ dbinom( 1 , p ) , logit(p) \u0026lt;- alpha[actor] + beta[tid] , alpha[actor] ~ dnorm( 0 , 5 ), beta[tid] ~ dnorm( 0 , 0.5 ) ) , data=dat , chains=4 , log_lik=TRUE ) SAMPLING FOR MODEL \u0026#39;90fe1cae14bc2bf32f08b4d71c2d1f0d\u0026#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 9.2e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.92 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 0.335488 seconds (Warm-up) Chain 1: 0.228533 seconds (Sampling) Chain 1: 0.564021 seconds (Total) Chain 1: SAMPLING FOR MODEL \u0026#39;90fe1cae14bc2bf32f08b4d71c2d1f0d\u0026#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 3.4e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.34 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 0.365676 seconds (Warm-up) Chain 2: 0.330942 seconds (Sampling) Chain 2: 0.696618 seconds (Total) Chain 2: SAMPLING FOR MODEL \u0026#39;90fe1cae14bc2bf32f08b4d71c2d1f0d\u0026#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 4.3e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.43 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 0.356879 seconds (Warm-up) Chain 3: 0.352045 seconds (Sampling) Chain 3: 0.708924 seconds (Total) Chain 3: SAMPLING FOR MODEL \u0026#39;90fe1cae14bc2bf32f08b4d71c2d1f0d\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 4.5e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.45 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 0.296276 seconds (Warm-up) Chain 4: 0.261692 seconds (Sampling) Chain 4: 0.557968 seconds (Total) Chain 4: Now we can extend this to a varying slopes model, where we will consider varying slopes for actors.\nm14ppool \u0026lt;- ulam( alist( L ~ dbinom( 1 , p ) , logit(p) \u0026lt;- alpha + a[actor]*vary_id + beta[tid], alpha ~ dnorm( 0 , 5 ), a[actor] ~ dnorm( 0 , 1 ), beta[tid] ~ dnorm( 0 , 0.5 ), vary_id ~ dexp( 1 ) ) , data=dat , chains=4 , log_lik=TRUE ) SAMPLING FOR MODEL \u0026#39;d14d0bbe9399ac4de917b8e279a6e9e5\u0026#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 0.000184 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.84 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 1.63295 seconds (Warm-up) Chain 1: 1.18708 seconds (Sampling) Chain 1: 2.82003 seconds (Total) Chain 1: SAMPLING FOR MODEL \u0026#39;d14d0bbe9399ac4de917b8e279a6e9e5\u0026#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 6.3e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.63 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 1.58303 seconds (Warm-up) Chain 2: 1.30156 seconds (Sampling) Chain 2: 2.88459 seconds (Total) Chain 2: SAMPLING FOR MODEL \u0026#39;d14d0bbe9399ac4de917b8e279a6e9e5\u0026#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 6.4e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.64 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 1.37077 seconds (Warm-up) Chain 3: 1.12109 seconds (Sampling) Chain 3: 2.49186 seconds (Total) Chain 3: SAMPLING FOR MODEL \u0026#39;d14d0bbe9399ac4de917b8e279a6e9e5\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 5.9e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.59 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 1.48561 seconds (Warm-up) Chain 4: 1.38809 seconds (Sampling) Chain 4: 2.8737 seconds (Total) Chain 4: Now we can test the number of parameters.\ncompare(m14ppool,m14fix) %\u0026gt;% toOrg | row.names | WAIC | SE | dWAIC | dSE | pWAIC | weight | |-----------+------------------+------------------+------------------+------------------+------------------+-------------------| | m14ppool | 532.211705503729 | 19.5177343184252 | 0 | NA | 9.12911563615787 | 0.796616007296431 | | m14fix | 534.942259470042 | 18.0912938913487 | 2.73055396631241 | 1.66292448384092 | 8.10370201332515 | 0.203383992703568 | As we can see, the model with partial pooling has only one effective additional parameter, even though the model without pooling has \\(n(\\mathrm{actor})\\) intercepts (one per actor) with a standard deviation, while the partial pooling parameter has an additional average intercept and a standard deviation parameter.\nBoth the models have around the same number of effective parameters, which mean that the additional parameters do not actually cause additional overfitting. This simply implies that for Bayesian models, the raw number of model parameters does not correspond necessarily to a model with more overfitting.\nIn general, we should keep in mind that the effective number of parameters, when the variation among clusters is high, is probably going to be lower than the total number of parameters, due to adaptive regularization.\nA: Colophon To ensure that this document is fully reproducible at a later date, we will record the session info.\ndevtools::session_info() â Session info âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ setting value version R version 4.0.0 (2020-04-24) os Arch Linux system x86_64, linux-gnu ui X11 language (EN) collate en_US.UTF-8 ctype en_US.UTF-8 tz Iceland date 2020-06-27 â Packages âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ package * version date lib source arrayhelpers 1.1-0 2020-02-04 [167] CRAN (R 4.0.0) assertthat 0.2.1 2019-03-21 [34] CRAN (R 4.0.0) backports 1.1.6 2020-04-05 [68] CRAN (R 4.0.0) boot 1.3-24 2019-12-20 [5] CRAN (R 4.0.0) broom 0.5.6 2020-04-20 [67] CRAN (R 4.0.0) callr 3.4.3 2020-03-28 [87] CRAN (R 4.0.0) cellranger 1.1.0 2016-07-27 [55] CRAN (R 4.0.0) cli 2.0.2 2020-02-28 [33] CRAN (R 4.0.0) coda 0.19-3 2019-07-05 [169] CRAN (R 4.0.0) colorspace 1.4-1 2019-03-18 [97] CRAN (R 4.0.0) crayon 1.3.4 2017-09-16 [35] CRAN (R 4.0.0) curl 4.3 2019-12-02 [26] CRAN (R 4.0.0) dagitty * 0.2-2 2016-08-26 [244] CRAN (R 4.0.0) data.table * 1.12.8 2019-12-09 [27] CRAN (R 4.0.0) DBI 1.1.0 2019-12-15 [77] CRAN (R 4.0.0) dbplyr 1.4.3 2020-04-19 [76] CRAN (R 4.0.0) desc 1.2.0 2018-05-01 [84] CRAN (R 4.0.0) devtools * 2.3.0 2020-04-10 [219] CRAN (R 4.0.0) digest 0.6.25 2020-02-23 [42] CRAN (R 4.0.0) dplyr * 0.8.5 2020-03-07 [69] CRAN (R 4.0.0) ellipsis 0.3.0 2019-09-20 [30] CRAN (R 4.0.0) evaluate 0.14 2019-05-28 [82] CRAN (R 4.0.0) fansi 0.4.1 2020-01-08 [36] CRAN (R 4.0.0) forcats * 0.5.0 2020-03-01 [29] CRAN (R 4.0.0) fs 1.4.1 2020-04-04 [109] CRAN (R 4.0.0) generics 0.0.2 2018-11-29 [71] CRAN (R 4.0.0) ggplot2 * 3.3.0 2020-03-05 [78] CRAN (R 4.0.0) glue * 1.4.0 2020-04-03 [37] CRAN (R 4.0.0) gridExtra 2.3 2017-09-09 [123] CRAN (R 4.0.0) gtable 0.3.0 2019-03-25 [79] CRAN (R 4.0.0) haven 2.2.0 2019-11-08 [28] CRAN (R 4.0.0) hms 0.5.3 2020-01-08 [44] CRAN (R 4.0.0) htmltools 0.4.0 2019-10-04 [112] CRAN (R 4.0.0) httr 1.4.1 2019-08-05 [100] CRAN (R 4.0.0) inline 0.3.15 2018-05-18 [162] CRAN (R 4.0.0) jsonlite 1.6.1 2020-02-02 [101] CRAN (R 4.0.0) kableExtra * 1.1.0 2019-03-16 [212] CRAN (R 4.0.0) knitr 1.28 2020-02-06 [113] CRAN (R 4.0.0) latex2exp * 0.4.0 2015-11-30 [211] CRAN (R 4.0.0) lattice 0.20-41 2020-04-02 [6] CRAN (R 4.0.0) lifecycle 0.2.0 2020-03-06 [38] CRAN (R 4.0.0) loo 2.2.0 2019-12-19 [163] CRAN (R 4.0.0) lubridate 1.7.8 2020-04-06 [106] CRAN (R 4.0.0) magrittr 1.5 2014-11-22 [21] CRAN (R 4.0.0) MASS 7.3-51.5 2019-12-20 [7] CRAN (R 4.0.0) matrixStats 0.56.0 2020-03-13 [164] CRAN (R 4.0.0) memoise 1.1.0 2017-04-21 [229] CRAN (R 4.0.0) modelr 0.1.6 2020-02-22 [107] CRAN (R 4.0.0) munsell 0.5.0 2018-06-12 [96] CRAN (R 4.0.0) mvtnorm 1.1-0 2020-02-24 [243] CRAN (R 4.0.0) nlme 3.1-147 2020-04-13 [11] CRAN (R 4.0.0) orgutils * 0.4-1 2017-03-21 [209] CRAN (R 4.0.0) pillar 1.4.3 2019-12-20 [39] CRAN (R 4.0.0) pkgbuild 1.0.6 2019-10-09 [86] CRAN (R 4.0.0) pkgconfig 2.0.3 2019-09-22 [43] CRAN (R 4.0.0) pkgload 1.0.2 2018-10-29 [83] CRAN (R 4.0.0) plyr 1.8.6 2020-03-03 [73] CRAN (R 4.0.0) prettyunits 1.1.1 2020-01-24 [58] CRAN (R 4.0.0) printr * 0.1 2017-05-19 [214] CRAN (R 4.0.0) processx 3.4.2 2020-02-09 [88] CRAN (R 4.0.0) ps 1.3.2 2020-02-13 [89] CRAN (R 4.0.0) purrr * 0.3.4 2020-04-17 [50] CRAN (R 4.0.0) R6 2.4.1 2019-11-12 [48] CRAN (R 4.0.0) Rcpp 1.0.4.6 2020-04-09 [10] CRAN (R 4.0.0) readr * 1.3.1 2018-12-21 [45] CRAN (R 4.0.0) readxl 1.3.1 2019-03-13 [54] CRAN (R 4.0.0) remotes 2.1.1 2020-02-15 [233] CRAN (R 4.0.0) reprex 0.3.0 2019-05-16 [108] CRAN (R 4.0.0) rethinking * 2.01 2020-06-06 [242] local rlang 0.4.5 2020-03-01 [31] CRAN (R 4.0.0) rmarkdown 2.1 2020-01-20 [110] CRAN (R 4.0.0) rprojroot 1.3-2 2018-01-03 [85] CRAN (R 4.0.0) rstan * 2.19.3 2020-02-11 [161] CRAN (R 4.0.0) rstudioapi 0.11 2020-02-07 [91] CRAN (R 4.0.0) rvest 0.3.5 2019-11-08 [120] CRAN (R 4.0.0) scales 1.1.0 2019-11-18 [93] CRAN (R 4.0.0) sessioninfo 1.1.1 2018-11-05 [231] CRAN (R 4.0.0) shape 1.4.4 2018-02-07 [193] CRAN (R 4.0.0) StanHeaders * 2.19.2 2020-02-11 [165] CRAN (R 4.0.0) stringi 1.4.6 2020-02-17 [52] CRAN (R 4.0.0) stringr * 1.4.0 2019-02-10 [74] CRAN (R 4.0.0) svUnit 1.0.3 2020-04-20 [168] CRAN (R 4.0.0) testthat 2.3.2 2020-03-02 [81] CRAN (R 4.0.0) textutils 0.2-0 2020-01-07 [210] CRAN (R 4.0.0) tibble * 3.0.1 2020-04-20 [32] CRAN (R 4.0.0) tidybayes * 2.0.3 2020-04-04 [166] CRAN (R 4.0.0) tidybayes.rethinking * 2.0.3.9000 2020-06-07 [246] local tidyr * 1.0.2 2020-01-24 [75] CRAN (R 4.0.0) tidyselect 1.0.0 2020-01-27 [49] CRAN (R 4.0.0) tidyverse * 1.3.0 2019-11-21 [66] CRAN (R 4.0.0) usethis * 1.6.0 2020-04-09 [238] CRAN (R 4.0.0) V8 3.0.2 2020-03-14 [245] CRAN (R 4.0.0) vctrs 0.2.4 2020-03-10 [41] CRAN (R 4.0.0) viridisLite 0.3.0 2018-02-01 [99] CRAN (R 4.0.0) webshot 0.5.2 2019-11-22 [213] CRAN (R 4.0.0) withr 2.2.0 2020-04-20 [90] CRAN (R 4.0.0) xfun 0.13 2020-04-13 [116] CRAN (R 4.0.0) xml2 1.3.2 2020-04-23 [122] CRAN (R 4.0.0) [1] /nix/store/xzd8h53xkyvfm3kvj5ab6znp685wi04w-r-car-3.0-7/library [2] /nix/store/mhr8zw9bmxarc3n821b83i0gz2j9zlrq-r-abind-1.4-5/library [3] /nix/store/hp86nhr0787vib3l8mkw0gf9nxwb45im-r-carData-3.0-3/library [4] /nix/store/vhw7s2h5ds6sp110z2yvilchv8j9jch5-r-lme4-1.1-23/library [5] /nix/store/987n8g0zy9sjvfvnsck1bkkcknw05yvb-r-boot-1.3-24/library [6] /nix/store/jxxxxyz4c1k5g3drd35gsrbjdg028d11-r-lattice-0.20-41/library [7] /nix/store/q9zfm5h53m8rd08xcsdcwaag31k4z1pf-r-MASS-7.3-51.5/library [8] /nix/store/kjkm50sr144yvrhl5axfgykbiy13pbmg-r-Matrix-1.2-18/library [9] /nix/store/8786z5lgy8h3akfjgj3yq5yq4s17rhjy-r-minqa-1.2.4/library [10] /nix/store/93wv3j0z1nzqp6fjsm9v7v8bf8d1xkm2-r-Rcpp-1.0.4.6/library [11] /nix/store/akfw6zsmawmz8lmjkww0rnqrazm4mqp0-r-nlme-3.1-147/library [12] /nix/store/rxs0d9bbn8qhw7wmkfb21yk5abp6lpq1-r-nloptr-1.2.2.1/library [13] /nix/store/8n0jfiqn4275i58qgld0dv8zdaihdzrk-r-RcppEigen-0.3.3.7.0/library [14] /nix/store/8vxrma33rhc96260zsi1jiw7dy3v2mm4-r-statmod-1.4.34/library [15] /nix/store/2y46pb5x9lh8m0hdmzajnx7sc1bk9ihl-r-maptools-0.9-9/library [16] /nix/store/iwf9nxx1v883wlv0p88q947hpz5lhfh7-r-foreign-0.8-78/library [17] /nix/store/rl9sjqply6rjbnz5k792ghm62ybv76px-r-sp-1.4-1/library [18] /nix/store/ws4bkzyv2vj5pyn1hgwyy6nlp48arz0n-r-mgcv-1.8-31/library [19] /nix/store/307dzxrmnqk4p86560a02r64x1fhhmxb-r-nnet-7.3-13/library [20] /nix/store/g2zpzkdb9hzkza1wpcbrk58119v1wyaf-r-pbkrtest-0.4-8.6/library [21] /nix/store/p0l503fr8960vld70w6ilmknxs5qwq77-r-magrittr-1.5/library [22] /nix/store/rmjpcaw3i446kwnjgcxcaid0yac36cj2-r-quantreg-5.55/library [23] /nix/store/10mzmnvc5jjgk2xzasia522pk60a30qz-r-MatrixModels-0.4-1/library [24] /nix/store/6qwdzvmnnmhjwdnvg2zmvv6wafd1vf91-r-SparseM-1.78/library [25] /nix/store/aa9c39a3yiqkh1h7pbngjlbr7czvc7yi-r-rio-0.5.16/library [26] /nix/store/2fx4vqlybgwp5rhhy6pssqx7h1a927fn-r-curl-4.3/library [27] /nix/store/k4m3fn1kqvvvn8y33kd57gq49hr3ar8y-r-data.table-1.12.8/library [28] /nix/store/651hfjylqzmsf565wyx474vyjny771gy-r-haven-2.2.0/library [29] /nix/store/a3rnz28irmqvmj8axj5x5j1am2c3gzs4-r-forcats-0.5.0/library [30] /nix/store/j8v4gzib137q2cml31hvvfkrc0f60pp5-r-ellipsis-0.3.0/library [31] /nix/store/xaswqlnamf4k8vwx0x3wav3l0x60sag0-r-rlang-0.4.5/library [32] /nix/store/dqm3xpix2jwhhhr67s6fgrwbw7hizap7-r-tibble-3.0.1/library [33] /nix/store/v7xfsq6d97wpn6m0hjrac78w5xawbr8a-r-cli-2.0.2/library [34] /nix/store/fikjasr98klhk9cf44x4lhi57vh3pmkg-r-assertthat-0.2.1/library [35] /nix/store/3fya6cd38vsqdj0gjb7bcsy00sirlyw1-r-crayon-1.3.4/library [36] /nix/store/payqi9bwh216rwhaq07jgc26l4fv1zsb-r-fansi-0.4.1/library [37] /nix/store/h6a61ghws7yrdxlg412xl1im37z5r28i-r-glue-1.4.0/library [38] /nix/store/y8mjbia1wbnq26dkigr0p3xxwrbzsc2r-r-lifecycle-0.2.0/library [39] /nix/store/kwaghh12cnifgvcbvlv2anx0hd5f4ild-r-pillar-1.4.3/library [40] /nix/store/k1phn8j10nni7gzvcgp0vc25dby6bb77-r-utf8-1.1.4/library [41] /nix/store/k3b77y8v7zsshpp1ccs8jwk2i2g4rm9a-r-vctrs-0.2.4/library [42] /nix/store/iibjmbh7vj0d0bfafz98yn29ymg43gkw-r-digest-0.6.25/library [43] /nix/store/aqsj4k3pgm80qk4jjg7sh3ac28n6alv0-r-pkgconfig-2.0.3/library [44] /nix/store/i7c5v8s4hd9rlqah3bbvy06yywjqwdgk-r-hms-0.5.3/library [45] /nix/store/2fyrk58cmcbrxid66rbwjli7y114lvrm-r-readr-1.3.1/library [46] /nix/store/163xq2g5nblqgh7qhvzb6mvgg6qdrirj-r-BH-1.72.0-3/library [47] /nix/store/dr27b6k49prwgrjs0v30b6mf5lxa36pk-r-clipr-0.7.0/library [48] /nix/store/bghvqg9mcaj2jkbwpy0di6c563v24acz-r-R6-2.4.1/library [49] /nix/store/nq8jdq7nlg9xns4xpgyj6sqv8p4ny1wz-r-tidyselect-1.0.0/library [50] /nix/store/zlwhf75qld7vmwx3d4bdws057ld4mqbp-r-purrr-0.3.4/library [51] /nix/store/0gbmmnbpqlr69l573ymkcx8154fvlaca-r-openxlsx-4.1.4/library [52] /nix/store/1m1q4rmwx56dvx9rdzfsfq0jpw3hw0yx-r-stringi-1.4.6/library [53] /nix/store/mhy5vnvbsl4q7dcinwx3vqlyywxphbfd-r-zip-2.0.4/library [54] /nix/store/88sp7f7q577i6l5jjanqiv5ak6nv5357-r-readxl-1.3.1/library [55] /nix/store/6q9zwivzalhmzdracc8ma932wirq8rl5-r-cellranger-1.1.0/library [56] /nix/store/jh2n6k2ancdzqych5ix8n4rq9w514qq9-r-rematch-1.0.1/library [57] /nix/store/22xjqikqd6q556absb5224sbx6q0kp0c-r-progress-1.2.2/library [58] /nix/store/9vp32wa1qvv6lkq6p70qlli5whrxzfbi-r-prettyunits-1.1.1/library [59] /nix/store/r9rhqb6fsk75shihmb7nagqb51pqwp0y-r-class-7.3-16/library [60] /nix/store/z1kad071y43wij1ml9lpghh7jbimmcli-r-cluster-2.1.0/library [61] /nix/store/i8wr965caf6j1rxs2dsvpzhlh4hyyb4y-r-codetools-0.2-16/library [62] /nix/store/8iglq3zr68a39hzswvzxqi2ffhpw9p51-r-KernSmooth-2.23-16/library [63] /nix/store/n3k50zv40i40drpdf8npbmy2y08gkr6w-r-rpart-4.1-15/library [64] /nix/store/b4r6adzcvpm8ivflsmis7ja7q4r5hkjy-r-spatial-7.3-11/library [65] /nix/store/zqg6hmrncl8ax3vn7z5drf4csddwnhcx-r-survival-3.1-12/library [66] /nix/store/4anrihkx11h8mzb269xdyi84yp5v7grl-r-tidyverse-1.3.0/library [67] /nix/store/945haq0w8nfm9ib7r0nfngn5lk2i15ix-r-broom-0.5.6/library [68] /nix/store/52viqxzrmxl7dk0zji293g5b0b9grwh8-r-backports-1.1.6/library [69] /nix/store/zp1k42sw2glqy51w4hnzsjs8rgi8xzx2-r-dplyr-0.8.5/library [70] /nix/store/mkjd98mnshch2pwnj6h31czclqdaph3f-r-plogr-0.2.0/library [71] /nix/store/kflrzax6y5pwfqwzgfvqz433a3q3hnhn-r-generics-0.0.2/library [72] /nix/store/xi1n5h5w17c33y6ax3dfhg2hgzjl9bxz-r-reshape2-1.4.4/library [73] /nix/store/vn63z92zkpbaxmmhzpb6mq2fvg0xa26h-r-plyr-1.8.6/library [74] /nix/store/wmpyxss67bj44rin7hlnr9qabx66p5hj-r-stringr-1.4.0/library [75] /nix/store/330qbgbvllwz3h0i2qidrlk50y0mbgph-r-tidyr-1.0.2/library [76] /nix/store/cx3x4pqb65l1mhss65780hbzv9jdrzl6-r-dbplyr-1.4.3/library [77] /nix/store/gsj49bp3hpw9jlli3894c49amddryqsq-r-DBI-1.1.0/library [78] /nix/store/kvymhwp4gac0343c2yi1qvdpavx4gdn2-r-ggplot2-3.3.0/library [79] /nix/store/knv51jvpairvibrkkq48b6f1l2pa1cv8-r-gtable-0.3.0/library [80] /nix/store/158dx0ddv20ikwag2860nlg9p3hbh1zc-r-isoband-0.2.1/library [81] /nix/store/fprs9rp1jlhxzj7fp6l79akyf8k3p7zd-r-testthat-2.3.2/library [82] /nix/store/0pmlnkyn0ir3k9bvxihi1r06jyl64w3i-r-evaluate-0.14/library [83] /nix/store/7210bjjqn5cjndxn5isnd4vip00xhkhy-r-pkgload-1.0.2/library [84] /nix/store/9a12ybd74b7dns40gcfs061wv7913qjy-r-desc-1.2.0/library [85] /nix/store/na9pb1apa787zp7vvyz1kzym0ywjwbj0-r-rprojroot-1.3-2/library [86] /nix/store/pa2n7bh61qxyarn5i2ynd62k6knb1np1-r-pkgbuild-1.0.6/library [87] /nix/store/1hxm1m7h4272zxk9bpsaq46mvnl0dbss-r-callr-3.4.3/library [88] /nix/store/bigvyk6ipglbiil93zkf442nv4y3xa1x-r-processx-3.4.2/library [89] /nix/store/370lr0wf7qlq0m72xnmasg2iahkp2n52-r-ps-1.3.2/library [90] /nix/store/rr72q61d8mkd42zc5fhcd2rqjghvc141-r-withr-2.2.0/library [91] /nix/store/9gw77p7fmz89fa8wi1d9rvril6hd4sxy-r-rstudioapi-0.11/library [92] /nix/store/9x4v4pbrgmykbz2801h77yz2l0nmm5nb-r-praise-1.0.0/library [93] /nix/store/pf8ssb0dliw5bzsncl227agc8przb7ic-r-scales-1.1.0/library [94] /nix/store/095z4wgjrxn63ixvyzrj1fm1rdv6ci95-r-farver-2.0.3/library [95] /nix/store/5aczj4s7i9prf5i32ik5ac5baqvjwdb1-r-labeling-0.3/library [96] /nix/store/wch26phipzz9gxd4vbr4fynh7v28349j-r-munsell-0.5.0/library [97] /nix/store/3w8fh756mszhsjx5fwgwydcpn8vkwady-r-colorspace-1.4-1/library [98] /nix/store/8cmaj81v2vm4f8p59ylbnsby8adkbmhd-r-RColorBrewer-1.1-2/library [99] /nix/store/h4x4ygax7gpz6f0c2v0xacr62080qwb8-r-viridisLite-0.3.0/library [100] /nix/store/qhx0i2nn5syb6vygdn8fdxgl7k56yj81-r-httr-1.4.1/library [101] /nix/store/lxnb4aniv02i4jhdvz02aaql1kznbpxb-r-jsonlite-1.6.1/library [102] /nix/store/13dcry4gad3vfwqzqb0ii4n06ybrxybr-r-mime-0.9/library [103] /nix/store/2can5l8gscc92a3bqlak8hfcg96v5hvf-r-openssl-1.4.1/library [104] /nix/store/piwsgxdz5w2ak8c6fcq0lc978qbxwdp1-r-askpass-1.1/library [105] /nix/store/3sj5h6dwa1l27d2hvdchclygk0pgffsr-r-sys-3.3/library [106] /nix/store/2z0p88g0c03gigl2ip60dlsfkdv1k30h-r-lubridate-1.7.8/library [107] /nix/store/1pkmj8nqjg2iinrkg2w0zkwq0ldc01za-r-modelr-0.1.6/library [108] /nix/store/bswkzvn8lczwbyw3y7n0p0qp2q472s0g-r-reprex-0.3.0/library [109] /nix/store/yid22gad8z49q52d225vfba2m4cgj2lx-r-fs-1.4.1/library [110] /nix/store/d185qiqaplm5br9fk1pf29y0srlabw83-r-rmarkdown-2.1/library [111] /nix/store/iszqviydsdj31c3ww095ndqy1ld3cibs-r-base64enc-0.1-3/library [112] /nix/store/i89wfw4cr0fz3wbd7cg44fk4dwz8b6h1-r-htmltools-0.4.0/library [113] /nix/store/qrl28laqwmhpwg3dpcf4nca8alv0px0g-r-knitr-1.28/library [114] /nix/store/jffaxc4a3bbf2g6ip0gdcya73dmg53mb-r-highr-0.8/library [115] /nix/store/717srph13qpnbzmgsvhx25q8pl51ivpj-r-markdown-1.1/library [116] /nix/store/mxqmyq3ybdfyc6p0anhfy2kfw0iz5k4n-r-xfun-0.13/library [117] /nix/store/b8g6hadva0359l6j1aq4dbvxlqf1acxc-r-yaml-2.2.1/library [118] /nix/store/rrl05vpv7cw58zi0k9ykm7m4rjb9gjv3-r-tinytex-0.22/library [119] /nix/store/2ziq8nzah6xy3dgmxgim9h2wszz1f89f-r-whisker-0.4/library [120] /nix/store/540wbw4p1g2qmnmbfk0rhvwvfnf657sj-r-rvest-0.3.5/library [121] /nix/store/n3prn77gd9sf3z4whqp86kghr55bf5w8-r-selectr-0.4-2/library [122] /nix/store/gv28yjk5isnglq087y7767xw64qa40cw-r-xml2-1.3.2/library [123] /nix/store/693czdcvkp6glyir0mi8cqvdc643whvc-r-gridExtra-2.3/library [124] /nix/store/3sykinp7lyy70dgzr0fxjb195nw864dv-r-future-1.17.0/library [125] /nix/store/bqi2l53jfxncks6diy0hr34bw8f86rvk-r-globals-0.12.5/library [126] /nix/store/dydyl209klklzh69w9q89f2dym9xycnp-r-listenv-0.8.0/library [127] /nix/store/lni0bi36r4swldkx7g4hql7gfz9b121b-r-gganimate-1.0.5/library [128] /nix/store/hh92jxs79kx7vxrxr6j6vin1icscl4k7-r-tweenr-1.0.1/library [129] /nix/store/0npx3srjnqgh7bib80xscjqvfyzjvimq-r-GGally-1.5.0/library [130] /nix/store/x5nzxklmacj6l162g7kg6ln9p25r3f17-r-reshape-0.8.8/library [131] /nix/store/q29z7ckdyhfmg1zlzrrg1nrm36ax756j-r-ggfortify-0.4.9/library [132] /nix/store/1rvm1w9iv2c5n22p4drbjq8lr9wa2q2r-r-cowplot-1.0.0/library [133] /nix/store/rp8jhnasaw1vbv5ny5zx0mw30zgcp796-r-ggrepel-0.8.2/library [134] /nix/store/wb7y931mm8nsj7w9xin83bvbaq8wvi4d-r-corrplot-0.84/library [135] /nix/store/gdzcqivfvgdrsz247v5kmnnw1v6p9c1p-r-rpart.plot-3.0.8/library [136] /nix/store/6yqg37108r0v22476cm2kv0536wyilki-r-caret-6.0-86/library [137] /nix/store/6fjdgcwgisiqz451sg5fszxnn9z8vxg6-r-foreach-1.5.0/library [138] /nix/store/c3ph5i341gk7jdinrkkqf6y631xli424-r-iterators-1.0.12/library [139] /nix/store/sjm1rxshlpakpxbrynfhsjnnp1sjvc3r-r-ModelMetrics-1.2.2.2/library [140] /nix/store/vgk4m131d057xglmrrb9rijhzdr2qhhp-r-pROC-1.16.2/library [141] /nix/store/bv1kvy1wc2jx3v55rzn3cg2qjbv7r8zp-r-recipes-0.1.10/library [142] /nix/store/001h42q4za01gli7avjxhq7shpv73n9k-r-gower-0.2.1/library [143] /nix/store/ssffpl6ydffqyn9phscnccxnj71chnzg-r-ipred-0.9-9/library [144] /nix/store/baliqip8m6p0ylqhqcgqak29d8ghral1-r-prodlim-2019.11.13/library [145] /nix/store/j4n2wsv98asw83qiffg6a74dymk8r2hl-r-lava-1.6.7/library [146] /nix/store/hf5wq5kpsf6p9slglq5iav09s4by0y5i-r-numDeriv-2016.8-1.1/library [147] /nix/store/s58hm38078mx4gyqffvv09zn575xn648-r-SQUAREM-2020.2/library [148] /nix/store/g63ydzd53586pvr9kdgk8kf5szq5f2bc-r-timeDate-3043.102/library [149] /nix/store/0jkarmlf1kjv4g8a3svkc7jfarpp77ny-r-mlr3-0.2.0/library [150] /nix/store/g1m0n1w7by213v773iyn7vnxr25pkf56-r-checkmate-2.0.0/library [151] /nix/store/fc2ah8cz2sj6j2jk7zldvjmsjn1yakpn-r-lgr-0.3.4/library [152] /nix/store/0i2hs088j1s0a6i61124my6vnzq8l27m-r-mlbench-2.1-1/library [153] /nix/store/vzcs6k21pqrli3ispqnvj5qwkv14srf5-r-mlr3measures-0.1.3/library [154] /nix/store/h2yqqaia46bk3b1d1a7bq35zf09p1b1a-r-mlr3misc-0.2.0/library [155] /nix/store/c9mrkc928cmsvvnib50l0jb8lsz59nyk-r-paradox-0.2.0/library [156] /nix/store/vqpbdipi4p4advl2vxrn765mmgcrabvk-r-uuid-0.1-4/library [157] /nix/store/xpclynxnfq4h9218gk4y62nmgyyga6zl-r-mlr3viz-0.1.1/library [158] /nix/store/7w6pld5vir3p9bybay67kq0qwl0gnx17-r-mlr3learners-0.2.0/library [159] /nix/store/ca50rp6ha5s51qmhb1gjlj62r19xfzxs-r-mlr3pipelines-0.1.3/library [160] /nix/store/9hg0xap4pir64mhbgq8r8cgrfjn8aiz5-r-mlr3filters-0.2.0/library [161] /nix/store/jgqcmfix0xxm3y90m8wy3xkgmqf2b996-r-rstan-2.19.3/library [162] /nix/store/mvv1gjyrrpvf47fn7a8x722wdwrf5azk-r-inline-0.3.15/library [163] /nix/store/zmkw51x4w4d1v1awcws0xihj4hnxfr09-r-loo-2.2.0/library [164] /nix/store/30xxalfwzxl05bbfvj5sy8k3ysys6z5y-r-matrixStats-0.56.0/library [165] /nix/store/fhkww2l0izx87bjnf0pl9ydl1wprp0xv-r-StanHeaders-2.19.2/library [166] /nix/store/aflck5pzxa8ym5q1dxchx5hisfmfghkr-r-tidybayes-2.0.3/library [167] /nix/store/jhlbhiv4fg0wsbxwjz8igc4hcg79vw94-r-arrayhelpers-1.1-0/library [168] /nix/store/fv089zrnvicnavbi08hnzqpi9g1z4inj-r-svUnit-1.0.3/library [169] /nix/store/xci2rgjizx1fyb33818jx5s1bgn8v8k6-r-coda-0.19-3/library [170] /nix/store/dch9asd38yldz0sdn8nsgk9ivjrkbhva-r-HDInterval-0.2.0/library [171] /nix/store/rs8dri2m5cqdmpiw187rvl4yhjn0jg2v-r-e1071-1.7-3/library [172] /nix/store/qs1zyh3sbvccgnqjzas3br6pak399zgc-r-pvclust-2.2-0/library [173] /nix/store/sh3zxvdazp7rkjn1iczrag1h2358ifm1-r-forecast-8.12/library [174] /nix/store/h67kaxqr2ppdpyj77wg5hm684jypznji-r-fracdiff-1.5-1/library [175] /nix/store/fh0z465ligbpqyam5l1fwiijc7334kbk-r-lmtest-0.9-37/library [176] /nix/store/0lnsbwfg0axr80h137q52pa50cllbjpf-r-zoo-1.8-7/library [177] /nix/store/p7k4s3ivf83dp2kcxr1cr0wlc1rfk6jx-r-RcppArmadillo-0.9.860.2.0/library [178] /nix/store/ssnxv5x6zid2w11v8k5yvnyxis6n1qfk-r-tseries-0.10-47/library [179] /nix/store/zrbskjwaz0bzz4v76j044d771m24g6h8-r-quadprog-1.5-8/library [180] /nix/store/2x3w5sjalrfm6hf1dxd951j8y94nh765-r-quantmod-0.4.17/library [181] /nix/store/7g55xshf49s9379ijm1zi1qnh1vbsifq-r-TTR-0.23-6/library [182] /nix/store/6ilyzph46q6ijyanq4p7f0ccyni0d7j0-r-xts-0.12-0/library [183] /nix/store/17xhqghcnqha7pwbf98dxsq1729slqd5-r-urca-1.3-0/library [184] /nix/store/722lyn0k8y27pj1alik56r4vpjnncd9z-r-swdft-1.0.0/library [185] /nix/store/36n0zgy10fsqcq76n0qmdwjxrwh7pn9n-r-xgboost-1.0.0.2/library [186] /nix/store/ac0ar7lf75qx84xsdjv6j02rkdgnhybz-r-ranger-0.12.1/library [187] /nix/store/i1ighkq42x10dirqmzgbx2mhbnz1ynkb-r-DALEX-1.2.0/library [188] /nix/store/28fqnhsfng1bkphl0wvr7lg5y3p6va46-r-iBreakDown-1.2.0/library [189] /nix/store/dpym77x9qc2ksr4mwjm3pb9ar1kvwhdl-r-ingredients-1.2.0/library [190] /nix/store/sp4d281w6dpr31as0xdjqizdx8hhb01q-r-DALEXtra-0.2.1/library [191] /nix/store/ckhp9kpmjcs0wxb113pxn25c2wip2d0n-r-ggdendro-0.1-20/library [192] /nix/store/f3k7dxj1dsmqri2gn0svq4c9fvvl9g7q-r-glmnet-3.0-2/library [193] /nix/store/l6ccj6mwkqybjvh6dr8qzalygp0i7jyb-r-shape-1.4.4/library [194] /nix/store/418mqfwlafh6984xld8lzhl7rv29qw68-r-reticulate-1.15/library [195] /nix/store/qwh982mgxd2mzrgbjk14irqbasywa1jk-r-rappdirs-0.3.1/library [196] /nix/store/6sxs76abll23c6372h6nf101wi8fcr4c-r-FactoMineR-2.3/library [197] /nix/store/39d2va10ydgyzddwr07xwdx11fwk191i-r-ellipse-0.4.1/library [198] /nix/store/4lxym5nxdn8hb7l8a566n5vg9paqcfi2-r-flashClust-1.01-2/library [199] /nix/store/wp161zbjjs41fq4kn4k3m244c7b8l2l2-r-leaps-3.1/library [200] /nix/store/irghsaplrpb3hg3y7j831bbklf2cqs6d-r-scatterplot3d-0.3-41/library [201] /nix/store/09ahkf50g1q9isxanbdykqgcdrp8mxl1-r-factoextra-1.0.7/library [202] /nix/store/zi9bq7amsgc6w2x7fvd62g9qxz69vjfm-r-dendextend-1.13.4/library [203] /nix/store/wcywb7ydglzlxg57jf354x31nmy63923-r-viridis-0.5.1/library [204] /nix/store/pvnpg4vdvv93pmwrlgmy51ihrb68j55f-r-ggpubr-0.2.5/library [205] /nix/store/qpapsc4l9pylzfhc72ha9d82hcbac41z-r-ggsci-2.9/library [206] /nix/store/h0zg4x3bmkc82ggx8h4q595ffckcqgx5-r-ggsignif-0.6.0/library [207] /nix/store/vn5svgbf8vsgv8iy8fdzlj0izp279q15-r-polynom-1.4-0/library [208] /nix/store/mc1mlsjx5h3gc8nkl7jlpd4vg145nk1z-r-lindia-0.9/library [209] /nix/store/z1k4c8lhabp9niwfg1xylg58pf99ld9r-r-orgutils-0.4-1/library [210] /nix/store/ybj4538v74wx4f1l064m0qn589vyjmzg-r-textutils-0.2-0/library [211] /nix/store/hhm5j0wvzjc0bfd53170bw8w7mij2wnh-r-latex2exp-0.4.0/library [212] /nix/store/njlv5mkxgjyx3x8p984nr84dwa2v1iqp-r-kableExtra-1.1.0/library [213] /nix/store/lf2sb84ylh259m421ljbj731a4prjhsl-r-webshot-0.5.2/library [214] /nix/store/n6b8ap54b78h8l70kyx9nvayp44rnfzf-r-printr-0.1/library [215] /nix/store/02g1v6d3ly8zylpckigwk6w3l1mx2i9d-r-microbenchmark-1.4-7/library [216] /nix/store/ri6qm0fp8cyx2qnysxjv2wsk0nndl1x9-r-webchem-0.5.0/library [217] /nix/store/cg95rqc1gmaqxf5kxja3cz8m5w4vl76l-r-RCurl-1.98-1.2/library [218] /nix/store/qbpinv148778fzdz8372x8gp34hspvy1-r-bitops-1.0-6/library [219] /nix/store/1g0lbrx6si76k282sxr9cj0mgknrw0lx-r-devtools-2.3.0/library [220] /nix/store/hnvww0128czlx6w8aipjn0zs7nvmvak9-r-covr-3.5.0/library [221] /nix/store/p4nv59przmb14sxi49jwqarkv0l40jsp-r-rex-1.2.0/library [222] /nix/store/vnysmc3vkgkligwah1zh9l4sahr533a8-r-lazyeval-0.2.2/library [223] /nix/store/d638w33ahybsa3sqr52fafvxs2b7w9x3-r-DT-0.13/library [224] /nix/store/35nqc34wy2nhd9bl7lv6wriw0l3cghsw-r-crosstalk-1.1.0.1/library [225] /nix/store/03838i63x5irvgmpgwj67ah0wi56k9d7-r-htmlwidgets-1.5.1/library [226] /nix/store/l4640jxlsjzqhw63c18fziar5vc0xyhk-r-promises-1.1.0/library [227] /nix/store/rxrb8p3dxzsg10v7yqaq5pi3y3gk6nqh-r-later-1.0.0/library [228] /nix/store/giprr32bl6k18b9n4qjckpf102flarly-r-git2r-0.26.1/library [229] /nix/store/bbkpkf44b13ig1pkz7af32kw5dzp12vb-r-memoise-1.1.0/library [230] /nix/store/m31vzssnfzapsapl7f8v4m15003lcc8r-r-rcmdcheck-1.3.3/library [231] /nix/store/hbiylknhxsin9hp9zaa6dwc2c9ai1mqx-r-sessioninfo-1.1.1/library [232] /nix/store/8vwlbx3s345gjccrkiqa6h1bm9wq4s9q-r-xopen-1.0.0/library [233] /nix/store/mjnwnlv60cn56ap0rrzvrkqlh5qisszx-r-remotes-2.1.1/library [234] /nix/store/1rq4zyzqymml7cc11q89rl5g514ml9na-r-roxygen2-7.1.0/library [235] /nix/store/2658mrn1hpkq0fv629rvags91qg65pbn-r-brew-1.0-6/library [236] /nix/store/nvjalws9lzva4pd4nz1z2131xsb9b5p6-r-commonmark-1.7/library [237] /nix/store/qx900vivd9s2zjrxc6868s92ljfwj5dv-r-rversions-2.0.1/library [238] /nix/store/1drg446wilq5fjnxkglxnnv8pbp1hllg-r-usethis-1.6.0/library [239] /nix/store/p3f3wa41d304zbs5cwvw7vy4j17zd6nq-r-gh-1.1.0/library [240] /nix/store/769g7jh93da8w15ad0wsbn2aqziwwx56-r-ini-0.3.1/library [241] /nix/store/p7kifw1l6z2zg68a71s4sdbfj8gdmnv5-r-rematch2-2.1.1/library [242] /nix/store/6zhdqip9ld9vl6pvifqcf4gsqy2f5wix-r-rethinking/library [243] /nix/store/496p28klmflihdkc83c8p1cywg85mgk4-r-mvtnorm-1.1-0/library [244] /nix/store/xb1zn7ab4nka7h1vm678ginzfwg4w9wf-r-dagitty-0.2-2/library [245] /nix/store/3zj4dkjbdwgf3mdsl9nf9jkicpz1nwgc-r-V8-3.0.2/library [246] /nix/store/qiqsh62w69b5xgj2i4wjamibzxxji0mf-r-tidybayes.rethinking/library [247] /nix/store/4j6byy1klyk4hm2k6g3657682cf3wxcj-R-4.0.0/lib/R/library   Summer of 2020 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/sr2-ch13-ch14/","tags":["solutions","R","SR2"],"title":"SR2 :: Solutions for Chapters {13,14}"},{"categories":["programming"],"contents":" Setup details are described here, and the meta-post about these solutions is here.\n Materials The summmer course1 is based off of the second edition of Statistical Rethinking by Richard McElreath. This submission covers the following exercise questions:\n Chapter 9  E{3,4,5,6} M{1,2,3}   Chapter 11  E{1,2,3,4} M{2,3,4,5,6,8}   Chapter 12  E{4} H{1,2}    Packages A colophon with details is provided at the end, but the following packages and theme parameters are used throughout.\nlibsUsed\u0026lt;-c(\u0026#34;tidyverse\u0026#34;,\u0026#34;tidybayes\u0026#34;,\u0026#34;orgutils\u0026#34;,\u0026#34;dagitty\u0026#34;, \u0026#34;rethinking\u0026#34;,\u0026#34;tidybayes.rethinking\u0026#34;, \u0026#34;ggplot2\u0026#34;,\u0026#34;kableExtra\u0026#34;,\u0026#34;dplyr\u0026#34;,\u0026#34;glue\u0026#34;, \u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;printr\u0026#34;,\u0026#34;devtools\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)); theme_set(theme_grey(base_size=24)) set.seed(1995) Chapter IX: Markov Chain Monte Carlo Easy Questions (Ch9) 9E3 Which sort of parameters can Hamiltonian Monte Carlo not handle? Can you explain why?\nSolution Hamiltonian Monte Carlo is derived by adding the concept of momentum which requires that the Hessian is non-negative, which in term requires a continuous smooth function. Thus HMC cannot handle discrete parameters by construction. More formally, the HMC requires a transform from the D-dimensional parameter space to a 2D-dimensional phase space cite:betancourtConceptualIntroductionHamiltonian2018.\n9E4 Explain the difference between the effective number of samples, n_eff as calculated by Stan, and the actual number of samples.\nSolution We will invoke the precise definition of the effective sample size cite:betancourtConceptualIntroductionHamiltonian2018\n\\[ ESS = \\frac{N}{1+2\\sum_{l=1}^{\\infty}\\rho_{l}} \\]\nWhere we note that \\(\\rho_{l}\\) is the lag-l autocorrelation of \\(f\\) over the Markov chain (in time). In essence, this is the number of independent samples which have equivalent information of the posterior. This is relevant, because the samples from a Marko chain are sequentially correlated (autocorrelated).\n9E5 Which value should Rhat approach, when a chain is sampling the posterior distribution correctly?\nSolution The literature cite:gelmanBayesianDataAnalysis2014 often cites a value of \\(1.01\\) for convergence. However, newer versions of Stan tend are documented to suggest \\(1.05\\) since they use newer formulations of the Rhat value cite:vehtariRanknormalizationFoldingLocalization2020. It should also be noted that cite:royConvergenceDiagnosticsMarkov2020 the Rhat value does not necessarily indicate convergence, it is not a necessary and sufficient condition, but a heuristic, and should be understood as such.\nHOLD 9E6 Sketch a good trace plot for a Markov chain, one that is effectively sampling from the posterior distribution. What is good about its shape? Then sketch a trace plot for a malfunctioning Markov chain. What about its shape indicates malfunction?\nSolution Recall that the \u0026ldquo;health\u0026rdquo; of a chain can be determined by the following qualities in the trace plot.\n Stationarity This ensures that the chain is sampling the high probability portion of the posterior distribution Mixing This ensures that the chain explores the full region Convergence Convergence implies that independent chains agree on the same region of high probability  We will require a sample model to plot.\ndata(rugged) rugDat\u0026lt;-rugged rugDat\u0026lt;-rugDat %\u0026gt;% dplyr::mutate(logGDP=log(rgdppc_2000)) %\u0026gt;% tidyr::drop_na() %\u0026gt;% dplyr::mutate(logGDP_std=logGDP/mean(logGDP), rugged_std=rugged/max(rugged), cid=ifelse(cont_africa==1,1,2)) datList\u0026lt;-list( logGDP_std=rugDat$logGDP_std, rugged_std=rugDat$rugged_std, cid=as.integer(rugDat$cid) ) m91unif\u0026lt;-ulam( alist( logGDP_std ~ dnorm(mu,sigma), mu\u0026lt;-a[cid] + b[cid]*(rugged_std-0.215), a[cid]~dnorm(1,0.1), b[cid]~dnorm(0,0.3), sigma~dunif(0,1) ), data=datList, chains=4, cores=4 ) We would like to check the trace and trace rank plots.\nm91unif %\u0026gt;% traceplot   m91unif %\u0026gt;% trankplot   Clearly this is a good model, with well mixed chains, as can be seen in the trank and trace plots.\nWe will now check the plots for the unhealthy chain described in the chapter.\nm9e4un\u0026lt;-ulam( alist( y ~ dnorm(mu,sigma), mu\u0026lt;-alpha, alpha ~ dnorm(0,1000), sigma~dexp(0.0001) ),data=list(y=c(-1,1)),chains=4,cores=4 ) SAMPLING FOR MODEL \u0026#39;726d002e27cec1633082261fcfedb813\u0026#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 8.1e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.81 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) SAMPLING FOR MODEL \u0026#39;726d002e27cec1633082261fcfedb813\u0026#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 3.6e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.36 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) SAMPLING FOR MODEL \u0026#39;726d002e27cec1633082261fcfedb813\u0026#39; NOW (CHAIN 3). Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Chain 3: Gradient evaluation took 2.5e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.25 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 0.069084 seconds (Warm-up) Chain 2: 0.023083 seconds (Sampling) Chain 2: 0.092167 seconds (Total) Chain 2: Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) SAMPLING FOR MODEL \u0026#39;726d002e27cec1633082261fcfedb813\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 3.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 0.082116 seconds (Warm-up) Chain 1: 0.095511 seconds (Sampling) Chain 1: 0.177627 seconds (Total) Chain 1: Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 0.073606 seconds (Warm-up) Chain 3: 0.076388 seconds (Sampling) Chain 3: 0.149994 seconds (Total) Chain 3: Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 0.064213 seconds (Warm-up) Chain 4: 0.091667 seconds (Sampling) Chain 4: 0.15588 seconds (Total) Chain 4: Warning messages: 1: There were 55 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup 2: Examine the pairs() plot to diagnose sampling problems 3: The largest R-hat is 1.08, indicating chains have not mixed. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#r-hat 4: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#bulk-ess 5: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#tail-ess m9e4un %\u0026gt;% traceplot   m9e4un %\u0026gt;% trankplot   Clearly these plots show a model which is unable to converge.\nm9e4un %\u0026gt;% precis mean sd 5.5% 94.5% n_eff Rhat4 alpha -22.01 267.51 -414.95 316.61 154 1.02 sigma 420.97 983.52 5.39 1894.87 151 1.04 This has clear repercussions on the actual predictions as well.\nQuestions of Medium Complexity (Ch9) HOLD 9M1 Re-estimate the terrain ruggedness model from the chapter, but now using a uniform prior for the standard deviation, sigma. The uniform prior should be dunif(0,1). Use ulam to estimate the posterior. Does the different prior have any detectable influence on the posterior distribution of sigma? What or why not?\nSolution Instead of using the complete.cases formulation in the book, we will instead use a more tidyverse friendly approach.\ndata(rugged) rugDat\u0026lt;-rugged rugDat\u0026lt;-rugDat %\u0026gt;% dplyr::mutate(logGDP=log(rgdppc_2000)) %\u0026gt;% tidyr::drop_na() %\u0026gt;% dplyr::mutate(logGDP_std=logGDP/mean(logGDP), rugged_std=rugged/max(rugged), cid=ifelse(cont_africa==1,1,2)) datList\u0026lt;-list( logGDP_std=rugDat$logGDP_std, rugged_std=rugDat$rugged_std, cid=as.integer(rugDat$cid) ) We can now formulate a model with a uniform prior on sigma.\nm91unif\u0026lt;-ulam( alist( logGDP_std ~ dnorm(mu,sigma), mu\u0026lt;-a[cid] + b[cid]*(rugged_std-0.215), a[cid]~dnorm(1,0.1), b[cid]~dnorm(0,0.3), sigma~dunif(0,1) ), data=datList, chains=4, cores=4 ) m91exp\u0026lt;-ulam( alist( logGDP_std ~ dnorm(mu,sigma), mu\u0026lt;-a[cid] + b[cid]*(rugged_std-0.215), a[cid]~dnorm(1,0.1), b[cid]~dnorm(0,0.3), sigma~dexp(1) ), data=datList, chains=4, cores=4 ) SAMPLING FOR MODEL \u0026#39;9b462775c5cc2badb2b667c53f2020c8\u0026#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 2.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) SAMPLING FOR MODEL \u0026#39;9b462775c5cc2badb2b667c53f2020c8\u0026#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 3.3e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.33 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) SAMPLING FOR MODEL \u0026#39;9b462775c5cc2badb2b667c53f2020c8\u0026#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 2.6e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) SAMPLING FOR MODEL \u0026#39;9b462775c5cc2badb2b667c53f2020c8\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 2.5e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.25 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 0.048459 seconds (Warm-up) Chain 1: 0.017728 seconds (Sampling) Chain 1: 0.066187 seconds (Total) Chain 1: Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 0.043574 seconds (Warm-up) Chain 2: 0.018569 seconds (Sampling) Chain 2: 0.062143 seconds (Total) Chain 2: Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 0.03201 seconds (Warm-up) Chain 3: 0.024666 seconds (Sampling) Chain 3: 0.056676 seconds (Total) Chain 3: Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 0.040804 seconds (Warm-up) Chain 4: 0.018479 seconds (Sampling) Chain 4: 0.059283 seconds (Total) Chain 4: The posterior distributions are simply:\nm91exp %\u0026gt;% extract.samples %\u0026gt;% .$sigma %\u0026gt;% dens(.,xlab=\u0026#34;sigma\u0026#34;) m91unif %\u0026gt;% extract.samples %\u0026gt;% .$sigma %\u0026gt;% dens(.,add=TRUE,col=\u0026#34;blue\u0026#34;) mtext(\u0026#34;posterior\u0026#34;)   With the priors being:\nm91exp %\u0026gt;% extract.prior %\u0026gt;% .$sigma %\u0026gt;% dens(.,xlab=\u0026#34;sigma\u0026#34;) m91unif %\u0026gt;% extract.prior %\u0026gt;% .$sigma %\u0026gt;% dens(.,add=TRUE,col=\u0026#34;blue\u0026#34;) mtext(\u0026#34;prior\u0026#34;)   This makes sense, since we know that uniform prior is essentially a step function between 0 and 1 with a value of 1, while the exponential function decays normally, but should actually be spiked upwards to 1 as well.\nHOLD 9M2 Modify the terrain ruggedness model again. This times, change the prior for b[cid] to dexp(0.3). What does this do to the posterior distribution? Can you explain it?\nSolution m92exp\u0026lt;-ulam( alist( logGDP_std ~ dnorm(mu,sigma), mu\u0026lt;-a[cid] + b[cid]*(rugged_std-0.215), a[cid]~dnorm(1,0.1), b[cid]~dexp(0.3), sigma~dexp(1) ),data=datList, chains=4, cores=4 ) Priors:\nm92exp %\u0026gt;% extract.prior %\u0026gt;% .$sigma %\u0026gt;% dens(.,xlab=\u0026#34;sigma\u0026#34;,col=\u0026#34;blue\u0026#34;) mtext(\u0026#34;prior\u0026#34;)   Posterior:\nm92exp %\u0026gt;% extract.samples %\u0026gt;% .$sigma %\u0026gt;% dens(.,xlab=\u0026#34;sigma\u0026#34;,col=\u0026#34;blue\u0026#34;) mtext(\u0026#34;posterior\u0026#34;)   m92exp %\u0026gt;% precis(.,depth = 2) m91exp %\u0026gt;% precis(.,depth = 2) m91unif %\u0026gt;% precis(.,depth = 2) mean sd 5.5% 94.5% n_eff Rhat4 a[1] 1.01 0.02 0.98 1.03 1161 1 b[1] 0.13 0.08 0.02 0.27 821 1 sigma 0.12 0.01 0.10 0.15 1097 1 mean sd 5.5% 94.5% n_eff Rhat4 a[1] 1.01 0.02 0.98 1.04 1609 1 b[1] 0.09 0.10 -0.06 0.24 1518 1 sigma 0.12 0.01 0.10 0.15 1493 1 mean sd 5.5% 94.5% n_eff Rhat4 a[1] 1.01 0.02 0.97 1.04 1744 1 b[1] 0.10 0.09 -0.05 0.25 1874 1 sigma 0.12 0.01 0.10 0.15 1824 1 We can see that there isn\u0026rsquo;t much difference, however, the main difference is in the b parameter, which seems to have fewer samples, and is also no longer takes any negative values.\nHOLD 9M3 Re-estimate one of the Stan models from the chapter, but at different numbers of warmup iterations. Be sure to use the same number of sampling iterations in each case. Compare the n_eff values. How much warmup is enough?\nSolution For brevity, we will re-use the same data and model as used in the previous questions.\nwarmTrial\u0026lt;-seq.int(10,10000,length.out = 10) nSampleEff\u0026lt;-matrix(NA,nrow=length(warmTrial),ncol=3) nSampleEffExp\u0026lt;-matrix(NA,nrow=length(warmTrial),ncol=3)    Uniform Model\nfor(i in 1:length(warmTrial)){ tmp\u0026lt;-ulam(m91unif,chains=4,cores=4,refresh=-1,warmup=warmTrial[i],iter=1000+warmTrial[i]) nSampleEff[i,]\u0026lt;-precis(tmp,2)$n_eff } Chain 1: Chain 1: Gradient evaluation took 9.7e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.97 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: WARNING: No variance estimation is Chain 1: performed for num_warmup \u0026lt; 20 Chain 1: Chain 2: Chain 2: Gradient evaluation took 9.6e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.96 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: WARNING: No variance estimation is Chain 2: performed for num_warmup \u0026lt; 20 Chain 2: Chain 3: Chain 3: Gradient evaluation took 0.000107 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.07 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: WARNING: No variance estimation is Chain 3: performed for num_warmup \u0026lt; 20 Chain 3: Chain 1: Chain 1: Elapsed Time: 0.00162 seconds (Warm-up) Chain 1: 0.1738 seconds (Sampling) Chain 1: 0.17542 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.003755 seconds (Warm-up) Chain 3: 0.059869 seconds (Sampling) Chain 3: 0.063624 seconds (Total) Chain 3: Chain 4: Chain 4: Gradient evaluation took 9.2e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.92 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: WARNING: No variance estimation is Chain 4: performed for num_warmup \u0026lt; 20 Chain 4: Chain 2: Chain 2: Elapsed Time: 0.003924 seconds (Warm-up) Chain 2: 0.257815 seconds (Sampling) Chain 2: 0.261739 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.003735 seconds (Warm-up) Chain 4: 0.127719 seconds (Sampling) Chain 4: 0.131454 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 0.000209 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.09 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 7.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.78 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 6.2e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.62 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 8.2e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.82 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.118609 seconds (Warm-up) Chain 1: 0.075057 seconds (Sampling) Chain 1: 0.193666 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.122167 seconds (Warm-up) Chain 2: 0.05402 seconds (Sampling) Chain 2: 0.176187 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.118156 seconds (Warm-up) Chain 3: 0.035528 seconds (Sampling) Chain 3: 0.153684 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.073505 seconds (Warm-up) Chain 4: 0.040445 seconds (Sampling) Chain 4: 0.11395 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 9.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 7.3e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.73 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 0.000107 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.07 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 0.000109 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.09 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.23286 seconds (Warm-up) Chain 1: 0.032903 seconds (Sampling) Chain 1: 0.265763 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.196139 seconds (Warm-up) Chain 2: 0.032946 seconds (Sampling) Chain 2: 0.229085 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.15298 seconds (Warm-up) Chain 3: 0.042238 seconds (Sampling) Chain 3: 0.195218 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.109015 seconds (Warm-up) Chain 4: 0.041119 seconds (Sampling) Chain 4: 0.150134 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 7.4e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.74 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 7.9e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.79 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 0.000109 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.09 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 0.000101 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 1.01 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.304209 seconds (Warm-up) Chain 1: 0.038004 seconds (Sampling) Chain 1: 0.342213 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.274087 seconds (Warm-up) Chain 2: 0.034831 seconds (Sampling) Chain 2: 0.308918 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.231719 seconds (Warm-up) Chain 3: 0.038131 seconds (Sampling) Chain 3: 0.26985 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.177718 seconds (Warm-up) Chain 4: 0.038546 seconds (Sampling) Chain 4: 0.216264 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 0.000117 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.17 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 7.3e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.73 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 7.2e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.72 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 7.3e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.73 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.322041 seconds (Warm-up) Chain 1: 0.048995 seconds (Sampling) Chain 1: 0.371036 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.293325 seconds (Warm-up) Chain 2: 0.032541 seconds (Sampling) Chain 2: 0.325866 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.264383 seconds (Warm-up) Chain 3: 0.04051 seconds (Sampling) Chain 3: 0.304893 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.220301 seconds (Warm-up) Chain 4: 0.040218 seconds (Sampling) Chain 4: 0.260519 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 4.9e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.49 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 5.1e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 3.9e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.39 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 3.9e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.39 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.306918 seconds (Warm-up) Chain 1: 0.048194 seconds (Sampling) Chain 1: 0.355112 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.299256 seconds (Warm-up) Chain 2: 0.052776 seconds (Sampling) Chain 2: 0.352032 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.300093 seconds (Warm-up) Chain 3: 0.052132 seconds (Sampling) Chain 3: 0.352225 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.278897 seconds (Warm-up) Chain 4: 0.053532 seconds (Sampling) Chain 4: 0.332429 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 9.4e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.94 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 8.4e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.84 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 7.1e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.71 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 6.2e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.62 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.437519 seconds (Warm-up) Chain 1: 0.04052 seconds (Sampling) Chain 1: 0.478039 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.3479 seconds (Warm-up) Chain 3: 0.033007 seconds (Sampling) Chain 3: 0.380907 seconds (Total) Chain 3: Chain 2: Chain 2: Elapsed Time: 0.412403 seconds (Warm-up) Chain 2: 0.052948 seconds (Sampling) Chain 2: 0.465351 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.315601 seconds (Warm-up) Chain 4: 0.038006 seconds (Sampling) Chain 4: 0.353607 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 8.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.88 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 5.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.58 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 5.9e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.59 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 4.4e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.44 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.387624 seconds (Warm-up) Chain 1: 0.033915 seconds (Sampling) Chain 1: 0.421539 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.385989 seconds (Warm-up) Chain 2: 0.044089 seconds (Sampling) Chain 2: 0.430078 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.409957 seconds (Warm-up) Chain 3: 0.039642 seconds (Sampling) Chain 3: 0.449599 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.363549 seconds (Warm-up) Chain 4: 0.042624 seconds (Sampling) Chain 4: 0.406173 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 7.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.78 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 5.1e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 4.7e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.47 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 5.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 2: Chain 2: Elapsed Time: 0.355205 seconds (Warm-up) Chain 2: 0.051537 seconds (Sampling) Chain 2: 0.406742 seconds (Total) Chain 2: Chain 1: Chain 1: Elapsed Time: 0.394264 seconds (Warm-up) Chain 1: 0.037432 seconds (Sampling) Chain 1: 0.431696 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.383287 seconds (Warm-up) Chain 3: 0.036322 seconds (Sampling) Chain 3: 0.419609 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.335487 seconds (Warm-up) Chain 4: 0.048271 seconds (Sampling) Chain 4: 0.383758 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 5e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.5 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 5.5e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.55 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 6.3e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.63 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 5.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.454863 seconds (Warm-up) Chain 1: 0.037816 seconds (Sampling) Chain 1: 0.492679 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.415499 seconds (Warm-up) Chain 2: 0.037093 seconds (Sampling) Chain 2: 0.452592 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.363295 seconds (Warm-up) Chain 3: 0.061002 seconds (Sampling) Chain 3: 0.424297 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.462541 seconds (Warm-up) Chain 4: 0.043532 seconds (Sampling) Chain 4: 0.506073 seconds (Total) Chain 4: Warning messages: 1: There were 470 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup 2: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See http://mc-stan.org/misc/warnings.html#bfmi-low 3: Examine the pairs() plot to diagnose sampling problems 4: The largest R-hat is 1.05, indicating chains have not mixed. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#r-hat 5: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#bulk-ess 6: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See http://mc-stan.org/misc/warnings.html#tail-ess nSampleEff %\u0026gt;% tibble(nWarmup=warmTrial) \u001b[90m# A tibble: 10 x 2\u001b[39m .[,\u0026#34;a[1]\u0026#34;] [,\u0026#34;b[1]\u0026#34;] [,\u0026#34;sigma\u0026#34;] nWarmup \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;int\u0026gt;\u001b[39m\u001b[23m \u001b[90m 1\u001b[39m \u001b[4m1\u001b[24m051. 399. 45.8 10 \u001b[90m 2\u001b[39m \u001b[4m3\u001b[24m101. \u001b[4m3\u001b[24m085. \u001b[4m3\u001b[24m135. \u001b[4m1\u001b[24m120 \u001b[90m 3\u001b[39m \u001b[4m3\u001b[24m515. \u001b[4m3\u001b[24m529. \u001b[4m3\u001b[24m214. \u001b[4m2\u001b[24m230 \u001b[90m 4\u001b[39m \u001b[4m3\u001b[24m122. \u001b[4m3\u001b[24m277. \u001b[4m3\u001b[24m522. \u001b[4m3\u001b[24m340 \u001b[90m 5\u001b[39m \u001b[4m3\u001b[24m145. \u001b[4m3\u001b[24m382. \u001b[4m3\u001b[24m322. \u001b[4m4\u001b[24m450 \u001b[90m 6\u001b[39m \u001b[4m3\u001b[24m378. \u001b[4m3\u001b[24m193. \u001b[4m3\u001b[24m701. \u001b[4m5\u001b[24m560 \u001b[90m 7\u001b[39m \u001b[4m3\u001b[24m299. \u001b[4m3\u001b[24m539. \u001b[4m3\u001b[24m149. \u001b[4m6\u001b[24m670 \u001b[90m 8\u001b[39m \u001b[4m3\u001b[24m570. \u001b[4m3\u001b[24m050. \u001b[4m3\u001b[24m079. \u001b[4m7\u001b[24m780 \u001b[90m 9\u001b[39m \u001b[4m3\u001b[24m247. \u001b[4m3\u001b[24m148. \u001b[4m3\u001b[24m340. \u001b[4m8\u001b[24m890 \u001b[90m10\u001b[39m \u001b[4m3\u001b[24m159. \u001b[4m2\u001b[24m929. \u001b[4m2\u001b[24m960. \u001b[4m1\u001b[24m\u001b[4m0\u001b[24m000      Exponential Model\nfor(i in 1:length(warmTrial)){ tmp\u0026lt;-ulam(m91exp,chains=4,cores=4,refresh=-1,warmup=warmTrial[i],iter=1000+warmTrial[i]) nSampleEffExp[i,]\u0026lt;-precis(tmp,2)$n_eff } Chain 1: Chain 1: Gradient evaluation took 3e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: WARNING: No variance estimation is Chain 1: performed for num_warmup \u0026lt; 20 Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: WARNING: No variance estimation is Chain 2: performed for num_warmup \u0026lt; 20 Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.7e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: WARNING: No variance estimation is Chain 3: performed for num_warmup \u0026lt; 20 Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.5e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.25 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: WARNING: No variance estimation is Chain 4: performed for num_warmup \u0026lt; 20 Chain 4: Chain 1: Chain 1: Elapsed Time: 0.000825 seconds (Warm-up) Chain 1: 0.074412 seconds (Sampling) Chain 1: 0.075237 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.000433 seconds (Warm-up) Chain 3: 0.05124 seconds (Sampling) Chain 3: 0.051673 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.001827 seconds (Warm-up) Chain 4: 0.059028 seconds (Sampling) Chain 4: 0.060855 seconds (Total) Chain 4: Chain 2: Chain 2: Elapsed Time: 0.005092 seconds (Warm-up) Chain 2: 0.111894 seconds (Sampling) Chain 2: 0.116986 seconds (Total) Chain 2: Chain 1: Chain 1: Gradient evaluation took 2.7e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.7e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 3.3e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.33 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.048625 seconds (Warm-up) Chain 1: 0.03552 seconds (Sampling) Chain 1: 0.084145 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.045476 seconds (Warm-up) Chain 2: 0.03068 seconds (Sampling) Chain 2: 0.076156 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.059723 seconds (Warm-up) Chain 3: 0.034697 seconds (Sampling) Chain 3: 0.09442 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.055658 seconds (Warm-up) Chain 4: 0.030508 seconds (Sampling) Chain 4: 0.086166 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 3.7e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.37 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.6e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.6e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.10462 seconds (Warm-up) Chain 1: 0.035886 seconds (Sampling) Chain 1: 0.140506 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.08377 seconds (Warm-up) Chain 3: 0.036938 seconds (Sampling) Chain 3: 0.120708 seconds (Total) Chain 3: Chain 2: Chain 2: Elapsed Time: 0.096442 seconds (Warm-up) Chain 2: 0.0419 seconds (Sampling) Chain 2: 0.138342 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.091513 seconds (Warm-up) Chain 4: 0.062068 seconds (Sampling) Chain 4: 0.153581 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 3.1e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 3.1e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.6e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.4e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.24 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.12662 seconds (Warm-up) Chain 1: 0.033816 seconds (Sampling) Chain 1: 0.160436 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.119929 seconds (Warm-up) Chain 2: 0.048545 seconds (Sampling) Chain 2: 0.168474 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.118087 seconds (Warm-up) Chain 4: 0.040127 seconds (Sampling) Chain 4: 0.158214 seconds (Total) Chain 4: Chain 3: Chain 3: Elapsed Time: 0.131859 seconds (Warm-up) Chain 3: 0.053882 seconds (Sampling) Chain 3: 0.185741 seconds (Total) Chain 3: Chain 1: Chain 1: Gradient evaluation took 2.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 3.1e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 3.8e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.38 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.8e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.178377 seconds (Warm-up) Chain 1: 0.051505 seconds (Sampling) Chain 1: 0.229882 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.19769 seconds (Warm-up) Chain 2: 0.028853 seconds (Sampling) Chain 2: 0.226543 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.209976 seconds (Warm-up) Chain 3: 0.049889 seconds (Sampling) Chain 3: 0.259865 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.233406 seconds (Warm-up) Chain 4: 0.03065 seconds (Sampling) Chain 4: 0.264056 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 3.1e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 3e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.9e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.29 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 3.3e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.33 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.226122 seconds (Warm-up) Chain 1: 0.031202 seconds (Sampling) Chain 1: 0.257324 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.229103 seconds (Warm-up) Chain 2: 0.028798 seconds (Sampling) Chain 2: 0.257901 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.238441 seconds (Warm-up) Chain 3: 0.03459 seconds (Sampling) Chain 3: 0.273031 seconds (Total) Chain 3: Chain 4: Chain 4: Elapsed Time: 0.228212 seconds (Warm-up) Chain 4: 0.036574 seconds (Sampling) Chain 4: 0.264786 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 3e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.8e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.4e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.24 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.285094 seconds (Warm-up) Chain 1: 0.048246 seconds (Sampling) Chain 1: 0.33334 seconds (Total) Chain 1: Chain 4: Chain 4: Elapsed Time: 0.263814 seconds (Warm-up) Chain 4: 0.034411 seconds (Sampling) Chain 4: 0.298225 seconds (Total) Chain 4: Chain 2: Chain 2: Elapsed Time: 0.305613 seconds (Warm-up) Chain 2: 0.039627 seconds (Sampling) Chain 2: 0.34524 seconds (Total) Chain 2: Chain 3: Chain 3: Elapsed Time: 0.314974 seconds (Warm-up) Chain 3: 0.040995 seconds (Sampling) Chain 3: 0.355969 seconds (Total) Chain 3: Chain 1: Chain 1: Gradient evaluation took 3e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 3e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.3 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 2.7e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.293873 seconds (Warm-up) Chain 1: 0.028447 seconds (Sampling) Chain 1: 0.32232 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.288431 seconds (Warm-up) Chain 3: 0.04518 seconds (Sampling) Chain 3: 0.333611 seconds (Total) Chain 3: Chain 2: Chain 2: Elapsed Time: 0.36752 seconds (Warm-up) Chain 2: 0.027453 seconds (Sampling) Chain 2: 0.394973 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.383786 seconds (Warm-up) Chain 4: 0.032154 seconds (Sampling) Chain 4: 0.41594 seconds (Total) Chain 4: Chain 1: Chain 1: Gradient evaluation took 3.1e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 2.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.7e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 3.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.354637 seconds (Warm-up) Chain 1: 0.027996 seconds (Sampling) Chain 1: 0.382633 seconds (Total) Chain 1: Chain 2: Chain 2: Elapsed Time: 0.339298 seconds (Warm-up) Chain 2: 0.030313 seconds (Sampling) Chain 2: 0.369611 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.319312 seconds (Warm-up) Chain 4: 0.027904 seconds (Sampling) Chain 4: 0.347216 seconds (Total) Chain 4: Chain 3: Chain 3: Elapsed Time: 0.333814 seconds (Warm-up) Chain 3: 0.032747 seconds (Sampling) Chain 3: 0.366561 seconds (Total) Chain 3: Chain 1: Chain 1: Gradient evaluation took 3.8e-05 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.38 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 2: Chain 2: Gradient evaluation took 3.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.37 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 3: Chain 3: Gradient evaluation took 2.6e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.26 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 4: Chain 4: Gradient evaluation took 3.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Chain 1: Elapsed Time: 0.343002 seconds (Warm-up) Chain 1: 0.028223 seconds (Sampling) Chain 1: 0.371225 seconds (Total) Chain 1: Chain 3: Chain 3: Elapsed Time: 0.305501 seconds (Warm-up) Chain 3: 0.027824 seconds (Sampling) Chain 3: 0.333325 seconds (Total) Chain 3: Chain 2: Chain 2: Elapsed Time: 0.358116 seconds (Warm-up) Chain 2: 0.02975 seconds (Sampling) Chain 2: 0.387866 seconds (Total) Chain 2: Chain 4: Chain 4: Elapsed Time: 0.330673 seconds (Warm-up) Chain 4: 0.030407 seconds (Sampling) Chain 4: 0.36108 seconds (Total) Chain 4: Warning messages: 1: There were 14 divergent transitions after warmup. Increasing adapt_delta above 0.95 may help. See http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup 2: Examine the pairs() plot to diagnose sampling problems nSampleEffExp %\u0026gt;% tibble(nWarmup=warmTrial) \u001b[90m# A tibble: 10 x 2\u001b[39m .[,1] [,2] [,3] nWarmup \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;dbl\u0026gt;\u001b[39m\u001b[23m \u001b[3m\u001b[90m\u0026lt;int\u0026gt;\u001b[39m\u001b[23m \u001b[90m 1\u001b[39m \u001b[4m3\u001b[24m063. \u001b[4m1\u001b[24m265. \u001b[4m1\u001b[24m045. 10 \u001b[90m 2\u001b[39m \u001b[4m3\u001b[24m238. \u001b[4m2\u001b[24m909. \u001b[4m3\u001b[24m425. \u001b[4m1\u001b[24m120 \u001b[90m 3\u001b[39m \u001b[4m3\u001b[24m268. \u001b[4m2\u001b[24m949. \u001b[4m2\u001b[24m966. \u001b[4m2\u001b[24m230 \u001b[90m 4\u001b[39m \u001b[4m3\u001b[24m123. \u001b[4m3\u001b[24m257. \u001b[4m3\u001b[24m218. \u001b[4m3\u001b[24m340 \u001b[90m 5\u001b[39m \u001b[4m3\u001b[24m227. \u001b[4m3\u001b[24m449. \u001b[4m3\u001b[24m554. \u001b[4m4\u001b[24m450 \u001b[90m 6\u001b[39m \u001b[4m3\u001b[24m494. \u001b[4m3\u001b[24m743. \u001b[4m3\u001b[24m343. \u001b[4m5\u001b[24m560 \u001b[90m 7\u001b[39m \u001b[4m3\u001b[24m200. \u001b[4m3\u001b[24m012. \u001b[4m2\u001b[24m879. \u001b[4m6\u001b[24m670 \u001b[90m 8\u001b[39m \u001b[4m3\u001b[24m210. \u001b[4m3\u001b[24m207. \u001b[4m3\u001b[24m125. \u001b[4m7\u001b[24m780 \u001b[90m 9\u001b[39m \u001b[4m2\u001b[24m919. \u001b[4m3\u001b[24m329. \u001b[4m3\u001b[24m060. \u001b[4m8\u001b[24m890 \u001b[90m10\u001b[39m \u001b[4m2\u001b[24m951. \u001b[4m3\u001b[24m461. \u001b[4m3\u001b[24m078. \u001b[4m1\u001b[24m\u001b[4m0\u001b[24m000 It is important to note that the divergent transitions are probably why the number of effective samples decrease in the last two rows.\n     Results\nWe can see that the number of effective samples increases almost constantly. This is probably due to correlations in the chain, which are removed during the warmup period.\n  Chapter XI: God Spiked The Integers Easy Questions (Ch11) 11E1 If an event has probability \\(0.35\\), what are the log-odds of this event?\nSolution log(0.35/(1-0.35)) [1] -0.6190392 11E2 If an event has log-odds \\(3.2\\), what is the probability of this event?\nSolution logistic(3.2) [1] 0.9608343 11E3 Suppose that a coefficient in a logistic regression has value \\(1.7\\). What does this imply about the proportional change in odds of the outcome?\nSolution exp(1.7) [1] 5.473947 Note that this is not really the change in the variable, but the proportional odds.\nHOLD 11E4 Why do Poisson regressions sometimes require the use of an offset? Provide an example.\nSolution The Poisson distribution is often understood as a limiting distribution of the Binomial where \\(Î»=np\\) as \\(nââ\\) and \\(pâ0\\). The single parameter thus expresses the expected value, but is often used to encode different time-steps as well. Essentially, the distribution assumes a constant rate in time or space, and thus the change in exposure, is expressed by the offset, which is the logarithm of the exposure.\nFor any case where samples are drawn from populations which have different aggregation time periods but are still within the purview of a Poisson distribution, the offset is a natural way of expressing these.\nTo leverage the example of the book, when constructing a model to account for the fact that one Monastery calculates their averages on a weekly basis, while the other averages by day, this constraint should be modeled by having differing offsets.\nQuestions of Medium Complexity (Ch11) HOLD 11M2 If a coefficient in a Poisson regression has values \\(1.7\\), what does this imply about the change in the outcome?\nSolution exp(1.7) [1] 5.473947 The coefficient in a Poisson regression implies that the proportional change in the count will be ~5.474 when the predictor variable increase by one unit.\nHOLD 11M3 Explain why the logit link is appropriate for a binomial generalized linear model.\nSolution The logit link essentially connects a parameter constrained between zero and one and the real space. The logit function is defined as:\n\\[\\mathrm{logit}(páµ¢)=\\log{\\frac{páµ¢}{1-páµ¢}}\\]\nWhere \\(páµ¢\\) is a probability mass. This link makes sense for a GLM since the predicted value is a probability distribution parameter, and we would like to obtain this from a linear model which spans the entire set of real numbers.\ncurve(logit,from=-0.5,to=1.5)   The link function maps a parameter onto a linear model.\nHOLD 11M4 Explain why the log is appropriate for a Poisson generalized linear model.\nSolution The log function ensures that the parameter cannot take values which are less than zero. This is a natural consequence of the function definition.\ncurve(log,from=-0.5,to=100000)   The log link assumes that the parameter value is the exponentiation of the linear model.\nThis makes sense for a Poisson GLM as the Poisson distribution does not accept negative values.\nHOLD 11M5 What would it imply to use a logit link for the mean of a Poisson generalized linear model? Can you think of a real research problem for which this would make sense?\nSolution We should write this out more explicitly.\nThis implies that the mean Î¼ lies between zero and one. Since the Poisson distribution is defined by a single parameter, this does limit the model outputs. The premise of a Poisson regression problem is that the GLM models a count with an unknown maximum, so it does seem to be a very severe restriction.\nTo my mind this is feasible for constrained problems, where the Poisson distribution is to be followed but only within a particular range for some reason, and when the Binomial (of which the Poisson is a special case), decreases too slowly.\nIt was mentioned on the class forums, that the COVID-19 problem was modeled with a two parameter generalized link function, i.e. \\(\\log{\\frac{p}{S-p}}\\) which essentially constrains the model to have Poisson dynamics but with an output mean between 0 and S.\nHOLD 11M6 State the constraints for which the binomial and Poisson distributions have maximum entropy. Are the constraints different at all for binomial and Poisson? Why or why not?\nSolution The Binomial distribution is defined to be the maximum entropy distributions are:\n Discrete binary outcomes Constant probability (or expectation)  This is defined by the number of outcomes (n) as well as the probability (p). The experiment is essentially reduced to a series of independent and identical Bernoulli trials with only two outcomes. The Poisson distribution is derived as a limiting form of the Binomial, where \\(nââ\\) and \\(pâ0\\). Since this does not change the underlying constraints, this is still a maximum entropy distribution.\nHOLD 11M8 Revisit the data(Kline) islands example. This time drop Hawaii from the sample and refit the models. What changes do you observe?\nSolution data(Kline) kDat\u0026lt;-Kline kDat\u0026lt;-kDat %\u0026gt;% dplyr::mutate(cid=ifelse(contact==\u0026#34;high\u0026#34;,2,1), stdPop=standardize(log(population))) %\u0026gt;% filter(culture!=\u0026#34;Hawaii\u0026#34;) datList\u0026lt;-list( totTools=kDat$total_tools, stdPop=kDat$stdPop, cid=as.integer(kDat$cid) ) We can now fit this.\nm11m10res\u0026lt;-ulam( alist( totTools ~ dpois(lambda), log(lambda)\u0026lt;-a[cid]+b[cid]*stdPop, a[cid] ~ dnorm(3,0.5), b[cid] ~ dnorm(0,0.2) ),data=datList, chains=4, cores=4 ) m11m10res %\u0026gt;% precis(2) mean sd 5.5% 94.5% n_eff Rhat4 a[1] 3.18 0.12 2.99 3.37 1621 1 a[2] 3.61 0.08 3.48 3.73 1962 1 b[1] 0.19 0.13 -0.01 0.39 1639 1 b[2] 0.19 0.16 -0.06 0.44 1830 1 We see that the slopes are now the same, which makes sense since in this data-set Hawaii was the only outlier.\nChapter XII: Monsters and Mixtures Easy Questions (Ch12) HOLD 12E4 Over-dispersion is common in count data. Give an example of a natural process that might produce over-dispersed counts. Can you also give an example of a process that might produce /under-/dispersed counts?\nSolution    Over-dispersion\nOver dispersion is essentially the occurrence of greater variability than accounted for based on the statistical model. The presence of over-dispersion is typically due to heterogeneity in populations. This heterogeneity may arise from simple aggregation issues like in the case considered in the text, of Monasteries which accumulate data weekly or daily, in-spite of following the same Poisson model.\n     Under-dispersion\nUnder dispersion is essentially the occurrence of less variability than accounted for based on the statistical model. The clearest example of under-dispersion is from the draws of an MCMC sampler. The number of effective samples is typically lower than the number of samples, as the data is highly correlated (autocorrelated) as the sampler draws sequential samples. For a count model, if a hidden rate limiting variable exists and has not been accounted for, then the variation in counts is lowered, and will show up as under-dispersion.\n  Hard Questions (Ch12) 12H1 In 2014, a paper was published that was entitle \u0026ldquo;Female hurricanes are deadlier than male hurricanes.\u0026rdquo; As the title suggests, the paper claimed that hurricanes with female names have caused greater loss of life, and the explanation given is that people unconsciously rate female hurricanes as less dangerous and so are less likely to evacuate. Statisticians severely criticized the paper after publication. Here, you\u0026rsquo;ll explore the complete data used in the paper and consider the hypothesis that hurricanes with female names are deadlier. Load the data with:\nlibrary(rethinking) data(Hurricanes) Acquaint yourself with the columns by inspecting the help ?Hurricanes. In this problem, you\u0026rsquo;ll focus on predicting deaths using feminity as a predictor. You can use quap or ulam. Compare the model to an intercept-only Poisson model of deaths. How strong is the association between feminity of name and deaths? Which storms does the model fit (retrodict) well? Which storms does it fit poorly?\nSolution Since I have no understanding of hurricanes except that it is unlikely to have too much of an effect. I will run through some sample priors. Presumably, most hurricanes do not kill over a thousand people. Furthermore, a-priori, I would not like to assume that femininity is positive or negative, so I will instead encode a belief that it shouldn\u0026rsquo;t matter much either way, ergo a Gaussian.\nN\u0026lt;-100 a\u0026lt;-rnorm(N,1,0.5) bF\u0026lt;-rnorm(N,0.5,2) seqF\u0026lt;-seq(from=-2,to=2,length.out=100) plot(NULL,xlim=c(-2,2),ylim=c(0,1000),xlab=\u0026#34;Femininity\u0026#34;,ylab=\u0026#34;deaths\u0026#34;) for(i in 1:N) lines(seqF,exp(a[i]+bF[i]*seqF),col=grau())   This seems to be reasonable to me. It does have a bit of an unreasonable focus on 0, but it does also seem to mostly hug the x-axis in a way indicating my prior belief that it should not matter all that much. There is enough diversity in the priors to allow for stronger trends, but they are by and large unlikely.\nNow we can actually use these in a model.\ndata(Hurricanes) hurDat\u0026lt;-Hurricanes %\u0026gt;% as.data.frame hurDat\u0026lt;-hurDat %\u0026gt;% dplyr::mutate(femStd=standardize(femininity)) datListH\u0026lt;-list(deaths=hurDat$deaths,femStd=hurDat$femStd) m12h1norm\u0026lt;-ulam(alist(deaths ~ dpois(lambda), log(lambda) \u0026lt;- a+bF*femStd, a ~ dnorm(1,0.5), bF ~ dnorm(0.5,2) ),data=datListH, chains=4, cores=4,log_lik = TRUE) SAMPLING FOR MODEL \u0026#39;bd16fb771b491de48a3f8ce09fc68301\u0026#39; NOW (CHAIN 1). SAMPLING FOR MODEL \u0026#39;bd16fb771b491de48a3f8ce09fc68301\u0026#39; NOW (CHAIN 2). Chain 2: Chain 1: Chain Chain 12: : Gradient evaluation took 5.1e-05 secondsGradient evaluation took 3.9e-05 seconds Chain Chain 12: : 1000 transitions using 10 leapfrog steps per transition would take 0.51 seconds.1000 transitions using 10 leapfrog steps per transition would take 0.39 seconds. Chain Chain 12: : Adjust your expectations accordingly!Adjust your expectations accordingly! Chain Chain 12: : Chain Chain 12: : Chain Chain 21: Iteration: 1 / 1000 [ 0%] (Warmup) : Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) SAMPLING FOR MODEL \u0026#39;bd16fb771b491de48a3f8ce09fc68301\u0026#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 4.3e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.43 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) SAMPLING FOR MODEL \u0026#39;bd16fb771b491de48a3f8ce09fc68301\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 3.1e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Iteration: 200 / 1000 [ 20%] (Warmup) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 0.055115 seconds (Warm-up) Chain 1: 0.042775 seconds (Sampling) Chain 1: 0.09789 seconds (Total) Chain 1: Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 0.050636 seconds (Warm-up) Chain 2: 0.049372 seconds (Sampling) Chain 2: 0.100008 seconds (Total) Chain 2: Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 0.056256 seconds (Warm-up) Chain 3: 0.039069 seconds (Sampling) Chain 3: 0.095325 seconds (Total) Chain 3: Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 0.054509 seconds (Warm-up) Chain 4: 0.036572 seconds (Sampling) Chain 4: 0.091081 seconds (Total) Chain 4: m12h1norm %\u0026gt;% precis mean sd 5.5% 94.5% n_eff Rhat4 a 3.00 0.02 2.96 3.04 1334 1 bF 0.24 0.02 0.20 0.28 1361 1 There are several points to be noted:\n The number of effective samples is far lower than the number simulated (4000) The bounds are quite tight for the values  All told, we can see that the model is quite certain of the values, but given the low number of effective samples it would make sense to run this model longer.\nFurthermore, the model infers that from our data, there is a positive correlation (quite a high one) between femininity and deaths.\nThis is best seen by actually visualizing the results.\nm12h1norm %\u0026gt;% pairs   We should check the posterior as well.\nk\u0026lt;-PSIS(m12h1norm,pointwise=TRUE)$k plot(hurDat$femStd,hurDat$deaths,xlab=\u0026#34;Standardized Femininity\u0026#34;,ylab=\u0026#34;Deaths\u0026#34;,col=rangi2,pch=hurDat$female, lwd=2,cex=1+normalize(k)) ## Axis for predictions ns\u0026lt;-500 femininity\u0026lt;-seq(from=min(hurDat$femStd), to=max(hurDat$femStd),length.out = ns) ## Female lambda\u0026lt;-link(m12h1norm,data=data.frame(femStd=femininity)) lmu\u0026lt;-apply(lambda,2,mean) lci\u0026lt;-apply(lambda,2,PI) lines(femininity,lmu,lty=2,lwd=1.5) shade(lci,femininity,xpd=TRUE)   We can see that the model prediction does not actually handle the data very well, in that it is evident the model simply cannot account for the high death rate values. We have plotted the 89% interval as well (the default for PI).\nWe can also inspect the expect PSISk values.\nm12h1norm %\u0026gt;% PSISk %\u0026gt;% summary Some Pareto k values are very high (\u0026gt;1). Set pointwise=TRUE to inspect individual points. Min. 1st Qu. Median Mean 3rd Qu. Max. -0.1800 -0.0500 0.0600 0.1521 0.1500 2.5800 Clearly, there are some points with high leverage.\nFinally we can plot the posterior distribution.\nposterior\u0026lt;-m12h1norm %\u0026gt;% extract.samples fem\u0026lt;-sample(hurDat$femStd,3) for(i in 1:10){ curve(dgamma(x,exp(posterior$a[i]+posterior$bF[i]*(fem[1]))), from=0,to=100, col=\u0026#34;red\u0026#34;,ylab=\u0026#34;Density\u0026#34;,xlab=\u0026#34;Average deaths\u0026#34;,add=ifelse(i==1,FALSE,TRUE)) curve(dgamma(x,exp(posterior$a[i]+posterior$bF[i]*(fem[2]))), from=0,to=100, col=\u0026#34;blue\u0026#34;,add=TRUE) curve(dgamma(x,exp(posterior$a[i]+posterior$bF[i]*(fem[3]))), from=0,to=100, col=\u0026#34;black\u0026#34;,add=TRUE)} legend(\u0026#34;topright\u0026#34;, legend=c(sprintf(\u0026#34;Femininity=%.3f\u0026#34;,fem[1]), sprintf(\u0026#34;Femininity=%.3f\u0026#34;,fem[2]), sprintf(\u0026#34;Femininity=%.3f\u0026#34;,fem[3])), col=c(\u0026#34;red\u0026#34;,\u0026#34;blue\u0026#34;,\u0026#34;black\u0026#34;), pch=19 )   As is to be expected, for each value of femininity, we have one family of gamma distributions.\nHOLD 12H2 Counts are nearly always over-dispersed relative to Poisson. So fit a gamma-Poisson (aka negative-binomial) model to predict deaths using feminity. Show that the over-dispersed model no longer shows as precise a positive association between feminity and deaths, with an $89$% interval that overlaps zero. Can you explain why the association diminished in strength?\nSolution Recall that the gamma-Poisson has two parameters, one for the rate, and the other for the dispersion of rates. Larger values of the dispersion imply that the distribution is more similar to a pure Poisson process. For ensuring meaningful comparisons, we will keep the same priors as before. We will need a scale parameter, but we will postulate a simple exponential prior for that.\ndata(Hurricanes) hurDat\u0026lt;-Hurricanes %\u0026gt;% as.data.frame hurDat\u0026lt;-hurDat %\u0026gt;% dplyr::mutate(femStd=standardize(femininity)) datListH\u0026lt;-list(deaths=hurDat$deaths,femStd=hurDat$femStd) m12h2norm\u0026lt;-ulam(alist(deaths ~ dgampois(lambda,scale), log(lambda) \u0026lt;- a+bF*femStd, a ~ dnorm(1,0.5), bF ~ dnorm(0.5,2), scale ~ dexp(1) ),data=datListH, chains=4, cores=4,log_lik = TRUE) SAMPLING FOR MODEL \u0026#39;5dc94bd836781d34a208695cf643c56c\u0026#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 0.00012 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.2 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: SAMPLING FOR MODEL \u0026#39;5dc94bd836781d34a208695cf643c56c\u0026#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 9.6e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.96 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) SAMPLING FOR MODEL \u0026#39;5dc94bd836781d34a208695cf643c56c\u0026#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 9.1e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.91 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) SAMPLING FOR MODEL \u0026#39;5dc94bd836781d34a208695cf643c56c\u0026#39; NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 8.2e-05 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.82 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 0.119773 seconds (Warm-up) Chain 2: 0.091705 seconds (Sampling) Chain 2: 0.211478 seconds (Total) Chain 2: Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 0.122953 seconds (Warm-up) Chain 4: 0.082244 seconds (Sampling) Chain 4: 0.205197 seconds (Total) Chain 4: Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 0.115457 seconds (Warm-up) Chain 3: 0.114422 seconds (Sampling) Chain 3: 0.229879 seconds (Total) Chain 3: Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 0.110931 seconds (Warm-up) Chain 1: 0.129622 seconds (Sampling) Chain 1: 0.240553 seconds (Total) Chain 1: m12h2norm %\u0026gt;% precis m12h1norm %\u0026gt;% precis mean sd 5.5% 94.5% n_eff Rhat4 a 2.86 0.14 2.64 3.08 1705 1 bF 0.21 0.14 -0.01 0.44 1946 1 scale 0.45 0.06 0.35 0.55 1957 1 mean sd 5.5% 94.5% n_eff Rhat4 a 3.00 0.02 2.96 3.04 1334 1 bF 0.24 0.02 0.20 0.28 1361 1 We note that the effective number of samples in the second model are greater, which implies that this model is less prone to correlations. We can quantify this with the WAIC as well.\nWAIC(m12h2norm) %\u0026gt;% rbind(WAIC(m12h1norm)) %\u0026gt;% tibble(model=c(\u0026#34;Gamma-Poisson\u0026#34;,\u0026#34;Poisson\u0026#34;)) %\u0026gt;% toOrg | WAIC | lppd | penalty | std_err | model | |-----------------+-------------------+------------------+------------------+---------------| | 710.78471929582 | -351.457619486557 | 3.93474016135277 | 34.6128979470592 | Gamma-Poisson | | 4427.5667952452 | -2080.92835360918 | 132.855044013418 | 1009.13483879188 | Poisson | The WAIC values show that the gamma-Poisson model is less likely to over-fit.\nWe would like to see the models together.\nm12h1norm %\u0026gt;% precis(pars=c(\u0026#34;a\u0026#34;,\u0026#34;bF\u0026#34;)) %\u0026gt;% plot(col=\u0026#34;blue\u0026#34;) m12h2norm %\u0026gt;% precis(pars=c(\u0026#34;a\u0026#34;,\u0026#34;bF\u0026#34;)) %\u0026gt;% plot(add=TRUE,col=\u0026#34;red\u0026#34;)   We can see that there is little to no difference in the means, though the intervals seem wider than before. This is more clear in the coeftab plot.\nplot(coeftab(m12h1norm,m12h2norm))   An important consequence of this is that the model is no longer completely sure that there is any effect of femininity on the death count, as can be seen from the wider uncertainty interval, which includes 0.\nWe can also visualize the model with pairs.\npairs(m12h2norm)   k\u0026lt;-PSIS(m12h2norm,pointwise=TRUE)$k plot(hurDat$femStd,hurDat$deaths,xlab=\u0026#34;Standardized Femininity\u0026#34;,ylab=\u0026#34;Deaths\u0026#34;,col=rangi2,pch=hurDat$female, lwd=2,cex=1+normalize(k)) ## Axis for predictions ns\u0026lt;-500 femininity\u0026lt;-seq(from=min(hurDat$femStd),to=max(hurDat$femStd),length.out = ns) ## Gamma Poisson lambda\u0026lt;-link(m12h2norm,data=data.frame(femStd=femininity)) lmu\u0026lt;-apply(lambda,2,mean) lci\u0026lt;-apply(lambda,2,PI) shade(lci,femininity,xpd=TRUE,col=\u0026#34;red\u0026#34;) lines(femininity,lmu,lty=2,lwd=1.5,col=\u0026#34;white\u0026#34;) ## Poisson lambda\u0026lt;-link(m12h1norm,data=data.frame(femStd=femininity)) lmu\u0026lt;-apply(lambda,2,mean) lci\u0026lt;-apply(lambda,2,PI) shade(lci,femininity,xpd=TRUE,col=\u0026#34;blue\u0026#34;) lines(femininity,lmu,lty=2,lwd=1.5,col=\u0026#34;white\u0026#34;)   Clearly, the uncertainty of the newer model is much greater, even though the predictions do not differ much. Unfortunately, both models fail to account for storms with high death counts.\nWe would also like to plot the predicted distributions.\nposterior\u0026lt;-m12h2norm %\u0026gt;% extract.samples fem\u0026lt;-sample(hurDat$femStd,2) for(i in 1:100){ curve(dgamma2(x,exp(posterior$a[i]+posterior$bF[i]*(fem[1])),posterior$scale[i]), from=0,to=100,col=\u0026#34;red\u0026#34;,ylab=\u0026#34;Density\u0026#34;,xlab=\u0026#34;Average deaths\u0026#34;,add=ifelse(i==1,FALSE,TRUE)) curve(dgamma2(x,exp(posterior$a[i]+posterior$bF[i]*(fem[2])),posterior$scale[i]), from=0,to=100,col=\u0026#34;blue\u0026#34;,add=TRUE) } legend(\u0026#34;topright\u0026#34;, legend=c(sprintf(\u0026#34;Femininity=%.3f\u0026#34;,fem[1]), sprintf(\u0026#34;Femininity=%.3f\u0026#34;,fem[2])), col=c(\u0026#34;red\u0026#34;,\u0026#34;blue\u0026#34;), pch=19 )   This clearly has more spread than the previous predictions. By definition, the dispersion term tends to spread the distribution out, with higher values of the dispersion corresponding to a \u0026ldquo;true\u0026rdquo; Poisson distribution.\nA: Colophon To ensure that this document is fully reproducible at a later date, we will record the session info.\ndevtools::session_info() â Session info âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ setting value version R version 4.0.0 (2020-04-24) os Arch Linux system x86_64, linux-gnu ui X11 language (EN) collate en_US.UTF-8 ctype en_US.UTF-8 tz Iceland date 2020-06-21 â Packages âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ package * version date lib source arrayhelpers 1.1-0 2020-02-04 [167] CRAN (R 4.0.0) assertthat 0.2.1 2019-03-21 [34] CRAN (R 4.0.0) backports 1.1.6 2020-04-05 [68] CRAN (R 4.0.0) boot 1.3-24 2019-12-20 [5] CRAN (R 4.0.0) broom 0.5.6 2020-04-20 [67] CRAN (R 4.0.0) callr 3.4.3 2020-03-28 [87] CRAN (R 4.0.0) cellranger 1.1.0 2016-07-27 [55] CRAN (R 4.0.0) cli 2.0.2 2020-02-28 [33] CRAN (R 4.0.0) coda 0.19-3 2019-07-05 [169] CRAN (R 4.0.0) colorspace 1.4-1 2019-03-18 [97] CRAN (R 4.0.0) crayon 1.3.4 2017-09-16 [35] CRAN (R 4.0.0) curl 4.3 2019-12-02 [26] CRAN (R 4.0.0) dagitty * 0.2-2 2016-08-26 [244] CRAN (R 4.0.0) data.table * 1.12.8 2019-12-09 [27] CRAN (R 4.0.0) DBI 1.1.0 2019-12-15 [77] CRAN (R 4.0.0) dbplyr 1.4.3 2020-04-19 [76] CRAN (R 4.0.0) desc 1.2.0 2018-05-01 [84] CRAN (R 4.0.0) devtools * 2.3.0 2020-04-10 [219] CRAN (R 4.0.0) digest 0.6.25 2020-02-23 [42] CRAN (R 4.0.0) dplyr * 0.8.5 2020-03-07 [69] CRAN (R 4.0.0) ellipsis 0.3.0 2019-09-20 [30] CRAN (R 4.0.0) evaluate 0.14 2019-05-28 [82] CRAN (R 4.0.0) fansi 0.4.1 2020-01-08 [36] CRAN (R 4.0.0) forcats * 0.5.0 2020-03-01 [29] CRAN (R 4.0.0) fs 1.4.1 2020-04-04 [109] CRAN (R 4.0.0) generics 0.0.2 2018-11-29 [71] CRAN (R 4.0.0) ggplot2 * 3.3.0 2020-03-05 [78] CRAN (R 4.0.0) glue * 1.4.0 2020-04-03 [37] CRAN (R 4.0.0) gridExtra 2.3 2017-09-09 [123] CRAN (R 4.0.0) gtable 0.3.0 2019-03-25 [79] CRAN (R 4.0.0) haven 2.2.0 2019-11-08 [28] CRAN (R 4.0.0) hms 0.5.3 2020-01-08 [44] CRAN (R 4.0.0) htmltools 0.4.0 2019-10-04 [112] CRAN (R 4.0.0) httr 1.4.1 2019-08-05 [100] CRAN (R 4.0.0) inline 0.3.15 2018-05-18 [162] CRAN (R 4.0.0) jsonlite 1.6.1 2020-02-02 [101] CRAN (R 4.0.0) kableExtra * 1.1.0 2019-03-16 [212] CRAN (R 4.0.0) knitr 1.28 2020-02-06 [113] CRAN (R 4.0.0) latex2exp * 0.4.0 2015-11-30 [211] CRAN (R 4.0.0) lattice 0.20-41 2020-04-02 [6] CRAN (R 4.0.0) lifecycle 0.2.0 2020-03-06 [38] CRAN (R 4.0.0) loo 2.2.0 2019-12-19 [163] CRAN (R 4.0.0) lubridate 1.7.8 2020-04-06 [106] CRAN (R 4.0.0) magrittr 1.5 2014-11-22 [21] CRAN (R 4.0.0) MASS 7.3-51.5 2019-12-20 [7] CRAN (R 4.0.0) matrixStats 0.56.0 2020-03-13 [164] CRAN (R 4.0.0) memoise 1.1.0 2017-04-21 [229] CRAN (R 4.0.0) modelr 0.1.6 2020-02-22 [107] CRAN (R 4.0.0) munsell 0.5.0 2018-06-12 [96] CRAN (R 4.0.0) mvtnorm 1.1-0 2020-02-24 [243] CRAN (R 4.0.0) nlme 3.1-147 2020-04-13 [11] CRAN (R 4.0.0) orgutils * 0.4-1 2017-03-21 [209] CRAN (R 4.0.0) pillar 1.4.3 2019-12-20 [39] CRAN (R 4.0.0) pkgbuild 1.0.6 2019-10-09 [86] CRAN (R 4.0.0) pkgconfig 2.0.3 2019-09-22 [43] CRAN (R 4.0.0) pkgload 1.0.2 2018-10-29 [83] CRAN (R 4.0.0) plyr 1.8.6 2020-03-03 [73] CRAN (R 4.0.0) prettyunits 1.1.1 2020-01-24 [58] CRAN (R 4.0.0) printr * 0.1 2017-05-19 [214] CRAN (R 4.0.0) processx 3.4.2 2020-02-09 [88] CRAN (R 4.0.0) ps 1.3.2 2020-02-13 [89] CRAN (R 4.0.0) purrr * 0.3.4 2020-04-17 [50] CRAN (R 4.0.0) R6 2.4.1 2019-11-12 [48] CRAN (R 4.0.0) Rcpp 1.0.4.6 2020-04-09 [10] CRAN (R 4.0.0) readr * 1.3.1 2018-12-21 [45] CRAN (R 4.0.0) readxl 1.3.1 2019-03-13 [54] CRAN (R 4.0.0) remotes 2.1.1 2020-02-15 [233] CRAN (R 4.0.0) reprex 0.3.0 2019-05-16 [108] CRAN (R 4.0.0) rethinking * 2.01 2020-06-06 [242] local rlang 0.4.5 2020-03-01 [31] CRAN (R 4.0.0) rmarkdown 2.1 2020-01-20 [110] CRAN (R 4.0.0) rprojroot 1.3-2 2018-01-03 [85] CRAN (R 4.0.0) rstan * 2.19.3 2020-02-11 [161] CRAN (R 4.0.0) rstudioapi 0.11 2020-02-07 [91] CRAN (R 4.0.0) rvest 0.3.5 2019-11-08 [120] CRAN (R 4.0.0) scales 1.1.0 2019-11-18 [93] CRAN (R 4.0.0) sessioninfo 1.1.1 2018-11-05 [231] CRAN (R 4.0.0) shape 1.4.4 2018-02-07 [193] CRAN (R 4.0.0) StanHeaders * 2.19.2 2020-02-11 [165] CRAN (R 4.0.0) stringi 1.4.6 2020-02-17 [52] CRAN (R 4.0.0) stringr * 1.4.0 2019-02-10 [74] CRAN (R 4.0.0) svUnit 1.0.3 2020-04-20 [168] CRAN (R 4.0.0) testthat 2.3.2 2020-03-02 [81] CRAN (R 4.0.0) textutils 0.2-0 2020-01-07 [210] CRAN (R 4.0.0) tibble * 3.0.1 2020-04-20 [32] CRAN (R 4.0.0) tidybayes * 2.0.3 2020-04-04 [166] CRAN (R 4.0.0) tidybayes.rethinking * 2.0.3.9000 2020-06-07 [246] local tidyr * 1.0.2 2020-01-24 [75] CRAN (R 4.0.0) tidyselect 1.0.0 2020-01-27 [49] CRAN (R 4.0.0) tidyverse * 1.3.0 2019-11-21 [66] CRAN (R 4.0.0) usethis * 1.6.0 2020-04-09 [238] CRAN (R 4.0.0) V8 3.0.2 2020-03-14 [245] CRAN (R 4.0.0) vctrs 0.2.4 2020-03-10 [41] CRAN (R 4.0.0) viridisLite 0.3.0 2018-02-01 [99] CRAN (R 4.0.0) webshot 0.5.2 2019-11-22 [213] CRAN (R 4.0.0) withr 2.2.0 2020-04-20 [90] CRAN (R 4.0.0) xfun 0.13 2020-04-13 [116] CRAN (R 4.0.0) xml2 1.3.2 2020-04-23 [122] CRAN (R 4.0.0) [1] /nix/store/xzd8h53xkyvfm3kvj5ab6znp685wi04w-r-car-3.0-7/library [2] /nix/store/mhr8zw9bmxarc3n821b83i0gz2j9zlrq-r-abind-1.4-5/library [3] /nix/store/hp86nhr0787vib3l8mkw0gf9nxwb45im-r-carData-3.0-3/library [4] /nix/store/vhw7s2h5ds6sp110z2yvilchv8j9jch5-r-lme4-1.1-23/library [5] /nix/store/987n8g0zy9sjvfvnsck1bkkcknw05yvb-r-boot-1.3-24/library [6] /nix/store/jxxxxyz4c1k5g3drd35gsrbjdg028d11-r-lattice-0.20-41/library [7] /nix/store/q9zfm5h53m8rd08xcsdcwaag31k4z1pf-r-MASS-7.3-51.5/library [8] /nix/store/kjkm50sr144yvrhl5axfgykbiy13pbmg-r-Matrix-1.2-18/library [9] /nix/store/8786z5lgy8h3akfjgj3yq5yq4s17rhjy-r-minqa-1.2.4/library [10] /nix/store/93wv3j0z1nzqp6fjsm9v7v8bf8d1xkm2-r-Rcpp-1.0.4.6/library [11] /nix/store/akfw6zsmawmz8lmjkww0rnqrazm4mqp0-r-nlme-3.1-147/library [12] /nix/store/rxs0d9bbn8qhw7wmkfb21yk5abp6lpq1-r-nloptr-1.2.2.1/library [13] /nix/store/8n0jfiqn4275i58qgld0dv8zdaihdzrk-r-RcppEigen-0.3.3.7.0/library [14] /nix/store/8vxrma33rhc96260zsi1jiw7dy3v2mm4-r-statmod-1.4.34/library [15] /nix/store/2y46pb5x9lh8m0hdmzajnx7sc1bk9ihl-r-maptools-0.9-9/library [16] /nix/store/iwf9nxx1v883wlv0p88q947hpz5lhfh7-r-foreign-0.8-78/library [17] /nix/store/rl9sjqply6rjbnz5k792ghm62ybv76px-r-sp-1.4-1/library [18] /nix/store/ws4bkzyv2vj5pyn1hgwyy6nlp48arz0n-r-mgcv-1.8-31/library [19] /nix/store/307dzxrmnqk4p86560a02r64x1fhhmxb-r-nnet-7.3-13/library [20] /nix/store/g2zpzkdb9hzkza1wpcbrk58119v1wyaf-r-pbkrtest-0.4-8.6/library [21] /nix/store/p0l503fr8960vld70w6ilmknxs5qwq77-r-magrittr-1.5/library [22] /nix/store/rmjpcaw3i446kwnjgcxcaid0yac36cj2-r-quantreg-5.55/library [23] /nix/store/10mzmnvc5jjgk2xzasia522pk60a30qz-r-MatrixModels-0.4-1/library [24] /nix/store/6qwdzvmnnmhjwdnvg2zmvv6wafd1vf91-r-SparseM-1.78/library [25] /nix/store/aa9c39a3yiqkh1h7pbngjlbr7czvc7yi-r-rio-0.5.16/library [26] /nix/store/2fx4vqlybgwp5rhhy6pssqx7h1a927fn-r-curl-4.3/library [27] /nix/store/k4m3fn1kqvvvn8y33kd57gq49hr3ar8y-r-data.table-1.12.8/library [28] /nix/store/651hfjylqzmsf565wyx474vyjny771gy-r-haven-2.2.0/library [29] /nix/store/a3rnz28irmqvmj8axj5x5j1am2c3gzs4-r-forcats-0.5.0/library [30] /nix/store/j8v4gzib137q2cml31hvvfkrc0f60pp5-r-ellipsis-0.3.0/library [31] /nix/store/xaswqlnamf4k8vwx0x3wav3l0x60sag0-r-rlang-0.4.5/library [32] /nix/store/dqm3xpix2jwhhhr67s6fgrwbw7hizap7-r-tibble-3.0.1/library [33] /nix/store/v7xfsq6d97wpn6m0hjrac78w5xawbr8a-r-cli-2.0.2/library [34] /nix/store/fikjasr98klhk9cf44x4lhi57vh3pmkg-r-assertthat-0.2.1/library [35] /nix/store/3fya6cd38vsqdj0gjb7bcsy00sirlyw1-r-crayon-1.3.4/library [36] /nix/store/payqi9bwh216rwhaq07jgc26l4fv1zsb-r-fansi-0.4.1/library [37] /nix/store/h6a61ghws7yrdxlg412xl1im37z5r28i-r-glue-1.4.0/library [38] /nix/store/y8mjbia1wbnq26dkigr0p3xxwrbzsc2r-r-lifecycle-0.2.0/library [39] /nix/store/kwaghh12cnifgvcbvlv2anx0hd5f4ild-r-pillar-1.4.3/library [40] /nix/store/k1phn8j10nni7gzvcgp0vc25dby6bb77-r-utf8-1.1.4/library [41] /nix/store/k3b77y8v7zsshpp1ccs8jwk2i2g4rm9a-r-vctrs-0.2.4/library [42] /nix/store/iibjmbh7vj0d0bfafz98yn29ymg43gkw-r-digest-0.6.25/library [43] /nix/store/aqsj4k3pgm80qk4jjg7sh3ac28n6alv0-r-pkgconfig-2.0.3/library [44] /nix/store/i7c5v8s4hd9rlqah3bbvy06yywjqwdgk-r-hms-0.5.3/library [45] /nix/store/2fyrk58cmcbrxid66rbwjli7y114lvrm-r-readr-1.3.1/library [46] /nix/store/163xq2g5nblqgh7qhvzb6mvgg6qdrirj-r-BH-1.72.0-3/library [47] /nix/store/dr27b6k49prwgrjs0v30b6mf5lxa36pk-r-clipr-0.7.0/library [48] /nix/store/bghvqg9mcaj2jkbwpy0di6c563v24acz-r-R6-2.4.1/library [49] /nix/store/nq8jdq7nlg9xns4xpgyj6sqv8p4ny1wz-r-tidyselect-1.0.0/library [50] /nix/store/zlwhf75qld7vmwx3d4bdws057ld4mqbp-r-purrr-0.3.4/library [51] /nix/store/0gbmmnbpqlr69l573ymkcx8154fvlaca-r-openxlsx-4.1.4/library [52] /nix/store/1m1q4rmwx56dvx9rdzfsfq0jpw3hw0yx-r-stringi-1.4.6/library [53] /nix/store/mhy5vnvbsl4q7dcinwx3vqlyywxphbfd-r-zip-2.0.4/library [54] /nix/store/88sp7f7q577i6l5jjanqiv5ak6nv5357-r-readxl-1.3.1/library [55] /nix/store/6q9zwivzalhmzdracc8ma932wirq8rl5-r-cellranger-1.1.0/library [56] /nix/store/jh2n6k2ancdzqych5ix8n4rq9w514qq9-r-rematch-1.0.1/library [57] /nix/store/22xjqikqd6q556absb5224sbx6q0kp0c-r-progress-1.2.2/library [58] /nix/store/9vp32wa1qvv6lkq6p70qlli5whrxzfbi-r-prettyunits-1.1.1/library [59] /nix/store/r9rhqb6fsk75shihmb7nagqb51pqwp0y-r-class-7.3-16/library [60] /nix/store/z1kad071y43wij1ml9lpghh7jbimmcli-r-cluster-2.1.0/library [61] /nix/store/i8wr965caf6j1rxs2dsvpzhlh4hyyb4y-r-codetools-0.2-16/library [62] /nix/store/8iglq3zr68a39hzswvzxqi2ffhpw9p51-r-KernSmooth-2.23-16/library [63] /nix/store/n3k50zv40i40drpdf8npbmy2y08gkr6w-r-rpart-4.1-15/library [64] /nix/store/b4r6adzcvpm8ivflsmis7ja7q4r5hkjy-r-spatial-7.3-11/library [65] /nix/store/zqg6hmrncl8ax3vn7z5drf4csddwnhcx-r-survival-3.1-12/library [66] /nix/store/4anrihkx11h8mzb269xdyi84yp5v7grl-r-tidyverse-1.3.0/library [67] /nix/store/945haq0w8nfm9ib7r0nfngn5lk2i15ix-r-broom-0.5.6/library [68] /nix/store/52viqxzrmxl7dk0zji293g5b0b9grwh8-r-backports-1.1.6/library [69] /nix/store/zp1k42sw2glqy51w4hnzsjs8rgi8xzx2-r-dplyr-0.8.5/library [70] /nix/store/mkjd98mnshch2pwnj6h31czclqdaph3f-r-plogr-0.2.0/library [71] /nix/store/kflrzax6y5pwfqwzgfvqz433a3q3hnhn-r-generics-0.0.2/library [72] /nix/store/xi1n5h5w17c33y6ax3dfhg2hgzjl9bxz-r-reshape2-1.4.4/library [73] /nix/store/vn63z92zkpbaxmmhzpb6mq2fvg0xa26h-r-plyr-1.8.6/library [74] /nix/store/wmpyxss67bj44rin7hlnr9qabx66p5hj-r-stringr-1.4.0/library [75] /nix/store/330qbgbvllwz3h0i2qidrlk50y0mbgph-r-tidyr-1.0.2/library [76] /nix/store/cx3x4pqb65l1mhss65780hbzv9jdrzl6-r-dbplyr-1.4.3/library [77] /nix/store/gsj49bp3hpw9jlli3894c49amddryqsq-r-DBI-1.1.0/library [78] /nix/store/kvymhwp4gac0343c2yi1qvdpavx4gdn2-r-ggplot2-3.3.0/library [79] /nix/store/knv51jvpairvibrkkq48b6f1l2pa1cv8-r-gtable-0.3.0/library [80] /nix/store/158dx0ddv20ikwag2860nlg9p3hbh1zc-r-isoband-0.2.1/library [81] /nix/store/fprs9rp1jlhxzj7fp6l79akyf8k3p7zd-r-testthat-2.3.2/library [82] /nix/store/0pmlnkyn0ir3k9bvxihi1r06jyl64w3i-r-evaluate-0.14/library [83] /nix/store/7210bjjqn5cjndxn5isnd4vip00xhkhy-r-pkgload-1.0.2/library [84] /nix/store/9a12ybd74b7dns40gcfs061wv7913qjy-r-desc-1.2.0/library [85] /nix/store/na9pb1apa787zp7vvyz1kzym0ywjwbj0-r-rprojroot-1.3-2/library [86] /nix/store/pa2n7bh61qxyarn5i2ynd62k6knb1np1-r-pkgbuild-1.0.6/library [87] /nix/store/1hxm1m7h4272zxk9bpsaq46mvnl0dbss-r-callr-3.4.3/library [88] /nix/store/bigvyk6ipglbiil93zkf442nv4y3xa1x-r-processx-3.4.2/library [89] /nix/store/370lr0wf7qlq0m72xnmasg2iahkp2n52-r-ps-1.3.2/library [90] /nix/store/rr72q61d8mkd42zc5fhcd2rqjghvc141-r-withr-2.2.0/library [91] /nix/store/9gw77p7fmz89fa8wi1d9rvril6hd4sxy-r-rstudioapi-0.11/library [92] /nix/store/9x4v4pbrgmykbz2801h77yz2l0nmm5nb-r-praise-1.0.0/library [93] /nix/store/pf8ssb0dliw5bzsncl227agc8przb7ic-r-scales-1.1.0/library [94] /nix/store/095z4wgjrxn63ixvyzrj1fm1rdv6ci95-r-farver-2.0.3/library [95] /nix/store/5aczj4s7i9prf5i32ik5ac5baqvjwdb1-r-labeling-0.3/library [96] /nix/store/wch26phipzz9gxd4vbr4fynh7v28349j-r-munsell-0.5.0/library [97] /nix/store/3w8fh756mszhsjx5fwgwydcpn8vkwady-r-colorspace-1.4-1/library [98] /nix/store/8cmaj81v2vm4f8p59ylbnsby8adkbmhd-r-RColorBrewer-1.1-2/library [99] /nix/store/h4x4ygax7gpz6f0c2v0xacr62080qwb8-r-viridisLite-0.3.0/library [100] /nix/store/qhx0i2nn5syb6vygdn8fdxgl7k56yj81-r-httr-1.4.1/library [101] /nix/store/lxnb4aniv02i4jhdvz02aaql1kznbpxb-r-jsonlite-1.6.1/library [102] /nix/store/13dcry4gad3vfwqzqb0ii4n06ybrxybr-r-mime-0.9/library [103] /nix/store/2can5l8gscc92a3bqlak8hfcg96v5hvf-r-openssl-1.4.1/library [104] /nix/store/piwsgxdz5w2ak8c6fcq0lc978qbxwdp1-r-askpass-1.1/library [105] /nix/store/3sj5h6dwa1l27d2hvdchclygk0pgffsr-r-sys-3.3/library [106] /nix/store/2z0p88g0c03gigl2ip60dlsfkdv1k30h-r-lubridate-1.7.8/library [107] /nix/store/1pkmj8nqjg2iinrkg2w0zkwq0ldc01za-r-modelr-0.1.6/library [108] /nix/store/bswkzvn8lczwbyw3y7n0p0qp2q472s0g-r-reprex-0.3.0/library [109] /nix/store/yid22gad8z49q52d225vfba2m4cgj2lx-r-fs-1.4.1/library [110] /nix/store/d185qiqaplm5br9fk1pf29y0srlabw83-r-rmarkdown-2.1/library [111] /nix/store/iszqviydsdj31c3ww095ndqy1ld3cibs-r-base64enc-0.1-3/library [112] /nix/store/i89wfw4cr0fz3wbd7cg44fk4dwz8b6h1-r-htmltools-0.4.0/library [113] /nix/store/qrl28laqwmhpwg3dpcf4nca8alv0px0g-r-knitr-1.28/library [114] /nix/store/jffaxc4a3bbf2g6ip0gdcya73dmg53mb-r-highr-0.8/library [115] /nix/store/717srph13qpnbzmgsvhx25q8pl51ivpj-r-markdown-1.1/library [116] /nix/store/mxqmyq3ybdfyc6p0anhfy2kfw0iz5k4n-r-xfun-0.13/library [117] /nix/store/b8g6hadva0359l6j1aq4dbvxlqf1acxc-r-yaml-2.2.1/library [118] /nix/store/rrl05vpv7cw58zi0k9ykm7m4rjb9gjv3-r-tinytex-0.22/library [119] /nix/store/2ziq8nzah6xy3dgmxgim9h2wszz1f89f-r-whisker-0.4/library [120] /nix/store/540wbw4p1g2qmnmbfk0rhvwvfnf657sj-r-rvest-0.3.5/library [121] /nix/store/n3prn77gd9sf3z4whqp86kghr55bf5w8-r-selectr-0.4-2/library [122] /nix/store/gv28yjk5isnglq087y7767xw64qa40cw-r-xml2-1.3.2/library [123] /nix/store/693czdcvkp6glyir0mi8cqvdc643whvc-r-gridExtra-2.3/library [124] /nix/store/3sykinp7lyy70dgzr0fxjb195nw864dv-r-future-1.17.0/library [125] /nix/store/bqi2l53jfxncks6diy0hr34bw8f86rvk-r-globals-0.12.5/library [126] /nix/store/dydyl209klklzh69w9q89f2dym9xycnp-r-listenv-0.8.0/library [127] /nix/store/lni0bi36r4swldkx7g4hql7gfz9b121b-r-gganimate-1.0.5/library [128] /nix/store/hh92jxs79kx7vxrxr6j6vin1icscl4k7-r-tweenr-1.0.1/library [129] /nix/store/0npx3srjnqgh7bib80xscjqvfyzjvimq-r-GGally-1.5.0/library [130] /nix/store/x5nzxklmacj6l162g7kg6ln9p25r3f17-r-reshape-0.8.8/library [131] /nix/store/q29z7ckdyhfmg1zlzrrg1nrm36ax756j-r-ggfortify-0.4.9/library [132] /nix/store/1rvm1w9iv2c5n22p4drbjq8lr9wa2q2r-r-cowplot-1.0.0/library [133] /nix/store/rp8jhnasaw1vbv5ny5zx0mw30zgcp796-r-ggrepel-0.8.2/library [134] /nix/store/wb7y931mm8nsj7w9xin83bvbaq8wvi4d-r-corrplot-0.84/library [135] /nix/store/gdzcqivfvgdrsz247v5kmnnw1v6p9c1p-r-rpart.plot-3.0.8/library [136] /nix/store/6yqg37108r0v22476cm2kv0536wyilki-r-caret-6.0-86/library [137] /nix/store/6fjdgcwgisiqz451sg5fszxnn9z8vxg6-r-foreach-1.5.0/library [138] /nix/store/c3ph5i341gk7jdinrkkqf6y631xli424-r-iterators-1.0.12/library [139] /nix/store/sjm1rxshlpakpxbrynfhsjnnp1sjvc3r-r-ModelMetrics-1.2.2.2/library [140] /nix/store/vgk4m131d057xglmrrb9rijhzdr2qhhp-r-pROC-1.16.2/library [141] /nix/store/bv1kvy1wc2jx3v55rzn3cg2qjbv7r8zp-r-recipes-0.1.10/library [142] /nix/store/001h42q4za01gli7avjxhq7shpv73n9k-r-gower-0.2.1/library [143] /nix/store/ssffpl6ydffqyn9phscnccxnj71chnzg-r-ipred-0.9-9/library [144] /nix/store/baliqip8m6p0ylqhqcgqak29d8ghral1-r-prodlim-2019.11.13/library [145] /nix/store/j4n2wsv98asw83qiffg6a74dymk8r2hl-r-lava-1.6.7/library [146] /nix/store/hf5wq5kpsf6p9slglq5iav09s4by0y5i-r-numDeriv-2016.8-1.1/library [147] /nix/store/s58hm38078mx4gyqffvv09zn575xn648-r-SQUAREM-2020.2/library [148] /nix/store/g63ydzd53586pvr9kdgk8kf5szq5f2bc-r-timeDate-3043.102/library [149] /nix/store/0jkarmlf1kjv4g8a3svkc7jfarpp77ny-r-mlr3-0.2.0/library [150] /nix/store/g1m0n1w7by213v773iyn7vnxr25pkf56-r-checkmate-2.0.0/library [151] /nix/store/fc2ah8cz2sj6j2jk7zldvjmsjn1yakpn-r-lgr-0.3.4/library [152] /nix/store/0i2hs088j1s0a6i61124my6vnzq8l27m-r-mlbench-2.1-1/library [153] /nix/store/vzcs6k21pqrli3ispqnvj5qwkv14srf5-r-mlr3measures-0.1.3/library [154] /nix/store/h2yqqaia46bk3b1d1a7bq35zf09p1b1a-r-mlr3misc-0.2.0/library [155] /nix/store/c9mrkc928cmsvvnib50l0jb8lsz59nyk-r-paradox-0.2.0/library [156] /nix/store/vqpbdipi4p4advl2vxrn765mmgcrabvk-r-uuid-0.1-4/library [157] /nix/store/xpclynxnfq4h9218gk4y62nmgyyga6zl-r-mlr3viz-0.1.1/library [158] /nix/store/7w6pld5vir3p9bybay67kq0qwl0gnx17-r-mlr3learners-0.2.0/library [159] /nix/store/ca50rp6ha5s51qmhb1gjlj62r19xfzxs-r-mlr3pipelines-0.1.3/library [160] /nix/store/9hg0xap4pir64mhbgq8r8cgrfjn8aiz5-r-mlr3filters-0.2.0/library [161] /nix/store/jgqcmfix0xxm3y90m8wy3xkgmqf2b996-r-rstan-2.19.3/library [162] /nix/store/mvv1gjyrrpvf47fn7a8x722wdwrf5azk-r-inline-0.3.15/library [163] /nix/store/zmkw51x4w4d1v1awcws0xihj4hnxfr09-r-loo-2.2.0/library [164] /nix/store/30xxalfwzxl05bbfvj5sy8k3ysys6z5y-r-matrixStats-0.56.0/library [165] /nix/store/fhkww2l0izx87bjnf0pl9ydl1wprp0xv-r-StanHeaders-2.19.2/library [166] /nix/store/aflck5pzxa8ym5q1dxchx5hisfmfghkr-r-tidybayes-2.0.3/library [167] /nix/store/jhlbhiv4fg0wsbxwjz8igc4hcg79vw94-r-arrayhelpers-1.1-0/library [168] /nix/store/fv089zrnvicnavbi08hnzqpi9g1z4inj-r-svUnit-1.0.3/library [169] /nix/store/xci2rgjizx1fyb33818jx5s1bgn8v8k6-r-coda-0.19-3/library [170] /nix/store/dch9asd38yldz0sdn8nsgk9ivjrkbhva-r-HDInterval-0.2.0/library [171] /nix/store/rs8dri2m5cqdmpiw187rvl4yhjn0jg2v-r-e1071-1.7-3/library [172] /nix/store/qs1zyh3sbvccgnqjzas3br6pak399zgc-r-pvclust-2.2-0/library [173] /nix/store/sh3zxvdazp7rkjn1iczrag1h2358ifm1-r-forecast-8.12/library [174] /nix/store/h67kaxqr2ppdpyj77wg5hm684jypznji-r-fracdiff-1.5-1/library [175] /nix/store/fh0z465ligbpqyam5l1fwiijc7334kbk-r-lmtest-0.9-37/library [176] /nix/store/0lnsbwfg0axr80h137q52pa50cllbjpf-r-zoo-1.8-7/library [177] /nix/store/p7k4s3ivf83dp2kcxr1cr0wlc1rfk6jx-r-RcppArmadillo-0.9.860.2.0/library [178] /nix/store/ssnxv5x6zid2w11v8k5yvnyxis6n1qfk-r-tseries-0.10-47/library [179] /nix/store/zrbskjwaz0bzz4v76j044d771m24g6h8-r-quadprog-1.5-8/library [180] /nix/store/2x3w5sjalrfm6hf1dxd951j8y94nh765-r-quantmod-0.4.17/library [181] /nix/store/7g55xshf49s9379ijm1zi1qnh1vbsifq-r-TTR-0.23-6/library [182] /nix/store/6ilyzph46q6ijyanq4p7f0ccyni0d7j0-r-xts-0.12-0/library [183] /nix/store/17xhqghcnqha7pwbf98dxsq1729slqd5-r-urca-1.3-0/library [184] /nix/store/722lyn0k8y27pj1alik56r4vpjnncd9z-r-swdft-1.0.0/library [185] /nix/store/36n0zgy10fsqcq76n0qmdwjxrwh7pn9n-r-xgboost-1.0.0.2/library [186] /nix/store/ac0ar7lf75qx84xsdjv6j02rkdgnhybz-r-ranger-0.12.1/library [187] /nix/store/i1ighkq42x10dirqmzgbx2mhbnz1ynkb-r-DALEX-1.2.0/library [188] /nix/store/28fqnhsfng1bkphl0wvr7lg5y3p6va46-r-iBreakDown-1.2.0/library [189] /nix/store/dpym77x9qc2ksr4mwjm3pb9ar1kvwhdl-r-ingredients-1.2.0/library [190] /nix/store/sp4d281w6dpr31as0xdjqizdx8hhb01q-r-DALEXtra-0.2.1/library [191] /nix/store/ckhp9kpmjcs0wxb113pxn25c2wip2d0n-r-ggdendro-0.1-20/library [192] /nix/store/f3k7dxj1dsmqri2gn0svq4c9fvvl9g7q-r-glmnet-3.0-2/library [193] /nix/store/l6ccj6mwkqybjvh6dr8qzalygp0i7jyb-r-shape-1.4.4/library [194] /nix/store/418mqfwlafh6984xld8lzhl7rv29qw68-r-reticulate-1.15/library [195] /nix/store/qwh982mgxd2mzrgbjk14irqbasywa1jk-r-rappdirs-0.3.1/library [196] /nix/store/6sxs76abll23c6372h6nf101wi8fcr4c-r-FactoMineR-2.3/library [197] /nix/store/39d2va10ydgyzddwr07xwdx11fwk191i-r-ellipse-0.4.1/library [198] /nix/store/4lxym5nxdn8hb7l8a566n5vg9paqcfi2-r-flashClust-1.01-2/library [199] /nix/store/wp161zbjjs41fq4kn4k3m244c7b8l2l2-r-leaps-3.1/library [200] /nix/store/irghsaplrpb3hg3y7j831bbklf2cqs6d-r-scatterplot3d-0.3-41/library [201] /nix/store/09ahkf50g1q9isxanbdykqgcdrp8mxl1-r-factoextra-1.0.7/library [202] /nix/store/zi9bq7amsgc6w2x7fvd62g9qxz69vjfm-r-dendextend-1.13.4/library [203] /nix/store/wcywb7ydglzlxg57jf354x31nmy63923-r-viridis-0.5.1/library [204] /nix/store/pvnpg4vdvv93pmwrlgmy51ihrb68j55f-r-ggpubr-0.2.5/library [205] /nix/store/qpapsc4l9pylzfhc72ha9d82hcbac41z-r-ggsci-2.9/library [206] /nix/store/h0zg4x3bmkc82ggx8h4q595ffckcqgx5-r-ggsignif-0.6.0/library [207] /nix/store/vn5svgbf8vsgv8iy8fdzlj0izp279q15-r-polynom-1.4-0/library [208] /nix/store/mc1mlsjx5h3gc8nkl7jlpd4vg145nk1z-r-lindia-0.9/library [209] /nix/store/z1k4c8lhabp9niwfg1xylg58pf99ld9r-r-orgutils-0.4-1/library [210] /nix/store/ybj4538v74wx4f1l064m0qn589vyjmzg-r-textutils-0.2-0/library [211] /nix/store/hhm5j0wvzjc0bfd53170bw8w7mij2wnh-r-latex2exp-0.4.0/library [212] /nix/store/njlv5mkxgjyx3x8p984nr84dwa2v1iqp-r-kableExtra-1.1.0/library [213] /nix/store/lf2sb84ylh259m421ljbj731a4prjhsl-r-webshot-0.5.2/library [214] /nix/store/n6b8ap54b78h8l70kyx9nvayp44rnfzf-r-printr-0.1/library [215] /nix/store/02g1v6d3ly8zylpckigwk6w3l1mx2i9d-r-microbenchmark-1.4-7/library [216] /nix/store/ri6qm0fp8cyx2qnysxjv2wsk0nndl1x9-r-webchem-0.5.0/library [217] /nix/store/cg95rqc1gmaqxf5kxja3cz8m5w4vl76l-r-RCurl-1.98-1.2/library [218] /nix/store/qbpinv148778fzdz8372x8gp34hspvy1-r-bitops-1.0-6/library [219] /nix/store/1g0lbrx6si76k282sxr9cj0mgknrw0lx-r-devtools-2.3.0/library [220] /nix/store/hnvww0128czlx6w8aipjn0zs7nvmvak9-r-covr-3.5.0/library [221] /nix/store/p4nv59przmb14sxi49jwqarkv0l40jsp-r-rex-1.2.0/library [222] /nix/store/vnysmc3vkgkligwah1zh9l4sahr533a8-r-lazyeval-0.2.2/library [223] /nix/store/d638w33ahybsa3sqr52fafvxs2b7w9x3-r-DT-0.13/library [224] /nix/store/35nqc34wy2nhd9bl7lv6wriw0l3cghsw-r-crosstalk-1.1.0.1/library [225] /nix/store/03838i63x5irvgmpgwj67ah0wi56k9d7-r-htmlwidgets-1.5.1/library [226] /nix/store/l4640jxlsjzqhw63c18fziar5vc0xyhk-r-promises-1.1.0/library [227] /nix/store/rxrb8p3dxzsg10v7yqaq5pi3y3gk6nqh-r-later-1.0.0/library [228] /nix/store/giprr32bl6k18b9n4qjckpf102flarly-r-git2r-0.26.1/library [229] /nix/store/bbkpkf44b13ig1pkz7af32kw5dzp12vb-r-memoise-1.1.0/library [230] /nix/store/m31vzssnfzapsapl7f8v4m15003lcc8r-r-rcmdcheck-1.3.3/library [231] /nix/store/hbiylknhxsin9hp9zaa6dwc2c9ai1mqx-r-sessioninfo-1.1.1/library [232] /nix/store/8vwlbx3s345gjccrkiqa6h1bm9wq4s9q-r-xopen-1.0.0/library [233] /nix/store/mjnwnlv60cn56ap0rrzvrkqlh5qisszx-r-remotes-2.1.1/library [234] /nix/store/1rq4zyzqymml7cc11q89rl5g514ml9na-r-roxygen2-7.1.0/library [235] /nix/store/2658mrn1hpkq0fv629rvags91qg65pbn-r-brew-1.0-6/library [236] /nix/store/nvjalws9lzva4pd4nz1z2131xsb9b5p6-r-commonmark-1.7/library [237] /nix/store/qx900vivd9s2zjrxc6868s92ljfwj5dv-r-rversions-2.0.1/library [238] /nix/store/1drg446wilq5fjnxkglxnnv8pbp1hllg-r-usethis-1.6.0/library [239] /nix/store/p3f3wa41d304zbs5cwvw7vy4j17zd6nq-r-gh-1.1.0/library [240] /nix/store/769g7jh93da8w15ad0wsbn2aqziwwx56-r-ini-0.3.1/library [241] /nix/store/p7kifw1l6z2zg68a71s4sdbfj8gdmnv5-r-rematch2-2.1.1/library [242] /nix/store/6zhdqip9ld9vl6pvifqcf4gsqy2f5wix-r-rethinking/library [243] /nix/store/496p28klmflihdkc83c8p1cywg85mgk4-r-mvtnorm-1.1-0/library [244] /nix/store/xb1zn7ab4nka7h1vm678ginzfwg4w9wf-r-dagitty-0.2-2/library [245] /nix/store/3zj4dkjbdwgf3mdsl9nf9jkicpz1nwgc-r-V8-3.0.2/library [246] /nix/store/qiqsh62w69b5xgj2i4wjamibzxxji0mf-r-tidybayes.rethinking/library [247] /nix/store/4j6byy1klyk4hm2k6g3657682cf3wxcj-R-4.0.0/lib/R/library   Summer of 2020 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/sr2-ch9-ch11-ch12/","tags":["solutions","R","SR2"],"title":"SR2 :: Solutions for Chapters {9,11,12}"},{"categories":["programming"],"contents":" A post on working with transient TeX templates in orgmode without modifying global configurations. This will also serve as a rudimentary introduction to TeX in orgmode.\n Background The sad reality of working in a field dominated by institutional actors which do not care for recognizing software development as a skill is that there are often a lot of ugly LaTeX templates1. In particular, often Universities have arbitrary LaTeX templates from the the dark days of 2010 something, which include gratuitous usage of say, natbib instead of biblatex. In other situations, .cls files define separate document classes which are not covered by the orgmode defaults and need to be accounted for.\nStandard methods Essentially for the exporter, the document is broken into2:\n document_class This cannot be changed arbitrarily and has to be a valid element of org-latex-classes preamble This section of the document is essentially everything before \\begin{document} and after \\documentclass{...} body The rest of the document  We will briefly cover the standard methods of entering TeX in each of these sections, in reverse order since that is the direction in which the intuitive aspect decreases.\nIn-Body TeX The method of writing TeX in orgmode for the document involves simply writing TeX directly, or wrapping the TeX markup in an export TeX block for font locking3. Essentially, for a document snippet:\n% #+BEGIN_SRC latex :exports code \\begin{align} \\pi(x) \u0026amp;= \\sum_{n=1}^{\\infty}\\frac{\\mu(n)}{n}\\Pi(x^{\\frac{1}{n}}) \\\\ \u0026amp;= \\Pi(x) -\\frac{1}{2}\\Pi(x^{\\frac{1}{2}}) - \\frac{1}{3}\\Pi(x^{\\frac{1}{3}}) - \\frac{1}{5}\\Pi(x^{\\frac{1}{5}}) + \\frac{1}{6} \\Pi(x^{\\frac{1}{6}}) -\\cdots, \\end{align} % #+END_SRC Which will actually be rendered in a real document of course4:\n\\begin{align} \\pi(x) \u0026amp;= \\sum_{n=1}^{\\infty}\\frac{\\mu(n)}{n}\\Pi(x^{\\frac{1}{n}}) \\\\\\\n\u0026amp;= \\Pi(x) -\\frac{1}{2}\\Pi(x^{\\frac{1}{2}}) - \\frac{1}{3}\\Pi(x^{\\frac{1}{3}}) - \\frac{1}{5}\\Pi(x^{\\frac{1}{5}}) + \\frac{1}{6} \\Pi(x^{\\frac{1}{6}}) -\\cdots, \\end{align}\nThere is also the inline form of writing LaTeX with @@\\sin{x}@@ which is essentially \\(\\sin{x}\\).\nPreamble The main use of the preamble is to either add classes or modify class options for loaded packages like geometry. Essentially, for orgmode, anything prefixed with #+LATEX_HEADER: gets inserted in the preamble.\n#+LATEX_HEADER: \\usepackage{amssymb,amsmath,MnSymbol} #+LATEX_HEADER: \\usepackage{unicode-math} #+LATEX_HEADER: \\usepackage{mathtools} For larger documents, this gets quite annoying for loading packages. We will demonstrate a more aesthetically pleasant form later in this post.\nLaTeX classes Working with document classes is the least intuitive of all TeX manipulations, because for some reason, #+LATEX_CLASS: only accepts values defined in org-latex-classes.\nThe standard approach to extending the orgmode TeX backend is to add lines like the following in init.el or, in my case5, config.org:\n(add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;koma-article\u0026#34; \u0026#34;\\\\documentclass{scrartcl}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) This is alright for often used classes like the koma-â family of LaTeX document-classes, but it is hardly ideal for one-off TeX templates which are meant for say, grant proposals6.\nElisp to the rescue The core idea is quite simple.\n Since orgmode files are literate documents, and emacs is self-documenting and completely programmable, it should be possible to execute code to deterministically set the state of emacs before exporting the document to TeX.\n Practically this has a few moving parts. In the following sections, assume that we have a .cls file which defines a document-class foo with a bunch of packages which conflict with our global configuration.\nAdding Document Classes Instead of adding the code snippet to our global configuration, we will now add it to the document directly with the comments indicating the appropriate environment.\n;; #+BEGIN_SRC emacs-lisp :exports none :results none :eval always (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;foo\u0026#34; \u0026#34;\\\\documentclass{foo}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) ;; #+END_SRC Where the header arguments simply ensure that the code and result do not show up in the document, and that the chunk is always evaluated by org-babel.\nEnsuring Purity Since we want to stick to an external template defined in foo and no other packages we will need to clear the defaults we lovingly set globally for our convenience.\n;; #+BEGIN_SRC emacs-lisp :exports none :results none :eval always (setq org-latex-packages-alist \u0026#39;nil) ;; #+END_SRC Pretty Packages For packages we really would like to add, we can now leverage the elisp code instead of the ugly #+LATEX_HEADER: lines.\n;; #+BEGIN_SRC emacs-lisp :exports none :results none :eval always (setq org-latex-default-packages-alist \u0026#39;((\u0026#34;utf8\u0026#34; \u0026#34;inputenc\u0026#34; t) (\u0026#34;normalem\u0026#34; \u0026#34;ulem\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;mathtools\u0026#34; t) )) ;; #+END_SRC Note that for setting options, we will still need to use the #+LATEX_HEADER: syntax.\nAutomating With Hooks At this stage, we have a chunk of elisp we can manually evaluate with org-babel before exporting with org-latex-export-to-pdf or org-latex-export-to-latex. However, this can get old quickly, so we will instead have a before-save-hook to do this for us.\n# Local Variables: # before-save-hook: org-babel-execute-buffer # End: Bonus Hook In my own configuration, I have a function defined for an after-save-hook which generates the TeX file without having me deal with it. For a per-file configuration of this, or globally, the elisp is:\n(defun haozeke/org-save-and-export-latex () (if (eq major-mode \u0026#39;org-mode) (org-latex-export-to-latex))) This indirection is required to call the function as a hook. Now this can be used as:\n# Local Variables: # after-save-hook: haozeke/org-save-and-export-latex # End: Conclusions The entire file would look something like this (the elisp can be anywhere in the orgmode file):\n;; #+BEGIN_SRC emacs-lisp :exports none :results none :eval always (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;foo\u0026#34; \u0026#34;\\\\documentclass{foo}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (setq org-latex-packages-alist \u0026#39;nil) (setq org-latex-default-packages-alist \u0026#39;((\u0026#34;utf8\u0026#34; \u0026#34;inputenc\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;minted\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;rotating\u0026#34; nil) (\u0026#34;normalem\u0026#34; \u0026#34;ulem\u0026#34; t) (\u0026#34;\u0026#34; \u0026#34;mathtools\u0026#34; t) )) ;; #+END_SRC #+TITLE: Something #+AUTHOR: Rohit Goswami #+OPTIONS: toc:nil \\n:nil #+STARTUP: fninline #+LATEX_COMPILER: xelatex #+LATEX_CLASS: foo #+LATEX_HEADER: \\setlength\\parindent{0pt} #+LATEX_HEADER: \\addbibresource{whatever.bib} Blah blah document $\\sin{x}$ stuff # Local Variables: # before-save-hook: org-babel-execute-buffer # after-save-hook: haozeke/org-save-and-export-latex # End: This method could be extended to essentially resetting all emacs variables on a per-file basis (without file-local-variables and dir-local-variables) or to potentially execute any elisp to make emacs do things, though I cannot really think of another realistic use-case. The method presented here is really general enough to work with any arbitrary LaTeX .cls file or other draconian measures.\n  Of course there are more issues stemming from this toxic practice, but that\u0026rsquo;s for another rant \u0026#x21a9;\u0026#xfe0e;\n For more on document structure in TeX read the wikibook \u0026#x21a9;\u0026#xfe0e;\n Or syntax highlighting for most people \u0026#x21a9;\u0026#xfe0e;\n Props to anyone who recognizes that formula \u0026#x21a9;\u0026#xfe0e;\n I use doom-emacs with my own literate configuration \u0026#x21a9;\u0026#xfe0e;\n I haven\u0026rsquo;t seen a grant proposal template I\u0026rsquo;d like to store for later, ever \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/org-arb-tex/","tags":["tools","emacs","workflow","orgmode"],"title":"Temporary LaTeX Documents with Orgmode"},{"categories":["programming"],"contents":" Setup details are described here, and the meta-post about these solutions is here.\n Materials The summmer course1 is based off of the second edition of Statistical Rethinking by Richard McElreath. This post covers the following exercise questions:\n Chapter 5  E{1,2,3,4} M{1,2,3,5}   Chapter 6  E{1,2,3,4} M{1,2,3}   Chapter 7  E{1,2,3,4} M{1,2,3,4,5,6}    Packages A colophon with details is provided at the end, but the following packages and theme parameters are used throughout.\nlibsUsed\u0026lt;-c(\u0026#34;tidyverse\u0026#34;,\u0026#34;tidybayes\u0026#34;,\u0026#34;orgutils\u0026#34;,\u0026#34;dagitty\u0026#34;, \u0026#34;rethinking\u0026#34;,\u0026#34;tidybayes.rethinking\u0026#34;, \u0026#34;ggplot2\u0026#34;,\u0026#34;kableExtra\u0026#34;,\u0026#34;dplyr\u0026#34;,\u0026#34;glue\u0026#34;, \u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;printr\u0026#34;,\u0026#34;devtools\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)); theme_set(theme_grey(base_size=24)) Chapter V: The Many Variables \u0026amp; The Spurious Waffles Easy Questions (Ch5) 5E1 Which of the linear models below are multiple linear regressions?\n \\(Î¼áµ¢=Î±+Î²xáµ¢\\) \\(Î¼áµ¢=Î²âxáµ¢+Î²_{z}záµ¢\\) \\(Î¼áµ¢=Î±+Î²(xáµ¢-záµ¢)\\) \\(Î¼áµ¢=Î±+Î²âxáµ¢+Î²_{z}záµ¢\\)  Solution A multiple regression problem is one with more than one predictor and corresponding coefficients in an additive (hence \u0026ldquo;linear\u0026rdquo;) manner. By this logic, we can analyze the options as follows:\n Has one predictor variable, \\(x\\) thus is not a multiple regression Is a multiple linear regression since there are two independent variables, \\(x\\) and \\(z\\) Is not a multiple regression model, since only the difference of \\(x\\) and \\(z\\) enters the model (with slope \\(\\beta\\)) This is a multiple linear regression problem, since there are two predictor variables \\(x\\) and \\(z\\)  Thus options two and four are correct.\n5E2 Write down a multiple regression to evaluate the claim: Animal diversity is linearly related to latitude, but only after controlling for plant diversity. You just need to write down the model definition.\nSolution Without any further information, we can simply write a model for diversity as:\n\\[D_{A}\\sim\\mathrm{Log-Normal}(Î¼áµ¢,Ï)\\] \\[Î¼áµ¢=Î±+Î²_{L}Láµ¢+Î²_{D_P}D_{Páµ¢}\\]\nWhere:\n \\(D_{A}\\) is the animal diversity \\(D_{P}\\) is the plant diversity \\(L\\) is the latitude  We have used a log-normal distribution for the animal diversity, since negative values for diversity are meaningless. This arises from the understanding that the diversity is on an ordinal scale with classes. The linear model posits a linear model which has two predictors, the latitude and plant diversity. Thus this model allows for \u0026ldquo;control\u0026rdquo; of the plant diversity.\nFurther details would be relegated to the choice of priors instead of the model.\n5E3 Write down a multiple regression to evaluate the claim: Neither amount of funding nor size of laboratory is by itself a good predictor of time to PhD degree; but together these variables are both positively associated with time to degree. Write down the model definition and indicate which side of zero each slope parameter should be on.\nSolution Without considering priors, we would like to write a linear model with two variables, funding and the lab size. To allow for extensions later regarding the type of funding, we will use \u0026ldquo;money\u0026rdquo; and \u0026ldquo;time\u0026rdquo; as inputs for the model. Again, since the time to a PhD cannot be negative, we will posit a log-normal distribution.\n\\[Táµ¢â¼\\mathrm{Log-Normal}(Î¼áµ¢,Ï)\\] \\[Î¼áµ¢=Î±+Î²_{M}M_{i}+Î²_{S}Sáµ¢\\]\nWhere:\n \\(Táµ¢\\) is the time to completion \\(M\\) corresponds to money \\(S\\) corresponds to the size of the lab  Since we are told that the variables considered jointly have a positive association with the time, we note that the slope parameters for both should be positive.\n5E4 Suppose you have a single categorical predictor with 4 levels (unique values), labeled A,B,C and D. Let \\(Aáµ¢\\) be an indicator variable that is \\(1\\) where case \\(i\\) is in category A. Also suppose \\(Báµ¢\\), \\(Cáµ¢\\) and \\(Dáµ¢\\) for the other categories. Now which of the following linear models are inferentially equivalent ways to include the categorical variable in a regression? Models are inferentially equivalent when it\u0026rsquo;s possible to compute one posterior distribution from the posterior distribution of another model.\n \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{B}Báµ¢+Î²_{D}Dáµ¢\\) \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{B}Báµ¢+Î²_{C}Cáµ¢+Î²_{D}Dáµ¢\\) \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{C}Cáµ¢+Î²_{D}Dáµ¢\\) \\(Î¼áµ¢=Î±_{A}Aáµ¢+Î±_{B}Báµ¢+Î±_{C}Cáµ¢+Î±_{D}Dáµ¢\\) \\(Î¼áµ¢=Î±(1-Báµ¢-Cáµ¢-Dáµ¢)+Î±_{B}Báµ¢+Î±_{C}Cáµ¢+Î±_{D}Dáµ¢\\)  Solution Without the priors, it is difficult to infer much from these models. For the rest of the answer to make sense, we can assume indifferent priors, and enough data to overwhelm our priors (i.e., they are weakly informative).\nAll the models listed have an intercept term, and several variables. We will therefore only consider the number of independent variables and their nature.\n   Model Variables     (1) \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{B}Báµ¢+Î²_{D}Dáµ¢\\) 4   (2) \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{B}Báµ¢+Î²_{C}Cáµ¢+Î²_{D}Dáµ¢\\) 5   (3) \\(Î¼áµ¢=Î±+Î²_{A}Aáµ¢+Î²_{C}Cáµ¢+Î²_{D}Dáµ¢\\) 4   (4) \\(Î¼áµ¢=Î±_{A}Aáµ¢+Î±_{B}Báµ¢+Î±_{C}Cáµ¢+Î±_{D}Dáµ¢\\) 4   (5) \\(Î¼áµ¢=Î±(1-Báµ¢-Cáµ¢-Dáµ¢)+Î±_{B}Báµ¢+Î±_{C}Cáµ¢+Î±_{D}Dáµ¢\\) 4    Thus we can infer that of the models, after fitting, only option two will have inferences which cannot be computed from the others.\nQuestions of Medium Complexity (Ch5) HOLD 5M1 Invent your own example of a spurious correlation. An outcome variable should be correlated with both predictor variables. But when both predictors are entered in the same model, the correlation between the outcome and one of the predictors should mostly vanish (or at least be greatly reduced).\nSolution For this example, consider the total potential energy of a molecular system. We will recall that this can be written as follows: \\[ E_{total}=E_{electrostatics}+E_{1B}+E_{2B} + \\cdots\\] Where the \\(B\\) terms indicate the correction terms. When predicting the total energy, if the electrostatic energy is a function of the atomic descriptors, and is entered in a model, then it masks the effect of the correction terms which also rely on the atomic descriptors. This means that correction terms to the total energy can also be thought of as a correction to the electrostatics, thus following the pattern of the divorce rate and waffles example in the chapter.\nTo put this is more context, let us introduce more explicit variables.\n\\[ E_{T}=E_{Elec}(\\theta)+E_{1B}(\\theta)+E_{2B}(\\theta)+\\cdots\\]\nIn this setting it is clear to see that the masking of variables is artificially induced.\nAnother possible example is from textcite:wainerMostDangerousEquation, where the utility of having smaller schools is a function of school size and the average number of achievements. The school size also affects the average number of achievements, as well as the actual utility. This then implies that there is a spurious correlation which does not exist when the variances are taken into account.\nHOLD 5M2 Invent your own example of a masked relationship. An outcome variable should be correlated with both predictor variables, but in opposite directions. And the two predictor variables should be correlated with one another.\nSolution Let us consider a simple case of student completion rate based on the influences of college tuition and faculty members. Assuming that college tuition is negatively correlated, and the number of faculty is positively correlated. However, since there are more wealthy people who can afford college, a chosen sample may show a spurious where examining either variable shows a weak correlation with completion rate, due to the positive association in the wealthy population.\nIt is important to note that masked relationships usually arise when the population is incorrectly sampled.\n5M3 It is sometimes observed that the best predictor of fire risk is the presence of firefighters-States and localities with many firefighters also have more fires. Presumably firefighters do not cause fires. Nevertheless, this is not a spurious correlation. Instead fires cause firefighters. Consider the same reversal of causal inferences in the context of the divorce and marriage data. How might a high divorce rate cause a higher marriage rate? Can you think of a way to evaluate this relationship, using multiple regression?\nSolution The example given simply allows for the inference that areas with a higher incidence of fires do tend to allocated more money and resources to prevent them, hence the observed larger number of firefighters. Similarly, a reversal of the divorce and marriage data might be focused on the possibility that divorcees tend to get married more often than other singles. However, to understand this further, more categorical variables would be required, though this information might also be best represented by a time series of life events. We can posit the following:\n\\[M\\sim\\mathrm{Normal}(Î¼áµ¢,Ï)\\] \\[Î¼áµ¢=Î±+Î²_{L}Láµ¢+Î²_{R}Ráµ¢\\]\nWhere:\n \\(M\\) is the marriage rate \\(L\\) is the probability of being married based on \u0026ldquo;love\u0026rdquo; \\(R\\) is the variable accounting for remarriage  5M5 One way to reason through multiple causation hypotheses is to imagine detailed mechanisms through which predictor variables may influence outcomes. For example, it is sometimes argued that the price of gasoline (predictor variable) is positively associated with lower obesity rates (outcome variable). However, there are at least two important mechanisms by which the price of gas could reduce obesity. First, it could lead to less driving and therefore more exercise. Second, it could lead to less driving, which leads to less eating out, which leads to less consumption of huge restaurant meals. Can you outline one or more multiple regressions that address these two mechanisms? Assume you can have any predictor data you need.\nSolution We adopt the following notation:\n \\(P\\) is price (predictor) \\(O\\) is obesity (outcome) \\(D\\) is for driving \\(E\\) for eating out \\(E_{x}\\) for exercise  Let us try to put this in the form of a DAG.\ndag5m5\u0026lt;- dagitty(\u0026#34;dag{ P -\u0026gt; D -\u0026gt; E -\u0026gt; O P -\u0026gt; D -\u0026gt; Ex -\u0026gt; O }\u0026#34;) dag5m5 %\u0026gt;% graphLayout %\u0026gt;% plot   We should note that it seems straightforward, but it is nice to check as well.\ndag5m5 %\u0026gt;% adjustmentSets(exposure=\u0026#34;P\u0026#34;,outcome=\u0026#34;O\u0026#34;) %\u0026gt;% print {} Now we can start working our way through the set of regressions by the most basic walk through the DAG.\n   Path One\n \\(D(P)\\) decreases \\(E_{x}(D)\\) increases \\(O(E_{x})\\) decreases       Path Two\n \\(D(P)\\) decreases \\(E(D)\\) decreases \\(O(E)\\) decreases    Chapter VI: The Haunted DAG \u0026amp; The Causal Terror Easy Questions (Ch6) 6E1 List three mechanisms by which multiple regression can produce false inferences about causal effects.\nSolution As per chapter five and six, we have three mechanisms:\n Confounding Where there exists an additional variable which influences exposure and outcome values Multicollinearity Strong associations between two or more predictor variables, which will cause the posterior distribution to suggest that none of variables are associated with the outcome even if they all actually are Post-treatment variables This is a form of included variable bias Collider Bias Conditioning on collider variables creates statistical but not causal associations between its causes  HOLD 6E2 For one of the mechanisms in the previous problem, provide an example of your choice, perhaps from your own research.\nSolution One of the core tenets of the field of computational chemistry is the act of fitting empirical potential models to more accurate potential data (or even experiments).\n Multicollinearity When dealing with decreasing effects, then using strongly correlated variables (like distance and effective distance measures like centeroid densities) cause the overall model to suggest that none of the measures are useful Post-treatment variables Often while finding minima and saddle points on a potential energy surface, adding information of the existing minima values will impede training a model which actually fits to the whole potential energy surface instead of being concentrated around the known minima  6E3 List the four elemental confounds. Can you explain the conditional dependencies of each?\nSolution The four elemental confounds are enumerated in Figure 1.\n\n  Figure 1: The four elemental confounds\n  In symbolic notation, we can express this as:\n   Confound Symbolic Form Conditional Independencies     Forks \\(XâZâY\\) \\(Yâ«« X\\vert Z\\)   Pipes \\(X â Z â Y\\) \\(Yâ«« X\\vert Z\\)   Colliders \\(XâZâY\\) \\(Y \\notâ«« X\\vert Z\\)   Descendants See Figure 1 Weakly conditions on parent    6E4 How is a biased sample like conditioning on a collider? Think of the example at the open of the chapter.\nSolution Recall that the biased sample in the introduction to the chapter was:\n It seems like the most newsworthy scientific studies are the least trustworthy. The more likely it is to kill you, if true, the less likely it is to be true. The more boring the topic, the more rigorous the results. How could this widely believed negative correlation exist? There doesnât seem to be any reason for studies of topics that people care about to produce less reliable results. Maybe popular topics attract more and worse researchers, like flies drawn to the smell of honey?\n Note that this can also be expressed as a collider in a causal DAG as:\n\\[\\mathrm{newsworthiness}â\\mathrm{acceptance}â\\mathrm{trustworthiness}\\]\nThe idea is that a proposal will be accepted if either the newsworthiness or the trustworthiness is high. There is thus on average a negative association between these criteria among the selected set of proposals.\nIn essence the association in the sub-samples is not the same as the total sample, and this causes wrong inferences on the total sample set, when conditioning on collider variables.\nQuestions of Medium Complexity (Ch6) 6M1 Modify the DAG on page \\(186\\) to include the variable \\(V\\), an unobserved cause of \\(C\\) and \\(Y:C\\gets V \\to Y\\). Reanalyze the DAG. How many paths connect \\(X\\) to \\(Y\\)? Which must be closed? Which variables should you condition on now?\nSolution Let us outline this DAG.\ndag6m1\u0026lt;- dagitty(\u0026#34;dag{ U [unobserved] V [unobserved] X -\u0026gt; Y X \u0026lt;- U -\u0026gt; B \u0026lt;- C -\u0026gt; Y U \u0026lt;- A -\u0026gt; C C \u0026lt;- V -\u0026gt; Y }\u0026#34;) coordinates(dag6m1)\u0026lt;-list( x=c(X=0,Y=2,U=0,A=1,B=1,C=2,V=2.5), y=c(X=2,Y=2,U=1,A=0.2,B=1.5,C=1,V=1.5) ) We can visualize this with:\ndag6m1 %\u0026gt;% drawdag   The paths between \\(X\\) and \\(Y\\) are:\n \\(XâY\\) \\(XâUâAâCâY\\) \\(XâUâAâCâVâY\\) \\(XâUâBâCâY\\) \\(XâUâBâCâVâY\\)  We can leverage dagitty to check which paths should be closed.\ndag6m1 %\u0026gt;% adjustmentSets(exposure=\u0026#34;X\u0026#34;,outcome=\u0026#34;Y\u0026#34;) %\u0026gt;% print { A } Logically, conditioning on \\(A\\) to close non-causal paths makes sense as it consistent with the understanding that only (1) is a causal path, and the rest will confound paths.\n6M2 Sometimes in order to avoid multicollinearity, people inspect pairwise correlations among predictors before including them in a model. This is a bad procedure, because what matters is the conditional association, not the association before the variables are included in the model. To highlight this, consider the DAG \\(X\\to Z\\to Y\\). Simulate data from this DAG so that the correlation between \\(X\\) and \\(Z\\) is very large. Then include both in a model prediction \\(Y\\). Do you observe any multicollinearity? Why or why not? What is different from the legs example in the chapter?\nSolution The DAG under consideration is: \\[ X\\to Z\\to Y \\] We will simulate data first.\nN\u0026lt;-5000 X\u0026lt;-N %\u0026gt;% rnorm(mean=0,sd=1) Z\u0026lt;-N %\u0026gt;% rnorm(mean=X,sd=0.5) Y\u0026lt;-N %\u0026gt;% rnorm(mean=Z,sd=1) cor(X,Z) %\u0026gt;% print [1] 0.9987166 The variables \\(X\\) and \\(Z\\) are highly correlated. We can check with a regression model for this.\nm6m2\u0026lt;-quap( alist( Y ~ dnorm(mu,sigma), mu\u0026lt;-a+bX*X+bZ*Z, c(a,bX,bZ)~dnorm(0,1), sigma~dexp(1) ), data=list(X=X,Y=Y,Z=Z) ) The regression fit is essentially.\nm6m2 %\u0026gt;% precis mean sd 5.5% 94.5% a -0.01 0.01 -0.03 0.01 bX 0.06 0.03 0.00 0.11 bZ 0.95 0.03 0.90 1.00 sigma 1.02 0.01 1.00 1.04 The fit shows how \\(X\\) is not a useful variable, due to the addition of \\(Z\\), which is a post-treatment variable, and thus should not have been included. In effect, we also realize from this that multicollinearity is a data-driven property, and has no interpretation outside specific model instances.\n6M3 Learning to analyze DAGs requires practice. For each of the four DAGs below, state which variables, if any, you must adjust for (condition on) to estimate the total causal influence of \\(X\\) on \\(Y\\).\n  Solution We can leverage the dagitty package as well to figure out which variables should be conditioned on.\ndag6m3a\u0026lt;- dagitty(\u0026#34;dag{ X -\u0026gt; Y X \u0026lt;- Z -\u0026gt; Y X \u0026lt;- Z \u0026lt;- A -\u0026gt; Y }\u0026#34;) dag6m3b\u0026lt;- dagitty(\u0026#34;dag{ X -\u0026gt; Y X -\u0026gt; Z -\u0026gt; Y X -\u0026gt; Z \u0026lt;- A -\u0026gt; Y }\u0026#34;) dag6m3c\u0026lt;- dagitty(\u0026#34;dag{ X -\u0026gt; Y X -\u0026gt; Z \u0026lt;- Y X \u0026lt;- A -\u0026gt; Z \u0026lt;- Y }\u0026#34;) dag6m3d\u0026lt;- dagitty(\u0026#34;dag{ X -\u0026gt; Y X -\u0026gt; Z -\u0026gt; Y X \u0026lt;- A -\u0026gt; Z -\u0026gt; Y }\u0026#34;) dag6m3a %\u0026gt;% adjustmentSets(exposure=\u0026#34;X\u0026#34;,outcome=\u0026#34;Y\u0026#34;) %\u0026gt;% print dag6m3b %\u0026gt;% adjustmentSets(exposure=\u0026#34;X\u0026#34;,outcome=\u0026#34;Y\u0026#34;) %\u0026gt;% print dag6m3c %\u0026gt;% adjustmentSets(exposure=\u0026#34;X\u0026#34;,outcome=\u0026#34;Y\u0026#34;) %\u0026gt;% print dag6m3d %\u0026gt;% adjustmentSets(exposure=\u0026#34;X\u0026#34;,outcome=\u0026#34;Y\u0026#34;) %\u0026gt;% print { Z } {} {} { A } Clearly the upper left and lower right DAGs need to be conditioned on Z and A respectively to close non-causal paths.\nWe can further rationalize this as follows:\n Upper Left \\(X\\gets Z\\to Y\\) and \\(X\\gets Z \\gets A \\to Y\\) are open, non-causal paths which need to be closed Upper Right \\(Z\\) is a collider which ensures that only causal paths are open Lower Left There is a collider \\(Z\\) which ensures that the non-causal paths are closed Lower Right This figure is more complicated, so we will consider all the paths, i.e. \\(X \\to Y\\), \\(X \\to Z \\to Y\\), \\(X\\gets A \\to Z\\to Y\\), and we clearly need to condition on either \\(A\\) or \\(Z\\). \\(Z\\) is also part of a causal path, so only \\(A\\) is to be conditioned on  A more canonical way to do this is to enumerate all paths for every option, but dagitty is more elegant.\ndag6m3d %\u0026gt;% graphLayout %\u0026gt;% plot Chapter VII: Ulysses\u0026rsquo; Compass Easy Questions (Ch7) HOLD 7E1 State the three motivating criteria that define information entropy. Try to express each in your own words.\nSolution The motivating criteria for defining informational entropy or \u0026ldquo;uncertainity\u0026rdquo; are:\n Continuity It is preferable to have a continuous function to define our informational criteria, since we can always discretize a continuous function (by binning) later, but a discrete function does not have a full range of values which can correspond to all the possible models. As a metric then, it is preferable to have a minimum and maximum bound, but define it such that it is continuous for representing arbitrary models Positive and Monotonic The monotonicity constraint is simply to ensure that as the number of events increases, given no other changes in the system, the uncertainity will increase. Since the function is already continuous, the incerasing nature is really by construction. It should be noted that a monotonously decreasing function would also satisfy the motivating criteria, but will change the interpretation completely Additivity As mentioned for continuity, it is possible always to bin continuous functions or discretize it. Similarly, it is desirable to keep the amount of uncertainity constant and add or subtract values to redefine categories  7E2 Suppose a coin is weighted such that, when it is tossed and lands on a table, it comes up heads \\(70%\\) of the time. What is the entropy of this coin?\nSolution We can simulate this system easily.\np\u0026lt;-c(0.7,0.3) -sum(p*log(p)) %\u0026gt;% print [1] 0.6108643 7E3 Suppose a four-sided die is loaded such that, when tossed onto a table, it shows \u0026ldquo;1\u0026rdquo; \\(20%\\), \u0026ldquo;2\u0026rdquo;, \\(25%\\), and \u0026ldquo;4\u0026rdquo; \\(30%\\) of the time. What is the entropy of this die?\nSolution p\u0026lt;-c(0.2,0.25,0.25,0.3) -sum(p*log(p)) %\u0026gt;% print [1] 1.376227 7E4 Suppose another four-sided die is loaded such that it never shows \u0026ldquo;4\u0026rdquo;. The other three sides show equally often. What is the entropy of this die?\nSolution We will not consider impossible events in our simulation.\np\u0026lt;- c(1/3,1/3,1/3) -sum(p*log(p)) %\u0026gt;% print [1] 1.098612 Questions of Medium Complexity (Ch7) HOLD 7M1 Write down and compare the definitions of AIC and WAIC. Which of these criteria is most general? Which assumptions are required to transform the more general criterion into a less general one?\nSolution We know that AIC or \u0026ldquo;Akaike Information Criterion\u0026rdquo; is defined as:\nWhere \\(k\\) is the number of parameters in the model.\nThe WAIC or \u0026ldquo;Widely Applicable Information Criterion\u0026rdquo; is given by: \\[\\mathrm{WAIC}=-2\\left(\\sum_{i}\\log\\Pr(y_{i})-\\sum_{i}V(y_{i})\\right)\\]\nWAIC is more general than the AIC. WAIC and AIC will be approximately equivalent when the priors are effectively flat or when there is enough data to render the priors redundant. This is because the WAIC makes no assumptions about the shape of the posterior, while AIC is an approximation depending on:\n A flat prior (or one overwhelmed by the likelihood) A posterior distribution which is approximately a multivariate Gaussian Sample size \\(N\\) with more parameters (\\(p\\))  Furthermore, we note that the AIC simply estimates that the penalty term is twice the number of parameters, while the WAIC fits uses the lppd or the sum of variances of each log-likelihood.\nHOLD 7M2 Explain the difference between model selection and model comparison. What information is lost under model selection?\nSolution Model selection involves choosing one model over the others. Ideally this occurs after appropriate model comparision. However, the chapter does mention that it is common to use heuristics like \u0026ldquo;stargazing\u0026rdquo; which uses frequentist tools to estimate which variables are important, then choose a model (or causal salad)a which has the highest number of significant variables.\nModel comparision in theory should be based off entropic measures for the information used. The models should be trained on the same data-set for the metrics to be meaningful.\nModel selection loses information regarding the uncertainity quantifications of the models which do not necessarily have the (relatively) optimal values of the metric used for comparision. This is important, especially since models which are parameterized for prediction, often perform better without being useful for causal analysis.\n7M3 When comparing models with an information criterion, why must all models be fit to exactly the same observations? What would happen to the information criterion values, if the models were fit to different numbers of observations? Perform some experiments, if you are not sure.\nSolution When using an information criterion, it is important to understand that different values define different \u0026ldquo;small worlds\u0026rdquo;.\nThis is why when working on gauging the information criterion, which work on the basis of the accumulated deviance values, having a varying number of training values will effectively be comparing apples and oranges. Each training data-set essentially fits one model, and comparing models trained on different data-sets (even subsets of the same data) will not lead to a fundamentally sound comparison.\nWe also know that in general, fewer data-points will have fewer deviance terms, and therefore artificially seem to be better.\nWe will prove this with an artificial data-set.\nySmallDat \u0026lt;- rnorm(100) yLargeDat \u0026lt;- rnorm(1000) m7m3S \u0026lt;- quap( alist( y ~ dnorm(mu,1), mu ~ dnorm(0,sigma) ), data=list(y=ySmallDat,sigma=1) ) m7m3L \u0026lt;- quap( alist( y ~ dnorm(mu,1), mu ~ dnorm(0,sigma) ),data=list(y=yLargeDat,sigma=1) ) WAIC(m7m3S) %\u0026gt;% rbind(WAIC(m7m3L)) %\u0026gt;% mutate(numSamples=c(100,1000)) %\u0026gt;% toOrg    WAIC lppd penalty std_err numSamples     278.876677095335 -138.576629006818 0.861709540849766 11.1055429875975 100   2898.5831283182 -1448.20174278015 1.08982137894866 49.5298847525459 1000    We see that apparently, the model with fewer data-points is superior, but from the discussion above, as well as by construction, we know that the models are the same, so the effect is clearly spurious, and caused by training on different data-sets.\n7M4 What happens to the effective number of parameters as measured by PSIS or WAIC, as a prior becomes more concentrated? Why? Perform some experiments, if you are not sure.\nSolution Since a strength of a prior is directly related to the process of regularization, it is clear that as a prior becomes more concentrated, the model tends to be more critical of new data, and therefore the effective number of parameters will drop proportionately. Another approach to the same problem is to understand that the prior encodes our previous beliefs which in effect represents additional data which the model a-priori has been trained with.\nWe can test this simply by re-using the models we defined for 7M3.\nyDat \u0026lt;- rnorm(5) sigL\u0026lt;-1000 sigS\u0026lt;-1 m7m4S \u0026lt;- quap( alist( y ~ dnorm(mu,1), mu ~ dnorm(0,sigma) ), data=list(y=yDat,sigma=sigS) ) m7m4L \u0026lt;- quap( alist( y ~ dnorm(mu,1), mu ~ dnorm(0,sigma) ),data=list(y=yDat,sigma=sigL) ) Recall that the WAIC is defined by:\n\\[ WAIC = -2(lppd-pWAIC) \\]\nWhere pWAIC is the effective number of parameters. So we note that:\n\\[ pWAIC=lppd-0.5*WAIC \\]\nThis is reported by WAIC as the penalty parameter.\nWAIC(m7m4S) %\u0026gt;% rbind(WAIC(m7m4L)) %\u0026gt;% mutate(sigma=c(sigS,sigL)) %\u0026gt;% toOrg    WAIC lppd penalty std_err sigma     16.4098404638955 -7.31440324407321 0.890516987874561 2.31086161575483 1   16.9915093637752 -7.3011838990595 1.19457078282808 2.5268591022024 1000    Though the effect is not too strong, it is clear that having a denser prior (a.k.a smaller sigma) has a smaller number of effective paramters, as expected.\nHOLD 7M5 Provide an informal explanation of why informative priors reduce overfitting.\nSolution Overfitting is easier to understand in the context of data-compression. Essentially, when overfitting occurs, the data is represented in a different encoding, instead of being compressed.\nWe can also look at the overfitting process to be a trade off between simply fitting to every data-point (low bias, high variance) and being completely oblivious to the data (high bias, low variance). In another sense, overfitting occurs when the model is \u0026ldquo;overly eager\u0026rdquo; to learn from the data.\nGiven this understanding, informative priors essentially regularize the model, by ensuring that the likelihood is closer to the posterior, and hence prevents the model from \u0026ldquo;learning\u0026rdquo; from data-points which are not actually relevant to the prior.\nThis implies that overfitting reduces the model by lowering the sensitivity of the model to a sample, which implicitly implies that the data contains points which are not actually a feature of the process which will generate future data.\nHOLD 7M6 Provide an informal explanation of why overly informative priors result in underfitting.\nSolution Underfitting occurs when the model is insensitive to newer samples of the data. In classical terms, this means that the model has a very high bias, and typically has a correspondingly low variance.\nWith the understanding that priors cause regularization, which enforces sparsity of features, it is easier to see that very strong priors ensure that the model is overly sparse and incapable of picking up relevant trends in the training data.\nOverly informative priors, essentially imply that the model has \u0026ldquo;seen\u0026rdquo; a large amount of data previously, which then means that it is less sensitive to newer samples of data. This means that features present in the training data which are relevant to future data will be ignored in favor of the prior predictions.\nA: Colophon To ensure that this document is fully reproducible at a later date, we will record the session info.\ndevtools::session_info() - Session info --------------------------------------------------------------- setting value version R version 4.0.0 (2020-04-24) os Arch Linux system x86_64, linux-gnu ui X11 language (EN) collate C ctype C tz Iceland date 2020-06-13 - Packages ------------------------------------------------------------------- package * version date lib source arrayhelpers 1.1-0 2020-02-04 [167] CRAN (R 4.0.0) assertthat 0.2.1 2019-03-21 [34] CRAN (R 4.0.0) backports 1.1.6 2020-04-05 [68] CRAN (R 4.0.0) boot 1.3-24 2019-12-20 [5] CRAN (R 4.0.0) broom 0.5.6 2020-04-20 [67] CRAN (R 4.0.0) callr 3.4.3 2020-03-28 [87] CRAN (R 4.0.0) cellranger 1.1.0 2016-07-27 [55] CRAN (R 4.0.0) cli 2.0.2 2020-02-28 [33] CRAN (R 4.0.0) coda 0.19-3 2019-07-05 [169] CRAN (R 4.0.0) colorspace 1.4-1 2019-03-18 [97] CRAN (R 4.0.0) crayon 1.3.4 2017-09-16 [35] CRAN (R 4.0.0) curl 4.3 2019-12-02 [26] CRAN (R 4.0.0) dagitty * 0.2-2 2016-08-26 [244] CRAN (R 4.0.0) data.table * 1.12.8 2019-12-09 [27] CRAN (R 4.0.0) DBI 1.1.0 2019-12-15 [77] CRAN (R 4.0.0) dbplyr 1.4.3 2020-04-19 [76] CRAN (R 4.0.0) desc 1.2.0 2018-05-01 [84] CRAN (R 4.0.0) devtools * 2.3.0 2020-04-10 [219] CRAN (R 4.0.0) digest 0.6.25 2020-02-23 [42] CRAN (R 4.0.0) dplyr * 0.8.5 2020-03-07 [69] CRAN (R 4.0.0) ellipsis 0.3.0 2019-09-20 [30] CRAN (R 4.0.0) evaluate 0.14 2019-05-28 [82] CRAN (R 4.0.0) fansi 0.4.1 2020-01-08 [36] CRAN (R 4.0.0) forcats * 0.5.0 2020-03-01 [29] CRAN (R 4.0.0) fs 1.4.1 2020-04-04 [109] CRAN (R 4.0.0) generics 0.0.2 2018-11-29 [71] CRAN (R 4.0.0) ggplot2 * 3.3.0 2020-03-05 [78] CRAN (R 4.0.0) glue * 1.4.0 2020-04-03 [37] CRAN (R 4.0.0) gridExtra 2.3 2017-09-09 [123] CRAN (R 4.0.0) gtable 0.3.0 2019-03-25 [79] CRAN (R 4.0.0) haven 2.2.0 2019-11-08 [28] CRAN (R 4.0.0) hms 0.5.3 2020-01-08 [44] CRAN (R 4.0.0) htmltools 0.4.0 2019-10-04 [112] CRAN (R 4.0.0) httr 1.4.1 2019-08-05 [100] CRAN (R 4.0.0) inline 0.3.15 2018-05-18 [162] CRAN (R 4.0.0) jsonlite 1.6.1 2020-02-02 [101] CRAN (R 4.0.0) kableExtra * 1.1.0 2019-03-16 [212] CRAN (R 4.0.0) knitr 1.28 2020-02-06 [113] CRAN (R 4.0.0) latex2exp * 0.4.0 2015-11-30 [211] CRAN (R 4.0.0) lattice 0.20-41 2020-04-02 [6] CRAN (R 4.0.0) lifecycle 0.2.0 2020-03-06 [38] CRAN (R 4.0.0) loo 2.2.0 2019-12-19 [163] CRAN (R 4.0.0) lubridate 1.7.8 2020-04-06 [106] CRAN (R 4.0.0) magrittr 1.5 2014-11-22 [21] CRAN (R 4.0.0) MASS 7.3-51.5 2019-12-20 [7] CRAN (R 4.0.0) matrixStats 0.56.0 2020-03-13 [164] CRAN (R 4.0.0) memoise 1.1.0 2017-04-21 [229] CRAN (R 4.0.0) modelr 0.1.6 2020-02-22 [107] CRAN (R 4.0.0) munsell 0.5.0 2018-06-12 [96] CRAN (R 4.0.0) mvtnorm 1.1-0 2020-02-24 [243] CRAN (R 4.0.0) nlme 3.1-147 2020-04-13 [11] CRAN (R 4.0.0) orgutils * 0.4-1 2017-03-21 [209] CRAN (R 4.0.0) pillar 1.4.3 2019-12-20 [39] CRAN (R 4.0.0) pkgbuild 1.0.6 2019-10-09 [86] CRAN (R 4.0.0) pkgconfig 2.0.3 2019-09-22 [43] CRAN (R 4.0.0) pkgload 1.0.2 2018-10-29 [83] CRAN (R 4.0.0) plyr 1.8.6 2020-03-03 [73] CRAN (R 4.0.0) prettyunits 1.1.1 2020-01-24 [58] CRAN (R 4.0.0) printr * 0.1 2017-05-19 [214] CRAN (R 4.0.0) processx 3.4.2 2020-02-09 [88] CRAN (R 4.0.0) ps 1.3.2 2020-02-13 [89] CRAN (R 4.0.0) purrr * 0.3.4 2020-04-17 [50] CRAN (R 4.0.0) R6 2.4.1 2019-11-12 [48] CRAN (R 4.0.0) Rcpp 1.0.4.6 2020-04-09 [10] CRAN (R 4.0.0) readr * 1.3.1 2018-12-21 [45] CRAN (R 4.0.0) readxl 1.3.1 2019-03-13 [54] CRAN (R 4.0.0) remotes 2.1.1 2020-02-15 [233] CRAN (R 4.0.0) reprex 0.3.0 2019-05-16 [108] CRAN (R 4.0.0) rethinking * 2.01 2020-06-06 [242] local rlang 0.4.5 2020-03-01 [31] CRAN (R 4.0.0) rmarkdown 2.1 2020-01-20 [110] CRAN (R 4.0.0) rprojroot 1.3-2 2018-01-03 [85] CRAN (R 4.0.0) rstan * 2.19.3 2020-02-11 [161] CRAN (R 4.0.0) rstudioapi 0.11 2020-02-07 [91] CRAN (R 4.0.0) rvest 0.3.5 2019-11-08 [120] CRAN (R 4.0.0) scales 1.1.0 2019-11-18 [93] CRAN (R 4.0.0) sessioninfo 1.1.1 2018-11-05 [231] CRAN (R 4.0.0) shape 1.4.4 2018-02-07 [193] CRAN (R 4.0.0) StanHeaders * 2.19.2 2020-02-11 [165] CRAN (R 4.0.0) stringi 1.4.6 2020-02-17 [52] CRAN (R 4.0.0) stringr * 1.4.0 2019-02-10 [74] CRAN (R 4.0.0) svUnit 1.0.3 2020-04-20 [168] CRAN (R 4.0.0) testthat 2.3.2 2020-03-02 [81] CRAN (R 4.0.0) textutils 0.2-0 2020-01-07 [210] CRAN (R 4.0.0) tibble * 3.0.1 2020-04-20 [32] CRAN (R 4.0.0) tidybayes * 2.0.3 2020-04-04 [166] CRAN (R 4.0.0) tidybayes.rethinking * 2.0.3.9000 2020-06-07 [246] local tidyr * 1.0.2 2020-01-24 [75] CRAN (R 4.0.0) tidyselect 1.0.0 2020-01-27 [49] CRAN (R 4.0.0) tidyverse * 1.3.0 2019-11-21 [66] CRAN (R 4.0.0) usethis * 1.6.0 2020-04-09 [238] CRAN (R 4.0.0) V8 3.0.2 2020-03-14 [245] CRAN (R 4.0.0) vctrs 0.2.4 2020-03-10 [41] CRAN (R 4.0.0) viridisLite 0.3.0 2018-02-01 [99] CRAN (R 4.0.0) webshot 0.5.2 2019-11-22 [213] CRAN (R 4.0.0) withr 2.2.0 2020-04-20 [90] CRAN (R 4.0.0) xfun 0.13 2020-04-13 [116] CRAN (R 4.0.0) xml2 1.3.2 2020-04-23 [122] CRAN (R 4.0.0) [1] /nix/store/xzd8h53xkyvfm3kvj5ab6znp685wi04w-r-car-3.0-7/library [2] /nix/store/mhr8zw9bmxarc3n821b83i0gz2j9zlrq-r-abind-1.4-5/library [3] /nix/store/hp86nhr0787vib3l8mkw0gf9nxwb45im-r-carData-3.0-3/library [4] /nix/store/vhw7s2h5ds6sp110z2yvilchv8j9jch5-r-lme4-1.1-23/library [5] /nix/store/987n8g0zy9sjvfvnsck1bkkcknw05yvb-r-boot-1.3-24/library [6] /nix/store/jxxxxyz4c1k5g3drd35gsrbjdg028d11-r-lattice-0.20-41/library [7] /nix/store/q9zfm5h53m8rd08xcsdcwaag31k4z1pf-r-MASS-7.3-51.5/library [8] /nix/store/kjkm50sr144yvrhl5axfgykbiy13pbmg-r-Matrix-1.2-18/library [9] /nix/store/8786z5lgy8h3akfjgj3yq5yq4s17rhjy-r-minqa-1.2.4/library [10] /nix/store/93wv3j0z1nzqp6fjsm9v7v8bf8d1xkm2-r-Rcpp-1.0.4.6/library [11] /nix/store/akfw6zsmawmz8lmjkww0rnqrazm4mqp0-r-nlme-3.1-147/library [12] /nix/store/rxs0d9bbn8qhw7wmkfb21yk5abp6lpq1-r-nloptr-1.2.2.1/library [13] /nix/store/8n0jfiqn4275i58qgld0dv8zdaihdzrk-r-RcppEigen-0.3.3.7.0/library [14] /nix/store/8vxrma33rhc96260zsi1jiw7dy3v2mm4-r-statmod-1.4.34/library [15] /nix/store/2y46pb5x9lh8m0hdmzajnx7sc1bk9ihl-r-maptools-0.9-9/library [16] /nix/store/iwf9nxx1v883wlv0p88q947hpz5lhfh7-r-foreign-0.8-78/library [17] /nix/store/rl9sjqply6rjbnz5k792ghm62ybv76px-r-sp-1.4-1/library [18] /nix/store/ws4bkzyv2vj5pyn1hgwyy6nlp48arz0n-r-mgcv-1.8-31/library [19] /nix/store/307dzxrmnqk4p86560a02r64x1fhhmxb-r-nnet-7.3-13/library [20] /nix/store/g2zpzkdb9hzkza1wpcbrk58119v1wyaf-r-pbkrtest-0.4-8.6/library [21] /nix/store/p0l503fr8960vld70w6ilmknxs5qwq77-r-magrittr-1.5/library [22] /nix/store/rmjpcaw3i446kwnjgcxcaid0yac36cj2-r-quantreg-5.55/library [23] /nix/store/10mzmnvc5jjgk2xzasia522pk60a30qz-r-MatrixModels-0.4-1/library [24] /nix/store/6qwdzvmnnmhjwdnvg2zmvv6wafd1vf91-r-SparseM-1.78/library [25] /nix/store/aa9c39a3yiqkh1h7pbngjlbr7czvc7yi-r-rio-0.5.16/library [26] /nix/store/2fx4vqlybgwp5rhhy6pssqx7h1a927fn-r-curl-4.3/library [27] /nix/store/k4m3fn1kqvvvn8y33kd57gq49hr3ar8y-r-data.table-1.12.8/library [28] /nix/store/651hfjylqzmsf565wyx474vyjny771gy-r-haven-2.2.0/library [29] /nix/store/a3rnz28irmqvmj8axj5x5j1am2c3gzs4-r-forcats-0.5.0/library [30] /nix/store/j8v4gzib137q2cml31hvvfkrc0f60pp5-r-ellipsis-0.3.0/library [31] /nix/store/xaswqlnamf4k8vwx0x3wav3l0x60sag0-r-rlang-0.4.5/library [32] /nix/store/dqm3xpix2jwhhhr67s6fgrwbw7hizap7-r-tibble-3.0.1/library [33] /nix/store/v7xfsq6d97wpn6m0hjrac78w5xawbr8a-r-cli-2.0.2/library [34] /nix/store/fikjasr98klhk9cf44x4lhi57vh3pmkg-r-assertthat-0.2.1/library [35] /nix/store/3fya6cd38vsqdj0gjb7bcsy00sirlyw1-r-crayon-1.3.4/library [36] /nix/store/payqi9bwh216rwhaq07jgc26l4fv1zsb-r-fansi-0.4.1/library [37] /nix/store/h6a61ghws7yrdxlg412xl1im37z5r28i-r-glue-1.4.0/library [38] /nix/store/y8mjbia1wbnq26dkigr0p3xxwrbzsc2r-r-lifecycle-0.2.0/library [39] /nix/store/kwaghh12cnifgvcbvlv2anx0hd5f4ild-r-pillar-1.4.3/library [40] /nix/store/k1phn8j10nni7gzvcgp0vc25dby6bb77-r-utf8-1.1.4/library [41] /nix/store/k3b77y8v7zsshpp1ccs8jwk2i2g4rm9a-r-vctrs-0.2.4/library [42] /nix/store/iibjmbh7vj0d0bfafz98yn29ymg43gkw-r-digest-0.6.25/library [43] /nix/store/aqsj4k3pgm80qk4jjg7sh3ac28n6alv0-r-pkgconfig-2.0.3/library [44] /nix/store/i7c5v8s4hd9rlqah3bbvy06yywjqwdgk-r-hms-0.5.3/library [45] /nix/store/2fyrk58cmcbrxid66rbwjli7y114lvrm-r-readr-1.3.1/library [46] /nix/store/163xq2g5nblqgh7qhvzb6mvgg6qdrirj-r-BH-1.72.0-3/library [47] /nix/store/dr27b6k49prwgrjs0v30b6mf5lxa36pk-r-clipr-0.7.0/library [48] /nix/store/bghvqg9mcaj2jkbwpy0di6c563v24acz-r-R6-2.4.1/library [49] /nix/store/nq8jdq7nlg9xns4xpgyj6sqv8p4ny1wz-r-tidyselect-1.0.0/library [50] /nix/store/zlwhf75qld7vmwx3d4bdws057ld4mqbp-r-purrr-0.3.4/library [51] /nix/store/0gbmmnbpqlr69l573ymkcx8154fvlaca-r-openxlsx-4.1.4/library [52] /nix/store/1m1q4rmwx56dvx9rdzfsfq0jpw3hw0yx-r-stringi-1.4.6/library [53] /nix/store/mhy5vnvbsl4q7dcinwx3vqlyywxphbfd-r-zip-2.0.4/library [54] /nix/store/88sp7f7q577i6l5jjanqiv5ak6nv5357-r-readxl-1.3.1/library [55] /nix/store/6q9zwivzalhmzdracc8ma932wirq8rl5-r-cellranger-1.1.0/library [56] /nix/store/jh2n6k2ancdzqych5ix8n4rq9w514qq9-r-rematch-1.0.1/library [57] /nix/store/22xjqikqd6q556absb5224sbx6q0kp0c-r-progress-1.2.2/library [58] /nix/store/9vp32wa1qvv6lkq6p70qlli5whrxzfbi-r-prettyunits-1.1.1/library [59] /nix/store/r9rhqb6fsk75shihmb7nagqb51pqwp0y-r-class-7.3-16/library [60] /nix/store/z1kad071y43wij1ml9lpghh7jbimmcli-r-cluster-2.1.0/library [61] /nix/store/i8wr965caf6j1rxs2dsvpzhlh4hyyb4y-r-codetools-0.2-16/library [62] /nix/store/8iglq3zr68a39hzswvzxqi2ffhpw9p51-r-KernSmooth-2.23-16/library [63] /nix/store/n3k50zv40i40drpdf8npbmy2y08gkr6w-r-rpart-4.1-15/library [64] /nix/store/b4r6adzcvpm8ivflsmis7ja7q4r5hkjy-r-spatial-7.3-11/library [65] /nix/store/zqg6hmrncl8ax3vn7z5drf4csddwnhcx-r-survival-3.1-12/library [66] /nix/store/4anrihkx11h8mzb269xdyi84yp5v7grl-r-tidyverse-1.3.0/library [67] /nix/store/945haq0w8nfm9ib7r0nfngn5lk2i15ix-r-broom-0.5.6/library [68] /nix/store/52viqxzrmxl7dk0zji293g5b0b9grwh8-r-backports-1.1.6/library [69] /nix/store/zp1k42sw2glqy51w4hnzsjs8rgi8xzx2-r-dplyr-0.8.5/library [70] /nix/store/mkjd98mnshch2pwnj6h31czclqdaph3f-r-plogr-0.2.0/library [71] /nix/store/kflrzax6y5pwfqwzgfvqz433a3q3hnhn-r-generics-0.0.2/library [72] /nix/store/xi1n5h5w17c33y6ax3dfhg2hgzjl9bxz-r-reshape2-1.4.4/library [73] /nix/store/vn63z92zkpbaxmmhzpb6mq2fvg0xa26h-r-plyr-1.8.6/library [74] /nix/store/wmpyxss67bj44rin7hlnr9qabx66p5hj-r-stringr-1.4.0/library [75] /nix/store/330qbgbvllwz3h0i2qidrlk50y0mbgph-r-tidyr-1.0.2/library [76] /nix/store/cx3x4pqb65l1mhss65780hbzv9jdrzl6-r-dbplyr-1.4.3/library [77] /nix/store/gsj49bp3hpw9jlli3894c49amddryqsq-r-DBI-1.1.0/library [78] /nix/store/kvymhwp4gac0343c2yi1qvdpavx4gdn2-r-ggplot2-3.3.0/library [79] /nix/store/knv51jvpairvibrkkq48b6f1l2pa1cv8-r-gtable-0.3.0/library [80] /nix/store/158dx0ddv20ikwag2860nlg9p3hbh1zc-r-isoband-0.2.1/library [81] /nix/store/fprs9rp1jlhxzj7fp6l79akyf8k3p7zd-r-testthat-2.3.2/library [82] /nix/store/0pmlnkyn0ir3k9bvxihi1r06jyl64w3i-r-evaluate-0.14/library [83] /nix/store/7210bjjqn5cjndxn5isnd4vip00xhkhy-r-pkgload-1.0.2/library [84] /nix/store/9a12ybd74b7dns40gcfs061wv7913qjy-r-desc-1.2.0/library [85] /nix/store/na9pb1apa787zp7vvyz1kzym0ywjwbj0-r-rprojroot-1.3-2/library [86] /nix/store/pa2n7bh61qxyarn5i2ynd62k6knb1np1-r-pkgbuild-1.0.6/library [87] /nix/store/1hxm1m7h4272zxk9bpsaq46mvnl0dbss-r-callr-3.4.3/library [88] /nix/store/bigvyk6ipglbiil93zkf442nv4y3xa1x-r-processx-3.4.2/library [89] /nix/store/370lr0wf7qlq0m72xnmasg2iahkp2n52-r-ps-1.3.2/library [90] /nix/store/rr72q61d8mkd42zc5fhcd2rqjghvc141-r-withr-2.2.0/library [91] /nix/store/9gw77p7fmz89fa8wi1d9rvril6hd4sxy-r-rstudioapi-0.11/library [92] /nix/store/9x4v4pbrgmykbz2801h77yz2l0nmm5nb-r-praise-1.0.0/library [93] /nix/store/pf8ssb0dliw5bzsncl227agc8przb7ic-r-scales-1.1.0/library [94] /nix/store/095z4wgjrxn63ixvyzrj1fm1rdv6ci95-r-farver-2.0.3/library [95] /nix/store/5aczj4s7i9prf5i32ik5ac5baqvjwdb1-r-labeling-0.3/library [96] /nix/store/wch26phipzz9gxd4vbr4fynh7v28349j-r-munsell-0.5.0/library [97] /nix/store/3w8fh756mszhsjx5fwgwydcpn8vkwady-r-colorspace-1.4-1/library [98] /nix/store/8cmaj81v2vm4f8p59ylbnsby8adkbmhd-r-RColorBrewer-1.1-2/library [99] /nix/store/h4x4ygax7gpz6f0c2v0xacr62080qwb8-r-viridisLite-0.3.0/library [100] /nix/store/qhx0i2nn5syb6vygdn8fdxgl7k56yj81-r-httr-1.4.1/library [101] /nix/store/lxnb4aniv02i4jhdvz02aaql1kznbpxb-r-jsonlite-1.6.1/library [102] /nix/store/13dcry4gad3vfwqzqb0ii4n06ybrxybr-r-mime-0.9/library [103] /nix/store/2can5l8gscc92a3bqlak8hfcg96v5hvf-r-openssl-1.4.1/library [104] /nix/store/piwsgxdz5w2ak8c6fcq0lc978qbxwdp1-r-askpass-1.1/library [105] /nix/store/3sj5h6dwa1l27d2hvdchclygk0pgffsr-r-sys-3.3/library [106] /nix/store/2z0p88g0c03gigl2ip60dlsfkdv1k30h-r-lubridate-1.7.8/library [107] /nix/store/1pkmj8nqjg2iinrkg2w0zkwq0ldc01za-r-modelr-0.1.6/library [108] /nix/store/bswkzvn8lczwbyw3y7n0p0qp2q472s0g-r-reprex-0.3.0/library [109] /nix/store/yid22gad8z49q52d225vfba2m4cgj2lx-r-fs-1.4.1/library [110] /nix/store/d185qiqaplm5br9fk1pf29y0srlabw83-r-rmarkdown-2.1/library [111] /nix/store/iszqviydsdj31c3ww095ndqy1ld3cibs-r-base64enc-0.1-3/library [112] /nix/store/i89wfw4cr0fz3wbd7cg44fk4dwz8b6h1-r-htmltools-0.4.0/library [113] /nix/store/qrl28laqwmhpwg3dpcf4nca8alv0px0g-r-knitr-1.28/library [114] /nix/store/jffaxc4a3bbf2g6ip0gdcya73dmg53mb-r-highr-0.8/library [115] /nix/store/717srph13qpnbzmgsvhx25q8pl51ivpj-r-markdown-1.1/library [116] /nix/store/mxqmyq3ybdfyc6p0anhfy2kfw0iz5k4n-r-xfun-0.13/library [117] /nix/store/b8g6hadva0359l6j1aq4dbvxlqf1acxc-r-yaml-2.2.1/library [118] /nix/store/rrl05vpv7cw58zi0k9ykm7m4rjb9gjv3-r-tinytex-0.22/library [119] /nix/store/2ziq8nzah6xy3dgmxgim9h2wszz1f89f-r-whisker-0.4/library [120] /nix/store/540wbw4p1g2qmnmbfk0rhvwvfnf657sj-r-rvest-0.3.5/library [121] /nix/store/n3prn77gd9sf3z4whqp86kghr55bf5w8-r-selectr-0.4-2/library [122] /nix/store/gv28yjk5isnglq087y7767xw64qa40cw-r-xml2-1.3.2/library [123] /nix/store/693czdcvkp6glyir0mi8cqvdc643whvc-r-gridExtra-2.3/library [124] /nix/store/3sykinp7lyy70dgzr0fxjb195nw864dv-r-future-1.17.0/library [125] /nix/store/bqi2l53jfxncks6diy0hr34bw8f86rvk-r-globals-0.12.5/library [126] /nix/store/dydyl209klklzh69w9q89f2dym9xycnp-r-listenv-0.8.0/library [127] /nix/store/lni0bi36r4swldkx7g4hql7gfz9b121b-r-gganimate-1.0.5/library [128] /nix/store/hh92jxs79kx7vxrxr6j6vin1icscl4k7-r-tweenr-1.0.1/library [129] /nix/store/0npx3srjnqgh7bib80xscjqvfyzjvimq-r-GGally-1.5.0/library [130] /nix/store/x5nzxklmacj6l162g7kg6ln9p25r3f17-r-reshape-0.8.8/library [131] /nix/store/q29z7ckdyhfmg1zlzrrg1nrm36ax756j-r-ggfortify-0.4.9/library [132] /nix/store/1rvm1w9iv2c5n22p4drbjq8lr9wa2q2r-r-cowplot-1.0.0/library [133] /nix/store/rp8jhnasaw1vbv5ny5zx0mw30zgcp796-r-ggrepel-0.8.2/library [134] /nix/store/wb7y931mm8nsj7w9xin83bvbaq8wvi4d-r-corrplot-0.84/library [135] /nix/store/gdzcqivfvgdrsz247v5kmnnw1v6p9c1p-r-rpart.plot-3.0.8/library [136] /nix/store/6yqg37108r0v22476cm2kv0536wyilki-r-caret-6.0-86/library [137] /nix/store/6fjdgcwgisiqz451sg5fszxnn9z8vxg6-r-foreach-1.5.0/library [138] /nix/store/c3ph5i341gk7jdinrkkqf6y631xli424-r-iterators-1.0.12/library [139] /nix/store/sjm1rxshlpakpxbrynfhsjnnp1sjvc3r-r-ModelMetrics-1.2.2.2/library [140] /nix/store/vgk4m131d057xglmrrb9rijhzdr2qhhp-r-pROC-1.16.2/library [141] /nix/store/bv1kvy1wc2jx3v55rzn3cg2qjbv7r8zp-r-recipes-0.1.10/library [142] /nix/store/001h42q4za01gli7avjxhq7shpv73n9k-r-gower-0.2.1/library [143] /nix/store/ssffpl6ydffqyn9phscnccxnj71chnzg-r-ipred-0.9-9/library [144] /nix/store/baliqip8m6p0ylqhqcgqak29d8ghral1-r-prodlim-2019.11.13/library [145] /nix/store/j4n2wsv98asw83qiffg6a74dymk8r2hl-r-lava-1.6.7/library [146] /nix/store/hf5wq5kpsf6p9slglq5iav09s4by0y5i-r-numDeriv-2016.8-1.1/library [147] /nix/store/s58hm38078mx4gyqffvv09zn575xn648-r-SQUAREM-2020.2/library [148] /nix/store/g63ydzd53586pvr9kdgk8kf5szq5f2bc-r-timeDate-3043.102/library [149] /nix/store/0jkarmlf1kjv4g8a3svkc7jfarpp77ny-r-mlr3-0.2.0/library [150] /nix/store/g1m0n1w7by213v773iyn7vnxr25pkf56-r-checkmate-2.0.0/library [151] /nix/store/fc2ah8cz2sj6j2jk7zldvjmsjn1yakpn-r-lgr-0.3.4/library [152] /nix/store/0i2hs088j1s0a6i61124my6vnzq8l27m-r-mlbench-2.1-1/library [153] /nix/store/vzcs6k21pqrli3ispqnvj5qwkv14srf5-r-mlr3measures-0.1.3/library [154] /nix/store/h2yqqaia46bk3b1d1a7bq35zf09p1b1a-r-mlr3misc-0.2.0/library [155] /nix/store/c9mrkc928cmsvvnib50l0jb8lsz59nyk-r-paradox-0.2.0/library [156] /nix/store/vqpbdipi4p4advl2vxrn765mmgcrabvk-r-uuid-0.1-4/library [157] /nix/store/xpclynxnfq4h9218gk4y62nmgyyga6zl-r-mlr3viz-0.1.1/library [158] /nix/store/7w6pld5vir3p9bybay67kq0qwl0gnx17-r-mlr3learners-0.2.0/library [159] /nix/store/ca50rp6ha5s51qmhb1gjlj62r19xfzxs-r-mlr3pipelines-0.1.3/library [160] /nix/store/9hg0xap4pir64mhbgq8r8cgrfjn8aiz5-r-mlr3filters-0.2.0/library [161] /nix/store/jgqcmfix0xxm3y90m8wy3xkgmqf2b996-r-rstan-2.19.3/library [162] /nix/store/mvv1gjyrrpvf47fn7a8x722wdwrf5azk-r-inline-0.3.15/library [163] /nix/store/zmkw51x4w4d1v1awcws0xihj4hnxfr09-r-loo-2.2.0/library [164] /nix/store/30xxalfwzxl05bbfvj5sy8k3ysys6z5y-r-matrixStats-0.56.0/library [165] /nix/store/fhkww2l0izx87bjnf0pl9ydl1wprp0xv-r-StanHeaders-2.19.2/library [166] /nix/store/aflck5pzxa8ym5q1dxchx5hisfmfghkr-r-tidybayes-2.0.3/library [167] /nix/store/jhlbhiv4fg0wsbxwjz8igc4hcg79vw94-r-arrayhelpers-1.1-0/library [168] /nix/store/fv089zrnvicnavbi08hnzqpi9g1z4inj-r-svUnit-1.0.3/library [169] /nix/store/xci2rgjizx1fyb33818jx5s1bgn8v8k6-r-coda-0.19-3/library [170] /nix/store/dch9asd38yldz0sdn8nsgk9ivjrkbhva-r-HDInterval-0.2.0/library [171] /nix/store/rs8dri2m5cqdmpiw187rvl4yhjn0jg2v-r-e1071-1.7-3/library [172] /nix/store/qs1zyh3sbvccgnqjzas3br6pak399zgc-r-pvclust-2.2-0/library [173] /nix/store/sh3zxvdazp7rkjn1iczrag1h2358ifm1-r-forecast-8.12/library [174] /nix/store/h67kaxqr2ppdpyj77wg5hm684jypznji-r-fracdiff-1.5-1/library [175] /nix/store/fh0z465ligbpqyam5l1fwiijc7334kbk-r-lmtest-0.9-37/library [176] /nix/store/0lnsbwfg0axr80h137q52pa50cllbjpf-r-zoo-1.8-7/library [177] /nix/store/p7k4s3ivf83dp2kcxr1cr0wlc1rfk6jx-r-RcppArmadillo-0.9.860.2.0/library [178] /nix/store/ssnxv5x6zid2w11v8k5yvnyxis6n1qfk-r-tseries-0.10-47/library [179] /nix/store/zrbskjwaz0bzz4v76j044d771m24g6h8-r-quadprog-1.5-8/library [180] /nix/store/2x3w5sjalrfm6hf1dxd951j8y94nh765-r-quantmod-0.4.17/library [181] /nix/store/7g55xshf49s9379ijm1zi1qnh1vbsifq-r-TTR-0.23-6/library [182] /nix/store/6ilyzph46q6ijyanq4p7f0ccyni0d7j0-r-xts-0.12-0/library [183] /nix/store/17xhqghcnqha7pwbf98dxsq1729slqd5-r-urca-1.3-0/library [184] /nix/store/722lyn0k8y27pj1alik56r4vpjnncd9z-r-swdft-1.0.0/library [185] /nix/store/36n0zgy10fsqcq76n0qmdwjxrwh7pn9n-r-xgboost-1.0.0.2/library [186] /nix/store/ac0ar7lf75qx84xsdjv6j02rkdgnhybz-r-ranger-0.12.1/library [187] /nix/store/i1ighkq42x10dirqmzgbx2mhbnz1ynkb-r-DALEX-1.2.0/library [188] /nix/store/28fqnhsfng1bkphl0wvr7lg5y3p6va46-r-iBreakDown-1.2.0/library [189] /nix/store/dpym77x9qc2ksr4mwjm3pb9ar1kvwhdl-r-ingredients-1.2.0/library [190] /nix/store/sp4d281w6dpr31as0xdjqizdx8hhb01q-r-DALEXtra-0.2.1/library [191] /nix/store/ckhp9kpmjcs0wxb113pxn25c2wip2d0n-r-ggdendro-0.1-20/library [192] /nix/store/f3k7dxj1dsmqri2gn0svq4c9fvvl9g7q-r-glmnet-3.0-2/library [193] /nix/store/l6ccj6mwkqybjvh6dr8qzalygp0i7jyb-r-shape-1.4.4/library [194] /nix/store/418mqfwlafh6984xld8lzhl7rv29qw68-r-reticulate-1.15/library [195] /nix/store/qwh982mgxd2mzrgbjk14irqbasywa1jk-r-rappdirs-0.3.1/library [196] /nix/store/6sxs76abll23c6372h6nf101wi8fcr4c-r-FactoMineR-2.3/library [197] /nix/store/39d2va10ydgyzddwr07xwdx11fwk191i-r-ellipse-0.4.1/library [198] /nix/store/4lxym5nxdn8hb7l8a566n5vg9paqcfi2-r-flashClust-1.01-2/library [199] /nix/store/wp161zbjjs41fq4kn4k3m244c7b8l2l2-r-leaps-3.1/library [200] /nix/store/irghsaplrpb3hg3y7j831bbklf2cqs6d-r-scatterplot3d-0.3-41/library [201] /nix/store/09ahkf50g1q9isxanbdykqgcdrp8mxl1-r-factoextra-1.0.7/library [202] /nix/store/zi9bq7amsgc6w2x7fvd62g9qxz69vjfm-r-dendextend-1.13.4/library [203] /nix/store/wcywb7ydglzlxg57jf354x31nmy63923-r-viridis-0.5.1/library [204] /nix/store/pvnpg4vdvv93pmwrlgmy51ihrb68j55f-r-ggpubr-0.2.5/library [205] /nix/store/qpapsc4l9pylzfhc72ha9d82hcbac41z-r-ggsci-2.9/library [206] /nix/store/h0zg4x3bmkc82ggx8h4q595ffckcqgx5-r-ggsignif-0.6.0/library [207] /nix/store/vn5svgbf8vsgv8iy8fdzlj0izp279q15-r-polynom-1.4-0/library [208] /nix/store/mc1mlsjx5h3gc8nkl7jlpd4vg145nk1z-r-lindia-0.9/library [209] /nix/store/z1k4c8lhabp9niwfg1xylg58pf99ld9r-r-orgutils-0.4-1/library [210] /nix/store/ybj4538v74wx4f1l064m0qn589vyjmzg-r-textutils-0.2-0/library [211] /nix/store/hhm5j0wvzjc0bfd53170bw8w7mij2wnh-r-latex2exp-0.4.0/library [212] /nix/store/njlv5mkxgjyx3x8p984nr84dwa2v1iqp-r-kableExtra-1.1.0/library [213] /nix/store/lf2sb84ylh259m421ljbj731a4prjhsl-r-webshot-0.5.2/library [214] /nix/store/n6b8ap54b78h8l70kyx9nvayp44rnfzf-r-printr-0.1/library [215] /nix/store/02g1v6d3ly8zylpckigwk6w3l1mx2i9d-r-microbenchmark-1.4-7/library [216] /nix/store/ri6qm0fp8cyx2qnysxjv2wsk0nndl1x9-r-webchem-0.5.0/library [217] /nix/store/cg95rqc1gmaqxf5kxja3cz8m5w4vl76l-r-RCurl-1.98-1.2/library [218] /nix/store/qbpinv148778fzdz8372x8gp34hspvy1-r-bitops-1.0-6/library [219] /nix/store/1g0lbrx6si76k282sxr9cj0mgknrw0lx-r-devtools-2.3.0/library [220] /nix/store/hnvww0128czlx6w8aipjn0zs7nvmvak9-r-covr-3.5.0/library [221] /nix/store/p4nv59przmb14sxi49jwqarkv0l40jsp-r-rex-1.2.0/library [222] /nix/store/vnysmc3vkgkligwah1zh9l4sahr533a8-r-lazyeval-0.2.2/library [223] /nix/store/d638w33ahybsa3sqr52fafvxs2b7w9x3-r-DT-0.13/library [224] /nix/store/35nqc34wy2nhd9bl7lv6wriw0l3cghsw-r-crosstalk-1.1.0.1/library [225] /nix/store/03838i63x5irvgmpgwj67ah0wi56k9d7-r-htmlwidgets-1.5.1/library [226] /nix/store/l4640jxlsjzqhw63c18fziar5vc0xyhk-r-promises-1.1.0/library [227] /nix/store/rxrb8p3dxzsg10v7yqaq5pi3y3gk6nqh-r-later-1.0.0/library [228] /nix/store/giprr32bl6k18b9n4qjckpf102flarly-r-git2r-0.26.1/library [229] /nix/store/bbkpkf44b13ig1pkz7af32kw5dzp12vb-r-memoise-1.1.0/library [230] /nix/store/m31vzssnfzapsapl7f8v4m15003lcc8r-r-rcmdcheck-1.3.3/library [231] /nix/store/hbiylknhxsin9hp9zaa6dwc2c9ai1mqx-r-sessioninfo-1.1.1/library [232] /nix/store/8vwlbx3s345gjccrkiqa6h1bm9wq4s9q-r-xopen-1.0.0/library [233] /nix/store/mjnwnlv60cn56ap0rrzvrkqlh5qisszx-r-remotes-2.1.1/library [234] /nix/store/1rq4zyzqymml7cc11q89rl5g514ml9na-r-roxygen2-7.1.0/library [235] /nix/store/2658mrn1hpkq0fv629rvags91qg65pbn-r-brew-1.0-6/library [236] /nix/store/nvjalws9lzva4pd4nz1z2131xsb9b5p6-r-commonmark-1.7/library [237] /nix/store/qx900vivd9s2zjrxc6868s92ljfwj5dv-r-rversions-2.0.1/library [238] /nix/store/1drg446wilq5fjnxkglxnnv8pbp1hllg-r-usethis-1.6.0/library [239] /nix/store/p3f3wa41d304zbs5cwvw7vy4j17zd6nq-r-gh-1.1.0/library [240] /nix/store/769g7jh93da8w15ad0wsbn2aqziwwx56-r-ini-0.3.1/library [241] /nix/store/p7kifw1l6z2zg68a71s4sdbfj8gdmnv5-r-rematch2-2.1.1/library [242] /nix/store/6zhdqip9ld9vl6pvifqcf4gsqy2f5wix-r-rethinking/library [243] /nix/store/496p28klmflihdkc83c8p1cywg85mgk4-r-mvtnorm-1.1-0/library [244] /nix/store/xb1zn7ab4nka7h1vm678ginzfwg4w9wf-r-dagitty-0.2-2/library [245] /nix/store/3zj4dkjbdwgf3mdsl9nf9jkicpz1nwgc-r-V8-3.0.2/library [246] /nix/store/qiqsh62w69b5xgj2i4wjamibzxxji0mf-r-tidybayes.rethinking/library [247] /nix/store/4j6byy1klyk4hm2k6g3657682cf3wxcj-R-4.0.0/lib/R/library   Summer of 2020 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/sr2-ch5-ch6-ch7/","tags":["solutions","R","SR2"],"title":"SR2 :: Solutions for Chapters {5,6,7}"},{"categories":["programming"],"contents":" A short post on my current set-up for R with nixpkgs and emacs to auto-compile my system configuration.\n Background This is my third post on working with nixpkgs and R.\n Part I covered ways of working effectively with R and nixpkgs Part II dealt with composing dependent devtools packages in a per-package environment, with a focus on rethinking and tidybayes.rethinking  This final part is about automating the system-wide configuration using emacs. Specifically doom-emacs. Naturally, this is the most optimal way to work with nix packages as well.\nSystem Configuration After experimenting with a per-project layout, I decided to use the full system configuration instead of the per-project layout. So I simply set:\n# $HOME/.config/nixpkgs/config.nix { packageOverrides = super: let self = super.pkgs; rethinking = with self.rPackages; buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = self.fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }; tidybayes_rethinking = with self.rPackages; buildRPackage { name = \u0026#34;tidybayes.rethinking\u0026#34;; src = self.fetchFromGitHub { owner = \u0026#34;mjskay\u0026#34;; repo = \u0026#34;tidybayes.rethinking\u0026#34;; rev = \u0026#34;df903c88f4f4320795a47c616eef24a690b433a4\u0026#34;; sha256 = \u0026#34;1jl3189zdddmwm07z1mk58hcahirqrwx211ms0i1rzbx5y4zak0c\u0026#34;; }; propagatedBuildInputs = [ dplyr tibble rlang MASS tidybayes rethinking rstan ]; }; in { rEnv = super.rWrapper.override { packages = with self.rPackages; [ tidyverse devtools modelr purrr forcats #################### # Machine Learning # #################### # MLR3 mlr3 mlr3viz mlr3learners mlr3pipelines # Plotting tools ggplot2 cowplot ggrepel RColorBrewer # Stan Stuff rstan tidybayes # Text Utilities orgutils latex2exp kableExtra knitr data_table printr # Devtools Stuff rethinking tidybayes_rethinking ]; }; }; } If any of these look strange, refer to the earlier posts.\nAutomation Pains direnv, lorri and niv (the heroes of Part II) are not really useful for working with the system-wide configuration, but an elegant solution still exists, which leverages firestarter and after-save-hooks in emacs.\nFirestarter Firestarter is my favorite method of working with shell commands after saving things. My setup is simply:\n; packages.el (package! firestarter) This is coupled with a simple configuration.\n; config.el (use-package! firestarter :ensure t :init (firestarter-mode) :config (setq firestarter-default-type t) ) The default type corresponds to demanding the shell outupt for the commands.\nNix-R Stuff To finalize this setup, we will need to modify our system configuration slightly. For brevity, we simply note the following local variables.\n# $HOME/.config/nixpkgs/config.nix # Local Variables: # firestarter: \u0026#34;nix-env -f \u0026#39;\u0026lt;nixpkgs\u0026gt;\u0026#39; -iA rEnv\u0026#34; # firestarter-default-type: (quote failure) # End: The firestarter-default-type used here is to ensure that errors are displayed in a buffer.\nTo check what is being installed (if anything) simply run:\nnix-env -f \u0026#34;\u0026lt;nixpkgs\u0026gt;\u0026#34; -iA rEnv --dry-run Conclusion This is my current setup. It works out better than most of my other attempts and seems to be an optimal approach. The packages are versioned, everything is automated, and I can reproduce changes across all my machines. Will stick with this.\n","permalink":"https://rgoswami.me/posts/emacs-nix-r/","tags":["tools","nix","workflow","R","emacs"],"title":"Emacs for Nix-R"},{"categories":["programming"],"contents":" This post describes how to set up a transparent automated setup for reproducible R workflows using nixpkgs, niv, and lorri. The explanatory example used throughout the post is one of setting up the rethinking package and running some examples from the excellent second edition of \u0026ldquo;Statistical Rethinking\u0026rdquo; by Richard McElreath.\n Background As detailed in an earlier post1, I had set up Nix to work with non-CRAN packages. If the rest of this section is unclear, please refer back to the earlier post.\nSetup For the remainder of the post, we will set up a basic project structure:\nmkdir tryRnix/ Now we will create a shell.nix as2:\n# shell.nix { pkgs ? import \u0026lt;nixpkgs\u0026gt; { } }: with pkgs; let my-r-pkgs = rWrapper.override { packages = with rPackages; [ ggplot2 tidyverse tidybayes tidybayes.rethinking (buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }) ]; }; in mkShell { buildInputs = with pkgs; [ git glibcLocales openssl which openssh curl wget ]; inputsFrom = [ my-r-pkgs ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${glibcLocales}/lib/locale/locale-archive\u0026#34;; } So we have:\ntree tryRnix    tryRnix        âââ shell.nix     0 directories, 1 file    Introspection At this point:\n I was able to install packages (system and R) arbitrarily I was able to use project specific folders Unlike npm, pipenv, poetry, conda and friends, my system was not bloated by downloading and setting up the same packages every-time I used them in different projects  However, though this is a major step up from being chained to RStudio and my system package manager, it is still perhaps not immediately obvious how this workflow is reproducible. Admittedly, I have defined my packages in a nice functional manner; but someone else might have a different upstream channel they are tracking, and thus will have different packages. Indeed the only packages which I could be sure of were the R packages I built from Github, since those were tied to a hash. Finally, the setup described for each project is pretty onerous, and it is not immediately clear how to leverage fantastic tools like direnv for working through this.\nTowards Reproducible Environments The astute reader will have noticed that I mentioned that the R packages were reproducible since they were tied to a hash, and might reasonable argue that the entire Nix ecosystem is about hashing in the first place. Once we realize that, the rest is relatively simple3.\nNiv and Pinning Niv essentially keeps track of the channel from which all the packages are installed. Setup is pretty minimal.\ncd tryRnix/ nix-env -i niv niv init At this point, we have:\ntree tryRnix    tryRnix        âââ nix     âÂ  âââ sources.json    âÂ  âââ sources.nix    âââ shell.nix           1 directory, 3 files    We will have to update our shell.nix to use the new sources.\nlet sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; stdenv = pkgs.stdenv; my-r-pkgs = pkgs.rWrapper.override { packages = with pkgs.rPackages; [ ggplot2 tidyverse tidybayes ]; }; in pkgs.mkShell { buildInputs = with pkgs;[ git glibcLocales openssl which openssh curl wget my-r-pkgs ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${pkgs.glibcLocales}/lib/locale/locale-archive\u0026#34;; } We could inspect and edit these sources by hand, but it is much more convenient to simply use niv again when we need to update these.\ncd tryRnix/ niv update nixpkgs -b nixpkgs-unstable At this stage we have a reproducible set of packages ready to use. However it is still pretty annoying to have to go through the trouble of writing nix-shell and also waiting while it rebuilds when we change things.\nLorri and Direnv In the past, I have made my admiration for direnv very clear (especially for python-poetry). However, though direnv does allow us to include arbitrary bash logic into our projects, it would be nice to have something which has some defaults for nix. Thankfully, the folks at TweagIO developed lorri to scratch that itch.\nThe basic setup is simple:\nnix-env -i lorri cd tryRnix/ lorri init tree -a tryRnix/    tryRnix/        âââ .envrc     âââ nix     âÂ  âââ sources.json    âÂ  âââ sources.nix    âââ shell.nix           1 directory, 4 files    We can and should inspect the environment lorri wants us to load with direnv file:\ncat tryRnix/.envrc $(lorri direnv) In and of itself that is not too descriptive, so we should run that on our own first.\nEVALUATION_ROOT=\u0026#34;$HOME/.cache/lorri/gc_roots/407bd4df60fbda6e3a656c39f81c03c2/gc_root/shell_gc_root\u0026#34; watch_file \u0026#34;/run/user/1000/lorri/daemon.socket\u0026#34; watch_file \u0026#34;$EVALUATION_ROOT\u0026#34; #!/usr/bin/env bash # ^ shebang is unused as this file is sourced, but present for editor # integration. Note: Direnv guarantees it *will* be parsed using bash. function punt () { : } # move \u0026#34;origPreHook\u0026#34; \u0026#34;preHook\u0026#34; \u0026#34;$@\u0026#34;;; move() { srcvarname=$1 # example: varname might contain the string \u0026#34;origPATH\u0026#34; # drop off the source variable name shift destvarname=$1 # example: destvarname might contain the string \u0026#34;PATH\u0026#34; # drop off the destination variable name shift # like: export origPATH=\u0026#34;...some-value...\u0026#34; export \u0026#34;${@?}\u0026#34;; # set $original to the contents of the variable $srcvarname # refers to eval \u0026#34;$destvarname=\\\u0026#34;${!srcvarname}\\\u0026#34;\u0026#34; # mark the destvarname as exported so direnv picks it up # (shellcheck: we do want to export the content of destvarname!) # shellcheck disable=SC2163 export \u0026#34;$destvarname\u0026#34; # remove the export from above, ie: export origPATH... unset \u0026#34;$srcvarname\u0026#34; } function prepend() { varname=$1 # example: varname might contain the string \u0026#34;PATH\u0026#34; # drop off the varname shift separator=$1 # example: separator would usually be the string \u0026#34;:\u0026#34; # drop off the separator argument, so the remaining arguments # are the arguments to export shift # set $original to the contents of the the variable $varname # refers to original=\u0026#34;${!varname}\u0026#34; # effectfully accept the new variable\u0026#39;s contents export \u0026#34;${@?}\u0026#34;; # re-set $varname\u0026#39;s variable to the contents of varname\u0026#39;s # reference, plus the current (updated on the export) contents. # however, exclude the ${separator} unless ${original} starts # with a value eval \u0026#34;$varname=${!varname}${original:+${separator}${original}}\u0026#34; } function append() { varname=$1 # example: varname might contain the string \u0026#34;PATH\u0026#34; # drop off the varname shift separator=$1 # example: separator would usually be the string \u0026#34;:\u0026#34; # drop off the separator argument, so the remaining arguments # are the arguments to export shift # set $original to the contents of the the variable $varname # refers to original=\u0026#34;${!varname:-}\u0026#34; # effectfully accept the new variable\u0026#39;s contents export \u0026#34;${@?}\u0026#34;; # re-set $varname\u0026#39;s variable to the contents of varname\u0026#39;s # reference, plus the current (updated on the export) contents. # however, exclude the ${separator} unless ${original} starts # with a value eval \u0026#34;$varname=${original:+${original}${separator}}${!varname}\u0026#34; } varmap() { if [ -f \u0026#34;$EVALUATION_ROOT/varmap-v1\u0026#34; ]; then # Capture the name of the variable being set IFS=\u0026#34;=\u0026#34; read -r -a cur_varname \u0026lt;\u0026lt;\u0026lt; \u0026#34;$1\u0026#34; # With IFS=\u0026#39;\u0026#39; and the `read` delimiter being \u0026#39;\u0026#39;, we achieve # splitting on \\0 bytes while also preserving leading # whitespace: # # bash-3.2$ printf \u0026#39; \u0026lt;- leading space\\0bar\\0baz\\0\u0026#39; \\ # | (while IFS=\u0026#39;\u0026#39; read -d $\u0026#39;\\0\u0026#39; -r x; do echo \u0026#34;\u0026gt;$x\u0026lt;\u0026#34;; done) # \u0026gt; \u0026lt;- leading space\u0026lt; # \u0026gt;bar\u0026lt; # \u0026gt;baz\u0026lt;``` while IFS=\u0026#39;\u0026#39; read -r -d \u0026#39;\u0026#39; map_instruction \\  \u0026amp;\u0026amp; IFS=\u0026#39;\u0026#39; read -r -d \u0026#39;\u0026#39; map_variable \\  \u0026amp;\u0026amp; IFS=\u0026#39;\u0026#39; read -r -d \u0026#39;\u0026#39; map_separator; do unset IFS if [ \u0026#34;$map_variable\u0026#34; == \u0026#34;${cur_varname[0]}\u0026#34; ]; then if [ \u0026#34;$map_instruction\u0026#34; == \u0026#34;append\u0026#34; ]; then append \u0026#34;$map_variable\u0026#34; \u0026#34;$map_separator\u0026#34; \u0026#34;$@\u0026#34; return fi fi done \u0026lt; \u0026#34;$EVALUATION_ROOT/varmap-v1\u0026#34; fi export \u0026#34;${@?}\u0026#34; } function declare() { if [ \u0026#34;$1\u0026#34; == \u0026#34;-x\u0026#34; ]; then shift; fi # Some variables require special handling. # # - punt: don\u0026#39;t set the variable at all # - prepend: take the new value, and put it before the current value. case \u0026#34;$1\u0026#34; in # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L100 \u0026#34;HOME=\u0026#34;*) punt;; \u0026#34;USER=\u0026#34;*) punt;; \u0026#34;LOGNAME=\u0026#34;*) punt;; \u0026#34;DISPLAY=\u0026#34;*) punt;; \u0026#34;PATH=\u0026#34;*) prepend \u0026#34;PATH\u0026#34; \u0026#34;:\u0026#34; \u0026#34;$@\u0026#34;;; \u0026#34;TERM=\u0026#34;*) punt;; \u0026#34;IN_NIX_SHELL=\u0026#34;*) punt;; \u0026#34;TZ=\u0026#34;*) punt;; \u0026#34;PAGER=\u0026#34;*) punt;; \u0026#34;NIX_BUILD_SHELL=\u0026#34;*) punt;; \u0026#34;SHLVL=\u0026#34;*) punt;; # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L385 \u0026#34;TEMPDIR=\u0026#34;*) punt;; \u0026#34;TMPDIR=\u0026#34;*) punt;; \u0026#34;TEMP=\u0026#34;*) punt;; \u0026#34;TMP=\u0026#34;*) punt;; # vars from: https://github.com/NixOS/nix/blob/92d08c02c84be34ec0df56ed718526c382845d1a/src/nix-build/nix-build.cc#L421 \u0026#34;NIX_ENFORCE_PURITY=\u0026#34;*) punt;; # vars from: https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html (last checked: 2019-09-26) # reported in https://github.com/target/lorri/issues/153 \u0026#34;OLDPWD=\u0026#34;*) punt;; \u0026#34;PWD=\u0026#34;*) punt;; \u0026#34;SHELL=\u0026#34;*) punt;; # https://github.com/target/lorri/issues/97 \u0026#34;preHook=\u0026#34;*) punt;; \u0026#34;origPreHook=\u0026#34;*) move \u0026#34;origPreHook\u0026#34; \u0026#34;preHook\u0026#34; \u0026#34;$@\u0026#34;;; *) varmap \u0026#34;$@\u0026#34; ;; esac } export IN_NIX_SHELL=impure if [ -f \u0026#34;$EVALUATION_ROOT/bash-export\u0026#34; ]; then # shellcheck disable=SC1090 . \u0026#34;$EVALUATION_ROOT/bash-export\u0026#34; elif [ -f \u0026#34;$EVALUATION_ROOT\u0026#34; ]; then # shellcheck disable=SC1090 . \u0026#34;$EVALUATION_ROOT\u0026#34; fi unset declare Jun 06 19:02:32.368 INFO lorri has not completed an evaluation for this project yet, expr: $HOME/Git/Github/WebDev/Mine/haozeke.github.io/content-org/tryRnix/shell.nix Jun 06 19:02:32.368 WARN `lorri direnv` should be executed by direnv from within an `.envrc` file, expr: $HOME/Git/Github/WebDev/Mine/haozeke.github.io/content-org/tryRnix/shell.nix Upon inspection, that seems to check out. So now we can enable this.\ndirenv allow Additionally, we will need to stick to using a pure environment as much as possible to prevent unexpected situations. So we set:\n# .envrc eval \u0026#34;$(lorri direnv)\u0026#34; nix-shell --run bash --pure There\u0026rsquo;s still a catch though. We need to have lorri daemon running to make sure the packages are built automatically without us having to exit the shell and re-run things. We can turn to the documentation for this. Essentially, we need to have a user-level systemd socket file and service for lorri.\n# ~/.config/systemd/user/lorri.socket [Unit] Description=Socket for Lorri Daemon [Socket] ListenStream=%t/lorri/daemon.socket RuntimeDirectory=lorri [Install] WantedBy=sockets.target # ~/.config/systemd/user/lorri.service [Unit] Description=Lorri Daemon Requires=lorri.socket After=lorri.socket [Service] ExecStart=%h/.nix-profile/bin/lorri daemon PrivateTmp=true ProtectSystem=strict ProtectHome=read-only Restart=on-failure With that we are finally ready to start working with our auto-managed, reproducible environments.\nsystemctl --user daemon-reload \u0026amp;\u0026amp; \\ systemctl --user enable --now lorri.socket Rethinking As promised, we will first test the setup to see that everything is working. Now is also a good time to try the tidybayes.rethinking package. In order to use it, we will need to define the rethinking package in a way so we can pass it to the buildInputs for tidybayes.rethinking. We will modify new shell.nix as follows:\n# shell.nix let sources = import ./nix/sources.nix; pkgs = import sources.nixpkgs { }; stdenv = pkgs.stdenv; rethinking = with pkgs.rPackages; buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = pkgs.fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }; tidybayes_rethinking = with pkgs.rPackages; buildRPackage { name = \u0026#34;tidybayes.rethinking\u0026#34;; src = pkgs.fetchFromGitHub { owner = \u0026#34;mjskay\u0026#34;; repo = \u0026#34;tidybayes.rethinking\u0026#34;; rev = \u0026#34;df903c88f4f4320795a47c616eef24a690b433a4\u0026#34;; sha256 = \u0026#34;1jl3189zdddmwm07z1mk58hcahirqrwx211ms0i1rzbx5y4zak0c\u0026#34;; }; propagatedBuildInputs = [ dplyr tibble rlang MASS tidybayes rethinking rstan ]; }; rEnv = pkgs.rWrapper.override { packages = with pkgs.rPackages; [ ggplot2 tidyverse tidybayes devtools modelr cowplot ggrepel RColorBrewer purrr forcats rstan rethinking tidybayes_rethinking ]; }; in pkgs.mkShell { buildInputs = with pkgs; [ git glibcLocales which ]; inputsFrom = [ rEnv ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${pkgs.glibcLocales}/lib/locale/locale-archive\u0026#34;; } The main thing to note here is that we need the output of the derivation we create here, i.e. we need to use inputsFrom and NOT buildInputs for rEnv.\nLet us try to get a nice graphic for the conclusion.\nlibrary(magrittr) library(dplyr) library(purrr) library(forcats) library(tidyr) library(modelr) library(tidybayes) library(tidybayes.rethinking) library(ggplot2) library(cowplot) library(rstan) library(rethinking) library(ggrepel) library(RColorBrewer) theme_set(theme_tidybayes()) rstan_options(auto_write = TRUE) options(mc.cores = parallel::detectCores()) set.seed(5) n = 10 n_condition = 5 ABC = tibble( condition = factor(rep(c(\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;), n)), response = rnorm(n * 5, c(0,1,2,1,-1), 0.5) ) mtcars_clean = mtcars %\u0026gt;% mutate(cyl = factor(cyl)) m_cyl = ulam(alist( cyl ~ dordlogit(phi, cutpoint), phi \u0026lt;- b_mpg*mpg, b_mpg ~ student_t(3, 0, 10), cutpoint ~ student_t(3, 0, 10) ), data = mtcars_clean, chains = 4, cores = parallel::detectCores(), iter = 2000 ) cutpoints = m_cyl %\u0026gt;% recover_types(mtcars_clean) %\u0026gt;% spread_draws(cutpoint[cyl]) # define the last cutpoint last_cutpoint = tibble( .draw = 1:max(cutpoints$.draw), cyl = \u0026#34;8\u0026#34;, cutpoint = Inf ) cutpoints = bind_rows(cutpoints, last_cutpoint) %\u0026gt;% # define the previous cutpoint (cutpoint_{j-1}) group_by(.draw) %\u0026gt;% arrange(cyl) %\u0026gt;% mutate(prev_cutpoint = lag(cutpoint, default = -Inf)) fitted_cyl_probs = mtcars_clean %\u0026gt;% data_grid(mpg = seq_range(mpg, n = 101)) %\u0026gt;% add_fitted_draws(m_cyl) %\u0026gt;% inner_join(cutpoints, by = \u0026#34;.draw\u0026#34;) %\u0026gt;% mutate(`P(cyl | mpg)` = # this part is logit^-1(cutpoint_j - beta*x) - logit^-1(cutpoint_{j-1} - beta*x) plogis(cutpoint - .value) - plogis(prev_cutpoint - .value) ) data_plot = mtcars_clean %\u0026gt;% ggplot(aes(x = mpg, y = cyl, color = cyl)) + geom_point() + scale_color_brewer(palette = \u0026#34;Dark2\u0026#34;, name = \u0026#34;cyl\u0026#34;) fit_plot = fitted_cyl_probs %\u0026gt;% ggplot(aes(x = mpg, y = `P(cyl | mpg)`, color = cyl)) + stat_lineribbon(aes(fill = cyl), alpha = 1/5) + scale_color_brewer(palette = \u0026#34;Dark2\u0026#34;) + scale_fill_brewer(palette = \u0026#34;Dark2\u0026#34;) png(filename=\u0026#34;../images/rethinking.png\u0026#34;) plot_grid(ncol = 1, align = \u0026#34;v\u0026#34;, data_plot, fit_plot ) dev.off Finally we will run this in our environment.\nRscript tesPlot.R   Conclusions This post was really more of an exploratory follow up to the previous post, and does not really work in isolation. Then again, at this point everything seems to have worked out well. R with Nix has finally become a truly viable combination for any and every analysis under the sun. Some parts of the workflow are still a bit janky, but will probably resolve themselves over time.\nUpdate: There is a final part detailing automated ways of reloading the system configuration\n  My motivations were laid out in the aforementioned post, and will not be repeated \u0026#x21a9;\u0026#xfe0e;\n For why these are the way they are see the this is written, see the aforementioned post \u0026#x21a9;\u0026#xfe0e;\n Christine Dodrill has a great write up on using these tools as well \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/rethinking-r-nix/","tags":["tools","nix","workflow","R"],"title":"Statistical Rethinking and Nix"},{"categories":["programming"],"contents":" Setup details are described here, and the meta-post about these solutions is here.\n Materials The summmer course1 is based off of the second edition of Statistical Rethinking by Richard McElreath. This post covers the following exercise questions:\n Chapter 2  Easy {1,2,3,4} Medium {1,2,4}   Chapter 3  Easy {1,2,3,4,5} Medium {1,2,3,4,6}   Chapter 4  Easy {1,2,3,4,5} Medium {1,2,3,4,5,6,7}    Packages libsUsed\u0026lt;-c(\u0026#34;tidyverse\u0026#34;,\u0026#34;tidybayes\u0026#34;,\u0026#34;orgutils\u0026#34;, \u0026#34;rethinking\u0026#34;,\u0026#34;tidybayes.rethinking\u0026#34;, \u0026#34;ggplot2\u0026#34;,\u0026#34;kableExtra\u0026#34;,\u0026#34;dplyr\u0026#34;,\u0026#34;glue\u0026#34;, \u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;printr\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)); We also set the following theme parameters for the plots.\ntheme_set(theme_grey(base_size=24)) Chapter II: The Golem of Prague Easy Questions (Ch2) 2E1 Which of the expressions below correspond to the statement: /the probability of rain on Monday?\n Pr(rain) Pr(rain|Monday) Pr(Monday|rain) Pr(rain, Monday)/Pr(Monday)  Solution We can read each of these sentences as follows:\n Pr(rain) Probability of rain Pr(rain|Monday) Probability of rain given that it is Monday, or probability that it rains on Monday Pr(Monday|rain) Probability of being a Monday given that it rains Pr(rain,Monday)/Pr(Monday) Compound statement  We further note that we can express the joint probability of 4. to be equivalent to the probability written in 2.\nHence the correct solutions are options 2 and 4.\n2E2 Which of the following statements corresponds to the expression: Pr(Monday|rain)?\n The probability of rain on Monday. The probability of rain, given that it is Monday. The probability that it is Monday, given that it is raining. The probability that it is Monday and that it is raining.  Solution Using the same logic as described previously we note that the sentences correspond to the following formulations:\n Pr(rain,Monday) The probability of rain on Monday. Pr(rain|Monday) The probability of rain, given that it is Monday. Pr(Monday|rain) The probability that it is Monday, given that it is raining. Pr(Monday,rain) The probability that it is Monday and that it is raining. Hence only option 3 is correct.\n  2E3 Which of the expressions below correspond to the statement: the probability that it is Monday, given that it is raining?\n Pr(Monday|rain) Pr(rain|Monday) Pr(rain|Monday)Pr(Monday) Pr(rain|Monday)Pr(Monday)/Pr(rain) Pr(Monday|rain)Pr(rain)/Pr(Monday)  Solution We will simplify these slightly.\nHence the correct solutions are options 1 and 4.\n2E4 The Bayesian statistician Bruno de Finetti (1906\u0026ndash;1985) began his 1973 book on probability theory with the declaration: \u0026ldquo;PROBABILITY DOES NOT EXIST.\u0026rdquo; The capitals appeared in the original, so I imagine de Finetti wanted us to shout this statement. What he meant is that probability is a device for describing uncertainty from the perspective of an observer with limited knowledge; it has no objective reality. Discuss the globe tossing example from the chapter, in light of this statement. What does it mean to say \u0026ldquo;the probability of water is 0.7\u0026rdquo;?\nSolution The de Finetti school of thought subscribed to the belief that all processes were deterministic and therefore did not have any inherent probabilitic interpretation. With this framework, uncertainty did not have any physical realization, and so the random effects of a process could be accounted for entirely in terms of aleatoric and epistemic uncertainity without needing to consider the fact that in some processes (not discovered then) like quantum mechanics, random effects are part of the physical system, and are not due to a lack of information. Under this assumption, the entirity of probability is simply an numerical artifact with which the lack of information about a process could be expressed. Thus the statement \u0026ldquo;the probability of water is 0.7\u0026rdquo; would mean that the observable is 0.7, i.e., it would express the partial knowledge of the observer, and not have any bearing on the (presumably fully deterministic) underlying process which is a (presumed) exact function of angular momentum, and other exact classical properties.\nQuestions of Medium Complexity (Ch2) 2M1 Recall the globe tossing model from the chapter. Compute and plot the grid approximate posterior distribution for each of the following sets of observations. In each case, assume a uniform prior for \\(p\\).\n W, W, W W, W, W, L L, W, W, L, W, W, W  Solution nPoints\u0026lt;-50 # Grid pGrid\u0026lt;-seq(0,1,length.out=nPoints) # Prior prior\u0026lt;-rep(1,nPoints) # Likelihood for each grid point likelihood\u0026lt;-pGrid %\u0026gt;% dbinom(3,3,prob=.) noStdPosterior\u0026lt;-likelihood*prior # Posterior posterior\u0026lt;- noStdPosterior / sum(noStdPosterior) Now we can visualize this.\ntibble(pGrid,posterior) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses\u0026#34;, subtitle=\u0026#34;2M1.1)W W W\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34;, )   For the remaining parts we will use a more abbreviated solution.\ntibble(pGrid, li2=pGrid %\u0026gt;% dbinom(3,4,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses\u0026#34;, subtitle=\u0026#34;2M1.2) W W W L\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   For the final part, note that since the observations are independent, the ordering is irrelevant.\ntibble(pGrid, li2=pGrid %\u0026gt;% dbinom(5,7,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses\u0026#34;, subtitle=\u0026#34;2M1.2) L W W L W W W\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   2M2 Now assume a prior for \\(p\\) that is equal to zero when \\(p \u0026lt; 0.5\\) and is a positive constant when \\(p\\geq 0.5\\). Again compute and plot the grid approximate posterior distribution for each of the sets of observations in the problem just above.\n W, W, W W, W, W, L L, W, W, L, W, W, W  Solution We proceed in much the same way as in the previous question. We also use the vectorized ifelse instead of explicitly using a for loop.\nnPoints\u0026lt;-50 ## Grid pGrid\u0026lt;-seq(0,1,length.out=nPoints) ## Prior prior\u0026lt;-ifelse(pGrid\u0026lt;0.5,0,1) tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(3,3,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses with Prior information\u0026#34;, subtitle=\u0026#34;2M2.1) W W W\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(3,4,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses with Prior information\u0026#34;, subtitle=\u0026#34;2M2.2) W W W L\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(5,7,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses with Prior information\u0026#34;, subtitle=\u0026#34;2M2.3) L W W L W W W\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   2M4 Suppose you have a deck with only three cards. Each card has two sides, and each side is either black or white. One card has two black sides. The second card has one black and one white side. The third card has two white sides. Now suppose all three cards are placed in a bag and shuffled. Someone reaches into the bag and pulls out a card and places it flat on a table. A black side is shown facing up, but you don\u0026rsquo;t know the color of the side facing down. Show that the probability that the other side is also black is 2/3. Use the counting method (Section 2 of this chapter) to approach this problem. This means counting up the ways that each card could produce the observed data (a black side facing up on the table).\nSolution Let us begin by defining what is given to us.\n There are three cards  One has a black side and a white side (cBW) One is colored black on both sides (cBB) One is colored white on both sides (cWW)    Our total probability universe is defined by all possible states defined by the enumeration of possible states for each card and their combinations. In other words, it is a universe defined by color and the number of cards.\nThe question posed is essentially, given a single observation, that is that a random draw from our universe has produced a black side (note that we already know that there is one card so it satisfies the requirements of being a valid state of the universe we are considering), what is the probability of the other side being black as well?\nHence we can express this as O: cB? and we need P(B|cB?). We will enumerate possibilities of observing the black side in our universe.\n cBW This has \\(1\\) way of producing cB? cBB This has \\(2\\) ways of producing cB? cWW This has \\(0\\) ways of producing cB?     Card Ways to cB?     cBW 1   cBB 2   cWW 0    So we see that there are \\(3\\) ways to see a black side in a single draw, and two of these come from (cBB), thus the probability of seeing another black side is \\(\\frac{2}{3}\\).\nChapter III: Sampling the Imaginary Easy Questions (Ch3) These questions are associated with the following code snippet for the globe tossing example.\np_grid\u0026lt;-seq(from=0, to=1, length.out=1000) prior\u0026lt;-rep(1,1000) likelihood\u0026lt;-dbinom(6,size=9,prob=p_grid) posterior\u0026lt;-likelihood*prior posterior\u0026lt;-posterior/sum(posterior) set.seed(100) samples\u0026lt;-sample(p_grid,prob=posterior,size=1e4,replace=TRUE) 3E1 How much posterior probability lies below \\(p = 0.2\\)?\nSolution We can check the number of samples as follows:\nifelse(samples\u0026lt;0.2,1,0) %\u0026gt;% sum(.) [1] 4 Now we will simply divide by the number of samples.\nifelse(samples\u0026lt;0.2,1,0) %\u0026gt;% sum(.)/1e4 [1] 4e-04 More practically, the percentage of the probability density below \\(p=0.2\\) is:\nifelse(samples\u0026lt;0.2,1,0) %\u0026gt;% sum(.)/1e4 *100 [1] 0.04 3E2 How much posterior probability lies above \\(p = 0.8\\)?\nSolution ifelse(samples\u0026gt;0.8,1,0) %\u0026gt;% sum(.)/1e4 *100 [1] 11.16 3E3 How much posterior probability lies between \\(p = 0.2\\) and \\(p = 0.8\\)?\nSolution ifelse(samples\u0026gt;0.2 \u0026amp; samples\u0026lt;0.8,1,0) %\u0026gt;% sum(.)/1e4 *100 [1] 88.8 3E4 20% of the posterior probability lies below which value of \\(p\\)?\nSolution samples %\u0026gt;% quantile(0.2) 20% 0.5185185 3E5 20% of the posterior probability lies above which value of \\(p\\)?\nSolution samples %\u0026gt;% quantile(0.8) 80% 0.7557558 Questions of Medium Complexity (Ch3) 3M1 Suppose the globe tossing data had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as before.\nSolution nPoints\u0026lt;-1000 ## Grid pGrid\u0026lt;-seq(0,1,length.out=nPoints) ## Prior prior\u0026lt;-rep(1,nPoints) tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(8,15,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) %\u0026gt;% ggplot(aes(x=pGrid,y=posterior))+ geom_line(size=3)+geom_point(size=5,color=\u0026#34;red\u0026#34;)+ labs( title=\u0026#34;Globe Tosses with a Flat Prior\u0026#34;, subtitle=\u0026#34;3M1) 8W in 15 tosses\u0026#34;, y=\u0026#34;Posterior\u0026#34;, x=\u0026#34;Grid Approximation points\u0026#34; )+ scale_x_continuous(breaks = seq(0,1,length.out=10), labels = seq(0,1,length.out=10) %\u0026gt;% sprintf(\u0026#34;%.2f\u0026#34;,.), expand = c(0, 0))+ theme( plot.title.position = \u0026#34;plot\u0026#34; )   3M2 Draw 10,000 samples from the grid approximation from above. Then use the samples to calculate the 90% HPDI for \\(p\\).\nSolution For this, we will create a tibble of the experiment and then sample from it.\nexp3m2\u0026lt;-tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(8,15,prob=.), prior) %\u0026gt;% mutate(post2unstd=li2*prior) %\u0026gt;% mutate(posterior=post2unstd/sum(post2unstd)) sample(pGrid,prob=exp3m2$posterior,size=1e4,replace=TRUE) %\u0026gt;% HPDI(prob=0.9) |0.9 0.9| 0.3293293 0.7167167 3M3 Construct a posterior predictive check for this model and data. This means simulate the distribution of samples, averaging over the posterior uncertainty in \\(p\\). What is the probability of observing 8 water in 15 tosses.\nSolution As covered in the chapter, we will sample from the posterior distribution and use that to obtain experiment instances with rbinom. Finally we will then use these instances to count our way to the probability of observing the true data.\nwaterPred\u0026lt;-sample(pGrid,prob=exp3m2$posterior,size=1e4,replace=TRUE) %\u0026gt;% rbinom(1e4,size=15,prob=.) ifelse(waterPred==8,1,0) %\u0026gt;% sum(.)/1e4 [1] 0.1447 This seems like a very poor model, but the spread of the realizations is probably a better measure.\nwaterPred %\u0026gt;% summary Min. 1st Qu. Median Mean 3rd Qu. Max. 0.000 6.000 8.000 7.936 10.000 15.000 This does seem to indicate that at any rate the realizations are close enough to 8 for the model to be viable. A visualization of this should also be checked.\nwaterPred %\u0026gt;% simplehist   3M4 Using the posterior distribution constructed from the new (8/15) data, now calculate the probability of observing 6 water in 9 tosses\nSolution We will reuse the posterior, and recalculate our samples (corresponding to new possible instances).\nwaterPred\u0026lt;-sample(pGrid,prob=exp3m2$posterior,size=1e4,replace=TRUE) %\u0026gt;% rbinom(1e4,size=9,prob=.) ifelse(waterPred==6,1,0) %\u0026gt;% sum(.)/1e4 waterPred %\u0026gt;% summary [1] 0.1723 Min. 1st Qu. Median Mean 3rd Qu. Max. 0.000 4.000 5.000 4.777 6.000 9.000 Though the numerical value is not very different from the previous solution, we note that the centrality measures are much worse.\nwaterPred %\u0026gt;% simplehist   3M6 Suppose you want to estimate the Earth\u0026rsquo;s proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of p to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this?\nSolution Since the no information of the model has been provided here, we will consider reason out an approach, before making an estimate.\nThe number globe tosses corresponds to the number of observations we require. A percentile interval this narrow will essentially require a large number of samples i.e. be in the large number limit, so the choice of prior should not matter much. The width of our interval should also be related to the number of grid points we use in our approximation.\nWe will first use the true amount of water on the planet (approximately 71 percent) to generate information for the number of throws.\nLet us generate observations.\nnThrows\u0026lt;-10000 nWater\u0026lt;-0.71*nThrows %\u0026gt;% round We will set up a simple model for this, with an indifferent prior along with a better prior.\nnPoints\u0026lt;-1000 ## Grid pGrid\u0026lt;-seq(0,1,length.out=nPoints) ## Prior prior\u0026lt;-rep(1,nPoints) betterPrior\u0026lt;-ifelse(pGrid\u0026lt;0.5,0,1) We will define a function for generating our results since we will need to perform this a few times.\ngenModel\u0026lt;- function(nThrows){ nWater\u0026lt;-0.71*nThrows %\u0026gt;% round tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(nWater,nThrows,prob=.), prior,betterPrior) %\u0026gt;% mutate( postUnifNSD=li2*prior, postUnif=postUnifNSD/sum(postUnifNSD), smplUnif=sample(pGrid, prob=postUnif, size=nrow(.), replace=TRUE), predUnif=rbinom(nrow(.),size=9,prob=smplUnif), postBPNSD=li2*betterPrior, postBP=postBPNSD/sum(postBPNSD), smplBP=sample(pGrid, prob=postBP, size=nrow(.), replace=TRUE), predBP=rbinom(nrow(.),size=9,prob=smplBP) ) } It would be nice to look at the different priors as well.\ngenModel2(1e4) %\u0026gt;% .$predBP %\u0026gt;% simplehist   genModel(1e6) %\u0026gt;% .$predUnif %\u0026gt;% simplehist   As can be expected, with the large number of observations, the priors barely make a difference.\nWe note that what we are looking for is a credibility width of less than 0.05 at a probability of 0.99.\nget99Width\u0026lt;- function(x,nx) { piInter\u0026lt;-PI(x$postUnif,prob=0.99) hpdiInter\u0026lt;-HPDI(x$postUnif,prob=0.99) tibble(wPI=piInter[2]-piInter[1],wHPDI=hpdiInter[2]-hpdiInter[1],nSamples=nx) } Now we are in a position to start testing samples.\nbase100\u0026lt;-genModel(1e2) %\u0026gt;% get99Width(1e2) t\u0026lt;-1000 while(min(base100$wPI) \u0026amp; min(base100$wHPDI) \u0026gt; 0.005) { t\u0026lt;-t*10 base100\u0026lt;-genModel(t) %\u0026gt;% get99Width(t) %\u0026gt;% bind_rows(base100) } base100 %\u0026gt;% toOrg | wPI | wHPDI | nSamples | |---------------------+---------------------+----------| | 0.0464554168997065 | 0.00121611594937107 | 1e+05 | | 0.0735809517149284 | 0.0511200696528017 | 10000 | | 0.00884431494702241 | 0.0088121623437198 | 100 | There is an inherent problem with this formulation, and that is that the model confidence is based on the observations which were drawn to emulate the true distribution of water on Earth. This means that a highly tight width, should be recognized to still be highly dependent on the observed data. Let us try to obtain the same intervals with a randomized observation setup instead.\nIn order to do this we simply modify the number of water observations.\ngenModel2\u0026lt;- function(nThrows){ tibble(pGrid, li2=pGrid %\u0026gt;% dbinom(sample(1:nThrows, 1, replace=TRUE),nThrows,prob=.), prior,betterPrior) %\u0026gt;% mutate( postUnifNSD=li2*prior, postUnif=postUnifNSD/sum(postUnifNSD), smplUnif=sample(pGrid, prob=postUnif, size=nrow(.), replace=TRUE), predUnif=rbinom(nrow(.),size=9,prob=smplUnif), postBPNSD=li2*betterPrior, postBP=postBPNSD/sum(postBPNSD), smplBP=sample(pGrid, prob=postBP, size=nrow(.), replace=TRUE), predBP=rbinom(nrow(.),size=9,prob=smplBP) ) } We can now test these the same way.\nbase100\u0026lt;-genModel2(100) %\u0026gt;% get99Width(100) t\u0026lt;-100 while(min(base100$wPI) \u0026amp; min(base100$wHPDI) \u0026gt; 0.05) { t\u0026lt;-t+100 base100\u0026lt;-genModel2(t) %\u0026gt;% get99Width(t) %\u0026gt;% bind_rows(base100) } base100 %\u0026gt;% toOrg | wPI | wHPDI | nSamples | |---------------------+---------------------+----------| | 0.00853874459759265 | 0.00851020493831213 | 100 | Chapter IV: Geocentric Models Easy Questions (Ch4) 4E1 In the model definition below, which line is the likelihood?\nSolution The likelihood is defined by the first line, that is, \\(y_i \\sim\\mathrm{Normal}(\\mu, \\sigma)\\)\n4E2 In the model definition above, how many parameters are in the posterior distribution?\nSolution The model has two parameters for the posterior distribution, \\(\\mu\\) and \\(\\sigma\\).\n4E3 Using the model definition above, write down the appropriate form of Bayes\u0026rsquo; theorem that includes the proper likelihood and priors.\nSolution The appropriate form of Bayes\u0026rsquo; theorem in this case is:\n\\[ \\mathrm(Pr)(\\mu,\\sigma|y)=\\frac{\\mathrm{Normal}(y|\\mu,\\sigma)\\mathrm{Normal}(\\mu|0,10)\\mathrm{Exponential}(\\sigma|1)}{\\int\\int \\mathrm{Normal}(y|\\mu,\\sigma)\\mathrm{Normal}(\\mu|0,10)\\mathrm{Exponential}(\\sigma|1)d\\mu d\\sigma} \\]\n4E4 In the model definition below, which line is the linear model?\nSolution The second line is the linear model in the definition, that is: \\[\\mu_i = \\alpha + \\beta x_i\\]\n4E5 In the model definition just above, how many parameters are in the posterior distribution?\nSolution The model defined has three independent parameters for the posterior distribution, which are \\(\\alpha\\), \\(\\beta\\) and \\(\\sigma\\). Though \\(\\mu\\) is a parameter, it is defined in terms of \\(\\alpha\\), \\(\\beta\\) and \\(x\\) so will not be considered to be a parameter for the posterior.\nQuestions of Medium Complexity (Ch4) 4M1 For the model definition below, simulate observed \\(y\\) values from the prior (not the posterior).\nSolution Sampling from the prior involves averaging over the prior distributions of \\(\\mu\\) and \\(\\sigma\\).\nmuPrior\u0026lt;-rnorm(1e4,0,10) sigmaPrior\u0026lt;-rexp(1e4,1) hSim\u0026lt;-rnorm(1e4,muPrior,sigmaPrior) We can visualize this as well.\nhSim %\u0026gt;% qplot(binwidth=0.8)   4M2 Translate the model just above into a quap formula.\nSolution ex4m2\u0026lt;-alist( y~dnorm(mu,sigma), mu~dnorm(0,10), sigma~dexp(1) ) 4M3 Translate the quap model formula below into a mathematical model definition\nSolution The model defined can be expressed mathematically as:\n4M4 A sample of students is measured for height each year for 3y ears. After the third year,you want to fit a linear regression predicting height using year as a predictor. Write down the mathematical model definition for this regression, using any variable names and priors you choose. Be prepared to defend your choice of priors.\nSolution Let us first declare a model.\nWhere the double subscript is meant to indicate that the data is obtained both per year and per student. That is, we have:\n \\(y_{ij}\\) is the height of each student each year \\(x_{j}\\) is the \u0026ldquo;reduced\u0026rdquo; year, that is the difference between a particular year and the average sample year  The prior distributions are not too complicated. Since the distribution of males and females in the student population is missing, as is information on the age distribution, we will set a conservative lower value of 120 centimeters, based on the understanding that the students have at-least 3 years in school, so they are growing, so we assume students grow around 8 centimeters every year.\nThe distribution for beta is a log-normal distribution to ensure that we do not sample negative values which might arise from sampling a Gaussian. This is due to the assumption that the students grow every year.\nFollowing the procedures of the chapter, we will visualize realizations from the prior.\nnDraws\u0026lt;-50 a\u0026lt;-rnorm(nDraws,100,8) b\u0026lt;-rlnorm(nDraws,0,2) sigmaPrior\u0026lt;-rexp(nDraws,1) We will express our yearly function:\ngenYr\u0026lt;- function(x,yr) {rnorm(1,a[x]+b[x]*(yr-1.5),sigmaPrior[x])} Now we will assume a class size of 35 for our priors.\ntestDat\u0026lt;-tibble(student=1:36) testDat$year1\u0026lt;-sapply(testDat$student,FUN=genYr,yr=1) testDat$year2\u0026lt;-sapply(testDat$student,FUN=genYr,yr=2) testDat$year3\u0026lt;-sapply(testDat$student,FUN=genYr,yr=3) We will now look at this.\ntestDat %\u0026gt;% pivot_longer(-student,names_to = \u0026#34;year\u0026#34;,values_to = \u0026#34;height\u0026#34;) %\u0026gt;% ggplot(aes(x=student,y=height,color=year))+ geom_line(size=4,alpha=0.4)+ geom_point(size=4,colour=\u0026#34;blue\u0026#34;)+ labs( title=\u0026#34;Student Height variation\u0026#34;, subtitle=\u0026#34;By year\u0026#34;, y=\u0026#34;Height\u0026#34;, x=\u0026#34;Student\u0026#34; )+ theme( plot.title.position = \u0026#34;plot\u0026#34;, )   testDat %\u0026gt;% pivot_longer(-student,names_to = \u0026#34;year\u0026#34;,values_to = \u0026#34;height\u0026#34;) %\u0026gt;% ggplot(aes(x=year,y=height,color=student))+ geom_line(size=4,alpha=0.4)+ geom_point(size=4,colour=\u0026#34;blue\u0026#34;)+ labs( title=\u0026#34;Student Height variation\u0026#34;, subtitle=\u0026#34;By year\u0026#34;, y=\u0026#34;Height\u0026#34;, x=\u0026#34;Student\u0026#34; )+ theme( plot.title.position = \u0026#34;plot\u0026#34;, )   This seems to be a pretty reasonable model, all things considered.\n4M5 Now suppose I remind you that every student got taller each year. Does this information lead you to change your choice of priors? How?\nSolution Since we have incorporated a LogNormal term, we do not need to change our choice of prior. However, the parameters of our previous model did include some heights decreasing, so we will modify the LogNormal distribution on beta. Recall that we would like to see around 7 centimeters of growth, so our mean should be exp(1+2/2) which is around 7.\nSimulating draws as before.\nnDraws\u0026lt;-50 a\u0026lt;-rnorm(nDraws,100,8) b\u0026lt;-rlnorm(nDraws,1,2) sigmaPrior\u0026lt;-rexp(nDraws,1) genYr\u0026lt;- function(x,yr) {rnorm(1,a[x]+b[x]*(yr-1.5),sigmaPrior[x])} testDat\u0026lt;-tibble(student=1:36) testDat$year1\u0026lt;-sapply(testDat$student,FUN=genYr,yr=1) testDat$year2\u0026lt;-sapply(testDat$student,FUN=genYr,yr=2) testDat$year3\u0026lt;-sapply(testDat$student,FUN=genYr,yr=3) testDat %\u0026gt;% pivot_longer(-student,names_to = \u0026#34;year\u0026#34;,values_to = \u0026#34;height\u0026#34;) %\u0026gt;% ggplot(aes(x=student,y=height,color=year))+ geom_line(size=4,alpha=0.4)+ geom_point(size=4,colour=\u0026#34;blue\u0026#34;)+ labs( title=\u0026#34;Student Height variation\u0026#34;, subtitle=\u0026#34;By year with better priors\u0026#34;, y=\u0026#34;Height\u0026#34;, x=\u0026#34;Student\u0026#34; )+ theme( plot.title.position = \u0026#34;plot\u0026#34;, )   4M6 Now suppose I tell you that the variance among heights for students of the same age is never more than 64cm. How does this lead you to revise your priors?\nSolution This information will change the variance term in our model. We will incorporate this into our model by using a uniform distribution for sigma. The new model is then:\nSimulating draws as before.\nnDraws\u0026lt;-50 a\u0026lt;-rnorm(nDraws,100,8) b\u0026lt;-rlnorm(nDraws,1,2) sigmaPrior\u0026lt;-runif(nDraws,0,8) genYr\u0026lt;- function(x,yr) {rnorm(1,a[x]+b[x]*(yr-1.5),sigmaPrior[x])} testDat\u0026lt;-tibble(student=1:36) testDat$year1\u0026lt;-sapply(testDat$student,FUN=genYr,yr=1) testDat$year2\u0026lt;-sapply(testDat$student,FUN=genYr,yr=2) testDat$year3\u0026lt;-sapply(testDat$student,FUN=genYr,yr=3) We will now look at this.\ntestDat %\u0026gt;% pivot_longer(-student,names_to = \u0026#34;year\u0026#34;,values_to = \u0026#34;height\u0026#34;) %\u0026gt;% ggplot(aes(x=year,y=height,color=student))+ geom_line(size=4,alpha=0.4)+ geom_point(size=4,colour=\u0026#34;blue\u0026#34;)+ labs( title=\u0026#34;Student Height variation\u0026#34;, subtitle=\u0026#34;By year with additional information\u0026#34;, y=\u0026#34;Height\u0026#34;, x=\u0026#34;Student\u0026#34; )+ theme( plot.title.position = \u0026#34;plot\u0026#34;, )   testDat %\u0026gt;% pivot_longer(-student,names_to = \u0026#34;year\u0026#34;,values_to = \u0026#34;height\u0026#34;) %\u0026gt;% mutate(year=year %\u0026gt;% as.factor %\u0026gt;% as.numeric) %\u0026gt;% filter(student==3) %\u0026gt;% ggplot(aes(x=year,y=height,color=student))+ geom_line(size=4,alpha=0.4)+ geom_point(size=4,colour=\u0026#34;blue\u0026#34;)+ labs( title=\u0026#34;Student Height variation with additional information\u0026#34;, subtitle=\u0026#34;By year\u0026#34;, y=\u0026#34;Height\u0026#34;, x=\u0026#34;year\u0026#34; )+ theme( plot.title.position = \u0026#34;plot\u0026#34;, ) This is now much more reasonable.\n4M7 Refit model m4.3 from the chapter, but omit the mean weight xbar this time. Compare the new model\u0026rsquo;s posterior to that of the original model. In particular, look at the covariance among the parameters. What is different? Then compare the posterior predictions of both models.\nSolution Let us re-create the original data model first.\ndata(Howell1) howDat\u0026lt;-Howell1 howDat\u0026lt;-howDat %\u0026gt;% filter(age\u0026gt;=18) Recall that the original model was given by:\nxbar\u0026lt;-mean(howDat$weight) m43\u0026lt;-quap( alist( height ~ dnorm(mu,sigma), mu\u0026lt;-a+b*(weight-xbar), a ~ dnorm(178,20), b ~ dlnorm(0,1), sigma ~ dunif(0,50) ),data=howDat ) m43 %\u0026gt;% precis %\u0026gt;% toOrg    row.names mean sd 5.5% 94.5%     a 154.601366268055 0.270307670586024 154.169362403256 155.033370132855   b 0.90328084058895 0.041923632631821 0.83627877851613 0.970282902661771   sigma 5.07188106954248 0.191154797986941 4.76637878273641 5.37738335634854    Now we can incorporate the new information we have.\nm43b\u0026lt;-quap( alist( height ~ dnorm(mu,sigma), mu\u0026lt;-a+b*weight, a ~ dnorm(178,20), b ~ dlnorm(0,1), sigma ~ dunif(0,50) ),data=howDat ) m43b %\u0026gt;% precis %\u0026gt;% toOrg    row.names mean sd 5.5% 94.5%     a 114.515009160638 1.89397291870405 111.488074634765 117.54194368651   b 0.891112682994587 0.0416750085549524 0.824507970215838 0.957717395773337   sigma 5.06263423083996 0.190299406826185 4.75849902431897 5.36676943736095    Thus we note that the slope is the same, while the intercept changes. Now we need to check the covariances. We will convert from the variable covariance scale to the correlation matrix.\nm43b %\u0026gt;% vcov %\u0026gt;% cov2cor %\u0026gt;% round(.,2) a b sigma a 1.00 -0.99 0.02 b -0.99 1.00 -0.02 sigma 0.02 -0.02 1.00 m43 %\u0026gt;% vcov %\u0026gt;% cov2cor %\u0026gt;% round(.,2) a b sigma a 1 0 0 b 0 1 0 sigma 0 0 1 The contrast between the two is very clear from the correlation matrices, the new model has an almost perfect negatively correlated intercept and slope.\nm43 %\u0026gt;% pairs   m43b %\u0026gt;% pairs   This indicates that the scaling of the variables leads to a completely different model in terms of the parameter relationships, in-spite of the fact that the models have almost the same posterior predictions.\n  Summer of 2020 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/sr2-ch2-ch3-ch4/","tags":["solutions","R","SR2"],"title":"SR2 :: Solutions for Chapters {2,3,4}"},{"categories":["programming"],"contents":" This post discusses briefly, the nix-shell environment for reproducible programming. In particular, there is an emphasis on extensions for installing and working with packages not in CRAN, i.e. packages off Github which are normally installed with devtools.\n Background The entire nix ecosystem is fantastic, and is the main packaging system used by d-SEAMS as well. Recently I began working through the excellent second edition of \u0026ldquo;Statistical Rethinking\u0026rdquo; by Richard McElreath1.\nUnfortunately, the rethinking package which is a major component of the book itself depends on the V8 engine for some reason. The reigning AUR2 package (V8-r) broke with a fun error message I couldn\u0026rsquo;t be bothered to deal with. Ominously, the rest of the logs prominently featured Warning: Running gclient on Python 3.. Given that older python versions have been permanently retired, this seemed like a bad thing to deal with3. In any case, having weaned off non-nix dependency tools for python and friends, it seemed strange to not do the same for R.\nThe standard installation for the package entails obtaining rstan (which is trivial with nixpkgs) and then using:\ninstall.packages(c(\u0026#34;coda\u0026#34;,\u0026#34;mvtnorm\u0026#34;,\u0026#34;devtools\u0026#34;,\u0026#34;loo\u0026#34;,\u0026#34;dagitty\u0026#34;)) library(devtools) devtools::install_github(\u0026#34;rmcelreath/rethinking\u0026#34;) We will break this down and work through this installation in Nix space.\nNix and R The standard approach to setting up a project shell.nix is simply by using the mkshell function. There are some common aspects to this workflow, with more language specific details documented here. A simple first version might be:\nlet pkgs = import \u0026lt;nixpkgs\u0026gt; { }; in pkgs.mkShell { buildInputs = with pkgs; [ zsh R rPackages.ggplot rPackages.data_table ]; shellHook = \u0026#39;\u0026#39; echo \u0026#34;hello\u0026#34; \u0026#39;\u0026#39;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${glibcLocales}/lib/locale/locale-archive\u0026#34;; } Where we note that we can install CRAN packages as easily as regular packages (like R), except for the fact that they are kept in a pkgs.rPackages environment, as opposed to pkgs. This is actually a common convention most languages with central repos. The most interesting thing to note is that, similar to the convention for nix-python setups, packages with a dot in the name will be converted to having an underscore, i.e. data.table -\u0026gt; data_table.\nHowever, for the rethinking package, and many others, there is no current CRAN package, and so the rPackages approach fails.\nThe LOCALE_ARCHIVE needs to be set for Linux machines, and is required for working with other packages.\nNix-R and Devtools To work with non-CRAN packages, we need to modify our package setup a little. We will also simplify our file to split the pkgs and the r-pkgs.\nNaive Approach The naive approach works by using the shellHook to set R_LIBS_USER to save user packages per-project.\n{ pkgs ? import \u0026lt;nixpkgs\u0026gt; { } }: with pkgs; let my-r-pkgs = rWrapper.override { packages = with rPackages; [ ggplot2 knitr rstan tidyverse V8 dagitty coda mvtnorm shape Rcpp tidybayes ]; }; in mkShell { buildInputs = = with pkgs;[ git glibcLocales openssl openssh curl wget ]; inputsFrom = [ my-r-pkgs ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${glibcLocales}/lib/locale/locale-archive\u0026#34;; } Note that here we will also need to set the GIT_SSL_CAINFO to prevent some errors during the build process4.\nNative Approach The native approach essentially leverages the nix method for building R packages. This is the most reproducible of the lot, and also has the useful property of storing the files in the nix-store so re-using packages across different projects will not store, build or download the package again. The values required can be calculated from nix-prefetch-git as follows:\nnix-env -i nix-prefetch-git nix-prefetch-git https://github.com/rmcelreath/rethinking.git The crux of this approach is the following snippet5:\n(buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }) Project Shell This formulation for some strange reason does not work from the shell or environment by default, but does work with nix-shell --run bash --pure.\n{ pkgs ? import \u0026lt;nixpkgs\u0026gt; { } }: with pkgs; let my-r-pkgs = rWrapper.override { packages = with rPackages; [ ggplot2 knitr rstan tidyverse V8 dagitty coda mvtnorm shape Rcpp tidybayes (buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }) ]; }; in mkShell { buildInputs = with pkgs; [ git glibcLocales openssl which openssh curl wget my-r-pkgs ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; echo ${my-r-pkgs}/bin/R \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${glibcLocales}/lib/locale/locale-archive\u0026#34;; } The reason behind this is simply that rWrapper forms an extra package which has lower precedence than the user profile R, which is documented in more detail here on the NixOS wiki.\nUser Profile This is a more general approach which defines the environment for R with all the relevant libraries and is described in the nixpkgs manual. The following code should be placed in $HOME/.config/nixpkgs/config.nix:\n{ packageOverrides = super: let self = super.pkgs; in { rEnv = super.rWrapper.override { packages = with self.rPackages; [ ggplot2 knitr tidyverse tidybayes (buildRPackage { name = \u0026#34;rethinking\u0026#34;; src = self.fetchFromGitHub { owner = \u0026#34;rmcelreath\u0026#34;; repo = \u0026#34;rethinking\u0026#34;; rev = \u0026#34;d0978c7f8b6329b94efa2014658d750ae12b1fa2\u0026#34;; sha256 = \u0026#34;1qip6x3f6j9lmcmck6sjrj50a5azqfl6rfhp4fdj7ddabpb8n0z0\u0026#34;; }; propagatedBuildInputs = [ coda MASS mvtnorm loo shape rstan dagitty ]; }) ]; }; }; } This snippet allows us to use our R as follows:\n# Install things nix-env -f \u0026#34;\u0026lt;nixpkgs\u0026gt;\u0026#34; -iA rEnv # Fix locale export LOCALE_ARCHIVE=\u0026#34;$(nix-build --no-out-link \u0026#34;\u0026lt;nixpkgs\u0026gt;\u0026#34; -A glibcLocales)/lib/locale/locale-archive\u0026#34; # Profit R Note that in this method, on Linux systems, the locale problem has to be fixed with the explicit export. This means that this should be used mostly with project level environments, instead of populating the global shell RC files.\nUpdate: There is another post with methods to reload this configuration automatically\nConclusions Of the methods described, the most useful method for working with packages not hosted on CRAN is through the user-profile, while the shell.nix method is useful in conjunction, for managing various projects. So the ideal approach is then to use the user profile for installing anything which normally uses devtools and then use shell.nix for the rest.\nNote that if the Project Shell is used with a User Profile as described in the next section, all packages defined there can be dropped and then the project shell does not need to execute R by default. The simplified shell.nix is then simply:\n{ pkgs ? import \u0026lt;nixpkgs\u0026gt; { } }: with pkgs; let my-r-pkgs = rWrapper.override { packages = with rPackages; [ ggplot2 ]; }; in mkShell { buildInputs = with pkgs;[ git glibcLocales openssl which openssh curl wget my-r-pkgs ]; inputsFrom = [ my-r-pkgs ]; shellHook = \u0026#39;\u0026#39; mkdir -p \u0026#34;$(pwd)/_libs\u0026#34; export R_LIBS_USER=\u0026#34;$(pwd)/_libs\u0026#34; \u0026#39;\u0026#39;; GIT_SSL_CAINFO = \u0026#34;${cacert}/etc/ssl/certs/ca-bundle.crt\u0026#34;; LOCALE_ARCHIVE = stdenv.lib.optionalString stdenv.isLinux \u0026#34;${glibcLocales}/lib/locale/locale-archive\u0026#34;; } The entire workflow for rethinking is continued here.\n  As part of a summer course at the University of Iceland relating to their successful COVID-19 model \u0026#x21a9;\u0026#xfe0e;\n The Arch User Repository is the port of first call for most ArchLinux users \u0026#x21a9;\u0026#xfe0e;\n Though, like any good AUR user, I did post a bug report \u0026#x21a9;\u0026#xfe0e;\n This approach is also discussed here \u0026#x21a9;\u0026#xfe0e;\n As discussed on this issue, this stackoverflow question and also seen here \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/nix-r-devtools/","tags":["tools","nix","workflow","R"],"title":"Nix with R and devtools"},{"categories":["notes"],"contents":"Background I recently had the opportunity to take part in an AMA (ask me anything) session for the CS106A students on Machine Learning for the Physical Sciences. This is a post about the technical issues, and also includes a video if you read through.\nZoom and LosslessCut Zoom recordings are one of the nicer ways to deal with switching windows and screen sharing, especially after fixing the dark screen glitch. However, though LosslessCut works really well to get cut-points, exporting and merging the file into one caused a bunch of glitches.\nEnter Handbrake To not beat around the bush, the solution was to simply encode the Zoom recording with Handbrake before using LosslessCut1. Since the conversion takes a while, it is also neat to note that you can directly export the cut points made with LosslessCut on the original video, then import them onto the newly encoded file.\nConclusions I am not really sure how this will turn out, but it is a useful thing to keep in mind. The introductory video turned out to be:\n    For me, the Vimeo Youtube HQ 1080p60 preset worked out well \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/losslesscut-zoom-ama/","tags":["teaching","cs106a","tools"],"title":"LosslessCut, Zoom and an AMA for CS106A"},{"categories":["notes"],"contents":"Background I have been leading the fantastic section 881 as a virtual section leader for the Stanford CS106A: Code in Place initiative for the past four weeks. I have also spent a lot of time on Zoom, sharing my screen. Fun fact. My screen shares look like this:\n  Figure 1: Zoom screen share with weird overlay\n  This post is about hunting down what caused this amazing zoom glitch1 and how I finally fixed it.\nTiling Windows and Compositors For reasons best left to another post, I use the fabulous i3 window manager, with colemak keybindings described here. Recall that, from Wikipedia:\n A compositing window manager is a window manager that provides applications with an off-screen buffer for each window. The window manager composites the window buffers into an image representing the screen and writes the result into the display memory.\n For reasons I can no longer recall, compton has been a traditional aspect of my workflow. As per my last update back in April last year; my configuration is here.\nCompton to Picom Some time ago (actually many months ago), compton itself transitioned over to picom, but remained largely compatible with my old configuration2. To be clear, the transition was largely painless, with ample warnings in the terminal showing up; along with very reasonable fallbacks. The key aspect of my compton.conf which caused the shadowing was:\nshadow = true; shadow-radius = 5; shadow-offset-x = -5; shadow-offset-y = -5; shadow-opacity = 0.5; The corrective measure was simply to set shadow-opacity to nothing; that is:\nshadow-opacity = 0.0; The rest of the configuration is here; and contains a lot more, mostly pertaining to opacity and other pretty effects3.\nConclusion Finally we have achieved the goal of having normal screen sharing capabilities; as seen below:\n  Figure 2: Just in time to see an excellent pun\n  The struggle was real, though the cause was trivial, and really highlights the need to always know your system packages. In this case, no doubt my students would have preferred not having to suffer through the darkness of my screen4. This has been a rather trivial post, but one to keep in mind none-the-less.\nComments The older commenting system was implemented with utteranc.es as seen below.\n   To be clear, none of the windows were the glitch. The issue was the darkened overlay \u0026#x21a9;\u0026#xfe0e;\n As always, the ArchLinux Wiki is a great place for more information \u0026#x21a9;\u0026#xfe0e;\n The rest of my Dotfiles, managed by the excellent dotgit are also worth a look \u0026#x21a9;\u0026#xfe0e;\n Though it might have also served as a metaphor for darkness \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/compton-zoom-shadow/","tags":["workflow","tools"],"title":"Compton to Picom and Zoom Glitches"},{"categories":["programming"],"contents":"Background One of the main reasons to use orgmode is definitely to get a better note taking workflow. Closely related to blogging or writing, the ideal note workflow is one which lets you keep a bunch of throwaway ideas and also somehow have access to them in a coherent manner. This will be a long post, and it is a work-in-progress, so, keep that in mind. Since this is mainly me1 work-shopping my technique, the philosophy will come in a later post probably. This workflow is documented more sparsely in my config file here, in the noteYoda section2. Some parts of this post also include mini video clips for clarity3.\nThe entire workflow will end up being something like this4:\n  Concept While working through ideas, it actually was more useful to describe the workflow I want, and then implement it, instead of relying on the canned approaches of each package. So the basics of the ideology are listed below.\nReference Management Reference management is one of the main reasons to consider a plain-text setup, and mine is no different. The options most commonly seen are:\n Mendeley This is a great option, and the most mobile friendly of the bunch. Sadly, the price tiers aren\u0026rsquo;t very friendly so I have to give it a hard pass. Jabref This is fun, but really more of a per-project management system, but it works well for that. The fact that it is Java based was a major issue for me. Zotero This is what I personally use and recommend. More on that in a later post.  Notes The idea is to be able to create notes for all kinds of content. Specifically, papers or books, along with webpages. This then requires a separate system for each which is described by:\n Search Engine The search engine is key, both in terms of accessibility and scalability. It is assumed that there will be many notes, and that they will have a wide variety of content. The search interface must then simply allow us to narrow down our candidates in a meaningful manner. Contextual Representation This aspect of the workflow deals with representations, which should transcend the usage of tags or categories. In particular, it would be nice to be able to visualize the flow of ideas, each represented by a note. Backlinks In particular, by backlinks at this point we are referring to the ability to link to a pdf or a website with a unique key such that notes can be added or removed at will. Storage Not actually part of the workflow in the same way, since it will be handled at the system level, it is worth nothing, that in this workflow Zotero is used to export a master bib file and keeps it updated, while the notes themselves are version controlled5.  The concepts above will be handled by the following packages.\n   Concept Package Note     Search deft Has a great interface   Context org-roam Allows the export of graphiz mindmaps   Backlinks org-roam, org-ref, org-noter Covers websites, bibliographies, and pdfs respectively    A key component in this workflow is actually facilitated by the fabulous org-roam-bibtex or ORB. The basic idea is to ensure meaningful templates which interpolate smoothly with org-roam, org-ref, helm-bibtex, and org-capture.\nBasic Variables Given the packages we will be using, some variable settings are in order, namely:\n(setq org_notes (concat (getenv \u0026#34;HOME\u0026#34;) \u0026#34;/Git/Gitlab/Mine/Notes/\u0026#34;) zot_bib (concat (getenv \u0026#34;HOME\u0026#34;) \u0026#34;/GDrive/zotLib.bib\u0026#34;) org-directory org_notes deft-directory org_notes org-roam-directory org_notes ) Search For the search setup, the doom-emacs deft setup, by adding +deft in my init.el, worked out of the box for me. For those who do not use doom6, the following should suffice:\n(use-package deft :commands deft :init (setq deft-default-extension \u0026#34;org\u0026#34; ;; de-couples filename and note title: deft-use-filename-as-title nil deft-use-filter-string-for-filename t ;; disable auto-save deft-auto-save-interval -1.0 ;; converts the filter string into a readable file-name using kebab-case: deft-file-naming-rules \u0026#39;((noslash . \u0026#34;-\u0026#34;) (nospace . \u0026#34;-\u0026#34;) (case-fn . downcase))) :config (add-to-list \u0026#39;deft-extensions \u0026#34;tex\u0026#34;) ) For more about the doom-emacs defaults, check the Github repo. The other aspect of interacting with the notes is via the org-roam interface and will be covered below.\nBibliography Since I will be using org-ref, it makes no sense to load or work with the +biblio module at the moment. Thus this section is actually doom agnostic. The basic tools of bibliographic management from the emacs end are the venerable helm-bibtex (repo here) and org-ref (repo here). In order to make this guide complete, I will also describe the Zotero settings I have.\nZotero Without getting too deep into the weeds here, the basic requirements are:\n Zotero The better bibtex extension  The idea is to then have one top level .bib file in some handy location which you will set up to sync automatically. To make life easier, there is a tiny recording of the next steps.\n  Helm-Bibtex This venerable package is really good at interfacing with a variety of externally formatted bibliographic managers.\n(setq bibtex-completion-notes-path \u0026#34;/home/haozeke/Git/Gitlab/Mine/Notes/\u0026#34; bibtex-completion-bibliography \u0026#34;/home/haozeke/GDrive/zotLib.bib\u0026#34; bibtex-completion-pdf-field \u0026#34;file\u0026#34; bibtex-completion-notes-template-multiple-files (concat \u0026#34;#+TITLE: ${title}\\n\u0026#34; \u0026#34;#+ROAM_KEY: cite:${=key=}\\n\u0026#34; \u0026#34;* TODO Notes\\n\u0026#34; \u0026#34;:PROPERTIES:\\n\u0026#34; \u0026#34;:Custom_ID: ${=key=}\\n\u0026#34; \u0026#34;:NOTER_DOCUMENT: %(orb-process-file-field \\\u0026#34;${=key=}\\\u0026#34;)\\n\u0026#34; \u0026#34;:AUTHOR: ${author-abbrev}\\n\u0026#34; \u0026#34;:JOURNAL: ${journaltitle}\\n\u0026#34; \u0026#34;:DATE: ${date}\\n\u0026#34; \u0026#34;:YEAR: ${year}\\n\u0026#34; \u0026#34;:DOI: ${doi}\\n\u0026#34; \u0026#34;:URL: ${url}\\n\u0026#34; \u0026#34;:END:\\n\\n\u0026#34; ) ) doom-emacs users like me might want to wrap the above in a nice after! org-ref expression, but it doesn\u0026rsquo;t really matter.\nExplanation To break-down aspects of the configuration snippet above:\n The template includes the orb-process-file-field function to allow selecting the pdf to be used with org-noter The file field is specified to work with the .bib file generated by Zotero helm-bibtex allows for any of the keys in a .bib file to be used in a template, and an overly expressive one is more useful The ROAM_KEY is defined to ensure that cite backlinks work correctly with org-roam As I prefer to have one notes file per pdf, I have only configured the bibtex-completion-notes-template-multiple-files variable  Org-Ref As discussed above, this just makes citations much more meaningful in orgmode.\n(use-package org-ref :config (setq org-ref-completion-library \u0026#39;org-ref-ivy-cite org-ref-get-pdf-filename-function \u0026#39;org-ref-get-pdf-filename-helm-bibtex org-ref-default-bibliography (list \u0026#34;/home/haozeke/GDrive/zotLib.bib\u0026#34;) org-ref-bibliography-notes \u0026#34;/home/haozeke/Git/Gitlab/Mine/Notes/bibnotes.org\u0026#34; org-ref-note-title-format \u0026#34;* TODO %y - %t\\n :PROPERTIES:\\n :Custom_ID: %k\\n :NOTER_DOCUMENT: %F\\n :ROAM_KEY: cite:%k\\n :AUTHOR: %9a\\n :JOURNAL: %j\\n :YEAR: %y\\n :VOLUME: %v\\n :PAGES: %p\\n :DOI: %D\\n :URL: %U\\n :END:\\n\\n\u0026#34; org-ref-notes-directory \u0026#34;/home/haozeke/Git/Gitlab/Mine/Notes/\u0026#34; org-ref-notes-function \u0026#39;orb-edit-notes )) An essential aspect of this configuration is just that most of heavy lifting in terms of the notes are palmed off to helm-bibtex.\nExplanation To break-down aspects of the configuration snippet above:\n The org-ref-get-pdf-filename-function simply uses the helm-bibtex settings to find the pdf The default bibliography and notes directory are set to the same location as all the org-roam files, to encourage a flat hierarchy The org-ref-notes-function simply ensures that, like the helm-bibtex settings, I expect one file per pdf, and that I would like to use my org-roam template instead of the org-ref or helm-bibtex one  Note that for some reason, the format specifiers for org-ref are not the keys in .bib but are instead, the following7:\nIn the format, the following percent escapes will be expanded. %l The BibTeX label of the citation. %a List of author names, see also `reftex-cite-punctuation\u0026#39;. %2a Like %a, but abbreviate more than 2 authors like Jones et al. %A First author name only. %e Works like %a, but on list of editor names. (%2e and %E work as well) It is also possible to access all other BibTeX database fields: %b booktitle %c chapter %d edition %h howpublished %i institution %j journal %k key %m month %n number %o organization %p pages %P first page %r address %s school %u publisher %t title %v volume %y year %B booktitle, abbreviated %T title, abbreviated %U url %D doi %S series %N note %f pdf filename %F absolute pdf filename Usually, only %l is needed. The other stuff is mainly for the echo area display, and for (setq reftex-comment-citations t). %\u0026lt; as a special operator kills punctuation and space around it after the string has been formatted. A pair of square brackets indicates an optional argument, and RefTeX will prompt for the values of these arguments. Indexing Notes This part of the workflow builds on the concepts best known as the Zettelkasten method. More details about the philosophy behind org-roam is here.\nOrg-Roam The first part of this interface is essentially just the doom-emacs configuration, adapted for those who don\u0026rsquo;t believe in the dark side below.\n(use-package org-roam :hook (org-load . org-roam-mode) :commands (org-roam-buffer-toggle-display org-roam-find-file org-roam-graph org-roam-insert org-roam-switch-to-buffer org-roam-dailies-date org-roam-dailies-today org-roam-dailies-tomorrow org-roam-dailies-yesterday) :preface ;; Set this to nil so we can later detect whether the user has set a custom ;; directory for it, and default to `org-directory\u0026#39; if they haven\u0026#39;t. (defvar org-roam-directory nil) :init :config (setq org-roam-directory (expand-file-name (or org-roam-directory \u0026#34;roam\u0026#34;) org-directory) org-roam-verbose nil ; https://youtu.be/fn4jIlFwuLU org-roam-buffer-no-delete-other-windows t ; make org-roam buffer sticky org-roam-completion-system \u0026#39;default ) ;; Normally, the org-roam buffer doesn\u0026#39;t open until you explicitly call ;; `org-roam\u0026#39;. If `+org-roam-open-buffer-on-find-file\u0026#39; is non-nil, the ;; org-roam buffer will be opened for you when you use `org-roam-find-file\u0026#39; ;; (but not `find-file\u0026#39;, to limit the scope of this behavior). (add-hook \u0026#39;find-file-hook (defun +org-roam-open-buffer-maybe-h () (and +org-roam-open-buffer-on-find-file (memq \u0026#39;org-roam-buffer--update-maybe post-command-hook) (not (window-parameter nil \u0026#39;window-side)) ; don\u0026#39;t proc for popups (not (eq \u0026#39;visible (org-roam-buffer--visibility))) (with-current-buffer (window-buffer) (org-roam-buffer--get-create))))) ;; Hide the mode line in the org-roam buffer, since it serves no purpose. This ;; makes it easier to distinguish among other org buffers. (add-hook \u0026#39;org-roam-buffer-prepare-hook #\u0026#39;hide-mode-line-mode)) ;; Since the org module lazy loads org-protocol (waits until an org URL is ;; detected), we can safely chain `org-roam-protocol\u0026#39; to it. (use-package org-roam-protocol :after org-protocol) (use-package company-org-roam :after org-roam :config (set-company-backend! \u0026#39;org-mode \u0026#39;(company-org-roam company-yasnippet company-dabbrev))) Once again, for more details, check the Github repo.\nOrg-Roam-Bibtex The configuration required is:\n(use-package org-roam-bibtex :after (org-roam) :hook (org-roam-mode . org-roam-bibtex-mode) :config (setq org-roam-bibtex-preformat-keywords \u0026#39;(\u0026#34;=key=\u0026#34; \u0026#34;title\u0026#34; \u0026#34;url\u0026#34; \u0026#34;file\u0026#34; \u0026#34;author-or-editor\u0026#34; \u0026#34;keywords\u0026#34;)) (setq orb-templates \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;ref\u0026#34; plain (function org-roam-capture--get-point) \u0026#34;\u0026#34; :file-name \u0026#34;${slug}\u0026#34; :head \u0026#34;#+TITLE: ${=key=}: ${title}\\n#+ROAM_KEY: ${ref} - tags :: - keywords :: ${keywords} \\n* ${title}\\n :PROPERTIES:\\n :Custom_ID: ${=key=}\\n :URL: ${url}\\n :AUTHOR: ${author-or-editor}\\n :NOTER_DOCUMENT: %(orb-process-file-field \\\u0026#34;${=key=}\\\u0026#34;)\\n :NOTER_PAGE: \\n :END:\\n\\n\u0026#34; :unnarrowed t)))) Where most of the configuration is essentially the template again. Like helm-bibtex, ORB allows taking arbitrary keys from the .bib file.\nOrg Noter The final aspect of a pdf workflow is simply ensuring that every pdf is associated with notes. The philosophy of org-noter is best described here. Only minor tweaks should be required to get this working with interleave as well.\n(use-package org-noter :after (:any org pdf-view) :config (setq ;; The WM can handle splits org-noter-notes-window-location \u0026#39;other-frame ;; Please stop opening frames org-noter-always-create-frame nil ;; I want to see the whole file org-noter-hide-other nil ;; Everything is relative to the main notes file org-noter-notes-search-path (list org_notes) ) ) Evidently, from my configuration, it appears that I decided to use org-noter over the more commonly described interleave because it has better support for working with multiple documents linked to one file.\nOrg-Protocol I will only cover the bare minimum relating to the use of org-capture here, because eventually I intend to handle a lot more cases with orca. Note that this part of the workflow has more to do with using org-roam with websites than pdf files.\nTemplates This might get complicated but I am only trying to get the bare minimum for org-protocol right now.\n;; Actually start using templates (after! org-capture ;; Firefox and Chrome (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;P\u0026#34; \u0026#34;Protocol\u0026#34; entry ; key, name, type (file+headline +org-capture-notes-file \u0026#34;Inbox\u0026#34;) ; target \u0026#34;* %^{Title}\\nSource: %u, %c\\n #+BEGIN_QUOTE\\n%i\\n#+END_QUOTE\\n\\n\\n%?\u0026#34; :prepend t ; properties :kill-buffer t)) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;L\u0026#34; \u0026#34;Protocol Link\u0026#34; entry (file+headline +org-capture-notes-file \u0026#34;Inbox\u0026#34;) \u0026#34;* %? [[%:link][%(transform-square-brackets-to-round-ones \\\u0026#34;%:description\\\u0026#34;)]]\\n\u0026#34; :prepend t :kill-buffer t)) ) Conclusions At this point, many might argue that since by the end, only one template is called, defining the rest were pointless. They would be right, however, this is just how my configuration evolved. Feel free to cannibalize this for your personal benefit. Eventually I plan to expand this into something with org-journal as well, but not right now.\nComments The older commenting system was implemented with utteranc.es as seen below.\n   Rohit Goswami that is, from the landing page; obviously \u0026#x21a9;\u0026#xfe0e;\n This is a reference to my fantastic pet, named Yoda \u0026#x21a9;\u0026#xfe0e;\n Recorded with SimpleScreenRecorder, cut with LosslessCut, uploaded to YouTube, and embedded with a Hugo shortcode \u0026#x21a9;\u0026#xfe0e;\n The video uses org-ref-notes-function-many-files as the org-ref-notes-function so the template looks a little different \u0026#x21a9;\u0026#xfe0e;\n For some strange reason a lot of online posts suggested Dropbox for syncing notes, which makes no sense to me, it is always better to have version control and ignore rules \u0026#x21a9;\u0026#xfe0e;\n Therefore clearly proving that the cookies of the dark side have no power in the holy text editor war \u0026#x21a9;\u0026#xfe0e;\n Where these are from the org-ref documentation \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/org-note-workflow/","tags":["tools","emacs","workflow","orgmode"],"title":"An Orgmode Note Workflow"},{"categories":["programming"],"contents":" A more actionable follow up to my personal recollections relating to my switch to Colemak.\n Background I have, in the past written about how I made the switch to Colemak. However, until recently, I was still trying to mimic the VIM keybindings from QWERTY. This is a post where I discuss the changes I made to ensure that I never have to stretch my fingers in odd ways again. The main idea is expressed well by vim-colemak.\nColemak layout: | QWERTY layout: `12345 67890-= Move around: | (instead of) `12345 67890-= qwfpg jluy;[]\\  e | k qwert yuiop[]\\  arstd HNEIo\u0026#39; h i | h l asdfg HJKL;\u0026#39; zxcvb km,./ n | j zxcvb nm,./ Sudoers It is important to note that the sudo command does not automatically pick up on your keyboard layout. It is best to set this explicitly. Use visudo and un-comment Defaults env_keep += \u0026quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET\u0026quot;, or:\nsu echo \u0026#39;Defaults env_keep += \u0026#34;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/sudoers Emacs Though I have mentioned publicly, that I was using the regular QWERTY motion keys, I realized I had actually started to use the mouse more often, simply because it was a pain to navigate. Thankfully, emacs has evil-colemak-basics, which is fabulous. For reference, these make it really easy for QWERTY users to make the switch if they\u0026rsquo;re previously used to VIM bindings.\n   Colemak Qwerty Action States At Qwerty position? Remarks     h, n, e, i h, j, k, l navigate mnvo yes    k, K n, N search next/previous mnvo yes    u, U i, I insert _nv_ yes    l u undo _nv_ yes    N J join lines _nv_ yes    E K lookup mnv_ yes    u i inner text object keymap ___o yes    f, F e, E jump to end of word mnvo yes with t-f-j rotation   t, T f, f jump to character mnvo yes with t-f-j rotation   j, J t, T jump until character mnvo no with t-f-j rotation   j, J e, E jump to end of word mnvo no without t-f-j rotation    Where the table above is from the fantastic readme.\nI still had some issues, mostly relating to searching in buffers, so I ended using swiper-isearch more which is a bonus too.\nVisual Lines Since I tend to keep visual-line-mode all the time, it makes sense to actually swap working with lines and visual lines. To work this through this needs evil-better-visual-line.\n(use-package! evil-better-visual-line :after evil-colemak-basics :config (evil-better-visual-line-on) (map! :map evil-colemak-basics-keymap (:nvm \u0026#34;n\u0026#34; \u0026#39;evil-better-visual-line-next-line :nvm \u0026#34;e\u0026#34; \u0026#39;evil-better-visual-line-previous-line :nvm \u0026#34;g n\u0026#34; \u0026#39;evil-next-line :nvm \u0026#34;g e\u0026#34; \u0026#39;evil-previous-line)) ) Pdf-Tools For my doom-emacs configuration, I also set the following map:\n(after! pdf-view (add-hook! \u0026#39;pdf-view-mode-hook (evil-colemak-basics-mode -1)) (map! :map pdf-view-mode-map :n \u0026#34;g g\u0026#34; #\u0026#39;pdf-view-first-page :n \u0026#34;G\u0026#34; #\u0026#39;pdf-view-last-page :n \u0026#34;N\u0026#34; #\u0026#39;pdf-view-next-page-command :n \u0026#34;E\u0026#34; #\u0026#39;pdf-view-previous-page-command :n \u0026#34;e\u0026#34; #\u0026#39;evil-collection-pdf-view-previous-line-or-previous-page :n \u0026#34;n\u0026#34; #\u0026#39;evil-collection-pdf-view-next-line-or-next-page ) Where the most important thing is the hook which removes the evil-colemak-basics binding. Since it is a single mode and hook, after-hook! is the same as after-hook1.\nWindow Management Somehow these are not part of the evil-colemak defaults.\n(after! evil (map! :map evil-window-map (:leader (:prefix (\u0026#34;w\u0026#34; . \u0026#34;Select Window\u0026#34;) :n :desc \u0026#34;Left\u0026#34; \u0026#34;h\u0026#34; \u0026#39;evil-window-left :n :desc \u0026#34;Up\u0026#34; \u0026#34;e\u0026#34; \u0026#39;evil-window-up :n :desc \u0026#34;Down\u0026#34; \u0026#34;n\u0026#34; \u0026#39;evil-window-down :n :desc \u0026#34;Right\u0026#34; \u0026#34;i\u0026#34; \u0026#39;evil-window-right )) )) Search Harmonizing with Vimium.\n(after! evil (map! :map evil-motion-state-map (:n :desc \u0026#34;Previous match\u0026#34; \u0026#34;K\u0026#34; \u0026#39;evil-ex-search-previous :n :desc \u0026#34;Next match\u0026#34; \u0026#34;k\u0026#34; \u0026#39;evil-ex-search-next :n :desc \u0026#34;Forward search\u0026#34; \u0026#34;/\u0026#34; \u0026#39;evil-search-forward ) )) Page Movement Though this is more of a personal preference, I find it more natural to bind N and E to page-wise movement instead of join lines and lookup, since I almost never use those commands, and the movement keys echo what I expect elsewhere.\n(after! evil (map! :map evil-colemak-basics-keymap :nv \u0026#34;N\u0026#34; \u0026#39;evil-scroll-page-up :nv \u0026#34;E\u0026#34; \u0026#39;evil-scroll-page-down) ) Evil Org Annoyingly, evil-org-mode had a map which kept overriding all my other settings. Thankfully it has a helper variable to set movement. I also do not need this anyway, at-least not by default.\n(after! org (remove-hook \u0026#39;org-mode-hook \u0026#39;evil-org-mode) (setq evil-org-movement-bindings \u0026#39;((up . \u0026#34;e\u0026#34;) (down . \u0026#34;n\u0026#34;) (left . \u0026#34;h\u0026#34;) (right . \u0026#34;i\u0026#34;)) ) ) Vimium I use the excellent vimium to make Chrome be a little less annoying. Luckily the Wiki seems to have a reasonable suggestion for colemak. The basic idea is to migrate the underlying keys directly to ensure very few manual changes are required.\nmapkey n j mapkey N J mapkey e k mapkey E K mapkey i l mapkey I L mapkey k n mapkey K N mapkey l i mapkey L I mapkey j e mapkey J E Vim For a lot of terminal edits, vim is still my editor of choice, and vim-colemak works without any trouble in my configuration.\nZsh To ensure uniform bindings, I used to use bindkey -v but will need some minor changes to that set up. I based this part of my configuration off the bindings of bunnyfly.\nbindkey -v # Colemak. bindkey -M vicmd \u0026#34;h\u0026#34; backward-char bindkey -M vicmd \u0026#34;n\u0026#34; down-line-or-history bindkey -M vicmd \u0026#34;e\u0026#34; up-line-or-history bindkey -M vicmd \u0026#34;i\u0026#34; forward-char bindkey -M vicmd \u0026#34;s\u0026#34; vi-insert bindkey -M vicmd \u0026#34;S\u0026#34; vi-insert-bol bindkey -M vicmd \u0026#34;k\u0026#34; vi-repeat-search bindkey -M vicmd \u0026#34;K\u0026#34; vi-rev-repeat-search bindkey -M vicmd \u0026#34;l\u0026#34; beginning-of-line bindkey -M vicmd \u0026#34;L\u0026#34; end-of-line bindkey -M vicmd \u0026#34;j\u0026#34; vi-forward-word-end bindkey -M vicmd \u0026#34;J\u0026#34; vi-forward-blank-word-end # Sane Undo, Redo, Backspace, Delete. bindkey -M vicmd \u0026#34;u\u0026#34; undo bindkey -M vicmd \u0026#34;U\u0026#34; redo bindkey -M vicmd \u0026#34;^?\u0026#34; backward-delete-char bindkey -M vicmd \u0026#34;^[[3~\u0026#34; delete-char # Keep ctrl+r searching bindkey -M viins \u0026#39;^R\u0026#39; history-incremental-pattern-search-forward bindkey -M viins \u0026#39;^r\u0026#39; history-incremental-pattern-search-backward Zathura There is no better pdf viewer than zathura, and it also works for djvu and friends. As a plus point, it normally has very reasonable vim bindings, and an excellent configuration system, so we will leverage that. The best part is that we can just add to it using include zathuraColemak or whatever so as to be minimally invasive.\nmap h scroll leftmap n scroll downmap e scroll upmap i scroll rightmap N scroll half-downmap E scroll half-upmap k search forwardmap K search backward# For TOC navigationmap [index] o toggle_index# hjkl â hneimap [index] n navigate_index downmap [index] e navigate_index upmap [index] h navigate_index collapsemap [index] i navigate_index expandmap [index] H navigate_index collapse-allmap [index] I navigate_index expand-allZathura is a complicated beast, however, and my full configuration contains a lot more information.\ni3 I have some bindings set up in terms of $left $right $up and $down, so it was simple to re-bind them.\nset $left hset $down nset $up eset $right iConclusions That seems to be it for now. If I think of more programs I use regularly which allow VIM bindings, or keybindings in general, I\u0026rsquo;ll probably just update this post. My full dotfiles are present here, and now include a colemak target.\n  The hook fix was suggested by the fantastic hlissner on the super friendly doom Discord server. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/colemak-dots-refactor/","tags":["workflow"],"title":"Refactoring Dotfiles For Colemak"},{"categories":["programming"],"contents":"Background One of the best things about writing in orgmode is that we can embed and execute arbitrary code snippets. However, not all languages have an exporter, for obvious reasons. Somewhat surprisingly, there is no way to call pandoc on embedded snippets, which feels like a waste, especially when a whole bunch of documentation formats can be converted to orgmode with it.\nConsider the following beautifully highlighted snippet of an rst (ReStructured Text) list table.\n.. list-table:: Title :widths: 25 25 50 :header-rows: 1 * - Heading row 1, column 1 - Heading row 1, column 2 - Heading row 1, column 3 * - Row 1, column 1 - - Row 1, column 3 * - Row 2, column 1 - Row 2, column 2 - Row 2, column 3Trying to run this will generate the sort of obvious error:\norg-babel-execute-src-block: No org-babel-execute function for rst! Writing an Exporter For this post, I will be focusing on rst, but this can be defined for any of the pandoc back-ends. The approach was inspired by ob-markdown.\n(defun org-babel-execute:rst (body params) \u0026#34;Execute a block of rst code with org-babel. This function is called by `org-babel-execute-src-block\u0026#39;.\u0026#34; (let* ((result-params (split-string (or (cdr (assoc :results params)) \u0026#34;\u0026#34;))) (in-file (org-babel-temp-file \u0026#34;rst-\u0026#34;)) (cmdline (cdr (assoc :cmdline params))) (to (cdr (assoc :to params))) (template (cdr (assoc :template params))) (cmd (concat \u0026#34;pandoc\u0026#34; \u0026#34; -t org\u0026#34; \u0026#34; -i \u0026#34; (org-babel-process-file-name in-file) \u0026#34; -f rst \u0026#34; \u0026#34; \u0026#34; cmdline))) (with-temp-file in-file (insert body)) (message cmd) (shell-command-to-string cmd))) ;; Send to results (defun org-babel-prep-session:rst (session params) \u0026#34;Return an error because rst does not support sessions.\u0026#34; (error \u0026#34;rst does not support sessions\u0026#34;)) Trying it out With that done, it is pretty trivial to re-run the above example.\n.. list-table:: Title :widths: 25 25 50 :header-rows: 1 * - Heading row 1, column 1 - Heading row 1, column 2 - Heading row 1, column 3 * - Row 1, column 1 - - Row 1, column 3 * - Row 2, column 1 - Row 2, column 2 - Row 2, column 3   Heading row 1, column 1 Heading row 1, column 2 Heading row 1, column 3     Row 1, column 1  Row 1, column 3   Row 2, column 1 Row 2, column 2          Note that we have used rst :exports both :results raw as the header argument.\nConclusions Will probably follow this up with an actual package, which should handle the entire spectrum of pandoc back-ends.\n","permalink":"https://rgoswami.me/posts/org-pandoc-babel/","tags":["tools","emacs","workflow","orgmode"],"title":"Pandoc to Orgmode with Babel"},{"categories":["programming"],"contents":"Background I have been wanting to find a workflow which allows me to bypass writing a lot of TeX by hand for a while now. To that end I looked into using a computer algebra system (CAS). Naturally, my first choice was the FOSS Maxima (also because it uses Lisp under the hood). However, for all the reasons listed here, relating to its accuracy, which have not been fixed even though the post was over 5 years ago, I ended up having to go with the closed source Mathematica.\nPackages Support for Mathematica in modern orgmode is mainly through the use of ob-mathematica, which is the official org-babel extension (from contrib) for working with Mathematica. However, ob-mathematica relies on the now-defunct mma package for font-locking, which is less than ideal. Thankfully, there exists the excellent wolfram-mode package which happens to be in MELPA as well. Finally, since the default return type of a mathematica block is an input-string meant to be used in another mathematica block, which is not useful when we work with org-babel, we will use the excellent mash.pl utility from here, as suggested by the ob-mathematica package to sanitize our output and set a unifying path.\nSo to recap, use your favorite manager to get:\n ob-mathematica (in contrib) wolfram-mode (MELPA) mash.pl (from here)1  After obtaining the packages, the configuration is then simply2:\n;; Load mathematica from contrib (org-babel-do-load-languages \u0026#39;org-babel-load-languages (append org-babel-load-languages \u0026#39;((mathematica . t)) )) ;; Sanitize output and deal with paths (setq org-babel-mathematica-command \u0026#34;~/.local/bin/mash\u0026#34;) ;; Font-locking (add-to-list \u0026#39;org-src-lang-modes \u0026#39;(\u0026#34;mathematica\u0026#34; . wolfram)) ;; For wolfram-mode (setq mathematica-command-line \u0026#34;~/.local/bin/mash\u0026#34;) Results LaTeX Now we are in a position to simply evaluate content with font-locking. We will test our set up with an example lifted from the ob-mathematica source-code.\n\nTable 1: A table     1 4     2 4   3 6   4 8   7 0    (1+Transpose@x)//TeXFormWhere our header-line (with #+begin_src) is:\nmathematica :var x=example-table :results latex Sanity Checks We can also test the example from the blog post earlier to test basic mathematical sanity.\nLimit[Log[b-a+Ieta],eta-\u0026gt;0,Direction-\u0026gt;-1,Assumptions-\u0026gt;{a\u0026gt;0,b\u0026gt;0,a\u0026gt;b}]TeXForm[Limit[Log[b-a+Ieta],eta-\u0026gt;0,Direction-\u0026gt;1,Assumptions-\u0026gt;{a\u0026gt;0,b\u0026gt;0,a\u0026gt;b}]]\\((I*Pi + Log[a - b])*\\log (a-b)-i \\pi\\)\nInline Math Note that we can now also write fractions, integrals and other cumbersome TeX objects a lot faster with this syntax, like \\(\\frac{x^3}{3}\\). Where we are using the following snippet:\nsrc_mathematica[:exports none :results raw]{Integrate[x^2,x] // TeXForm} Plots For plots, the standard orgmode rules apply, that is, we have to export to a file and return the name through our code snippet. Consider:\np=Plot[Sin[x],{x,0,6Pi},Frame-\u0026gt;True];Export[\u0026#34;images/sine.png\u0026#34;,p];Print[\u0026#34;images/sine.png\u0026#34;]  Figure 1: An exported Mathematica image\n  Where we have used mathematica :results file as our header line.\nComments The older commenting system was implemented with utteranc.es as seen below.\n   As noted in the comments, it is nicer to rename mash.pl to mash \u0026#x21a9;\u0026#xfe0e;\n For reference, my whole config is here \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/org-mathematica/","tags":["tools","emacs","workflow","orgmode"],"title":"Using Mathematica with Orgmode"},{"categories":["notes"],"contents":"Background As I mentioned earlier, I\u0026rsquo;m leading a section for Stanford CS106A: Code in Place. This post relates to the notes and thoughts garnered during the small group training session1.\nReflections Demographics Redacted. Did not use breakout meetings due to privacy issues.\nEngagement and Participation  Some people were more active (skewed responses) Some of the more rudimentary questions might have been suppressed  Highlighted Moments  Covering multiple perspectives Different mental models  Challenges and Transformations  Technical debt was an issue Lack of engagement Went on for too long  For me in particular:\n It took over two hours, and though most people stayed on, not everyone was engaged.\n Scenarios These are to be dealt with as per the guidelines here. Since different groups covered different scenarios, not all of these have answers here.\nEnsuring Engagement  You have some students who didn\u0026rsquo;t participate at all in the section. What do you do?\n Effective Communication  What might not be effective about the policy, âStudents should just tell me if I say something that offends themâ?\n Sharing Experiences  You just finished your section and are staying behind to answer questions from your students. A couple students asked what itâs like studying/working in an engineering/tech field.\nWhat things might you want to keep in mind when answering their questions?\n Time Management  Section went way over time due to lots of questions being asked by students. What are some time management strategies you can use moving forward?\n Homework Assists  A sectionee posts in your Ed group, âI am a little bit frustrated because I don\u0026rsquo;t really know where to start on the first assignment. A little hint would be very helpful.â How do you respond?\n Debugging  A sectionee shows you the following buggy code for printing all the elements in a list:\nmy_lst = [\u0026lsquo;apple\u0026rsquo;, \u0026lsquo;banana\u0026rsquo;, \u0026lsquo;carrot\u0026rsquo;] i = 0 while len(my_lst) \u0026gt; 0: print(my_lst[i]) i = i + 1\nThey explain that the code works (it prints all the elements in the right order) but then throws a weird error: âIndexError: list index out of range.â How would you help them find their bug?\n Quitting  You have a student who is already discouraged by how difficult the first assignment is and has told you they donât feel cut out for CS. What do you say to them?\n  Provide encouragement Give examples of hardship faced Be positive and make sure they donât feel worse, even if they do follow through and quit âYouâre not the firstâ Takes a lot of time. Doesnât happen overnight Ask them why they donât feel cut out and try to solve that problem  Looking up issues  Why might it be problematic to say something like, âItâs easy to download X or look up the answer to Yâ? Why might those statements not be true?\n  Difficulty in backgrounds (language barriers) They might not be able to understand stackoverflow.com until they learn more CS They might not know where to look online (lack of domain expertise) Dependencies (for downloads) Makes them feel bad if they donât end up finding it easy    This post was created on the day of training, 21-04-20, but will be posted later \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/scp-smallgrp-trainig/","tags":["teaching","cs106a"],"title":"CS106A Small Group Training"},{"categories":["notes"],"contents":"Background As I mentioned earlier, I\u0026rsquo;m leading a section for Stanford CS106A: Code in Place. I did also mention I\u0026rsquo;d try to keep a set of short notes on the process. I finally had my first section meeting!\nPreparation I went through the following:\n Sent out a welcome message Detailed the workflow Set up a HackMD instance Set up some slides in beamer1  However, after that, I was still concerned since I didn\u0026rsquo;t get much of a response on the ice-breakers for EdStem. Thankfully, everyone showed up.\nTeaching  I had a fabulous session, and we went through a variety of concepts. Didn\u0026rsquo;t spend much time on icebreakers, but did get a feel for where the students stand on the functional vs imperative programming paradigms Possibly because of working through two different approaches, the 40 minute long session went on for two hours and fifteen minutes. Some students had more of a background than the others, thankfully computational thinking is not normally taught very well  Conclusion  The notes are visible here, and the session was recorded here2 It was fun, and I hope the students enjoyed it as much as I did. I will probably expand this in terms of the concepts covered, to give the students more of an overview of what was covered    Even though most of the session was supposed to be live, it was still helpful to show I was interested enough to set up slides \u0026#x21a9;\u0026#xfe0e;\n As always, advice is much appreciated (and moderated) \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/scp-smallgrp-meet1/","tags":["teaching","cs106a"],"title":"CS106A Section Meeting I"},{"categories":["notes"],"contents":"Background As I mentioned in my last post, I\u0026rsquo;m leading a section for Stanford CS106A: Code in Place. I did also mention I\u0026rsquo;d try to keep a set of short notes on the process. So there1.\nThe Training Given the overwhelming number of students, and section leaders, the small groups are for fostering a community of teachers.\n Consider allowing for daisy chaining during introductions Discussions are the primary take-away Only the instructor should be coding during the session  Core components  Clarity Content Atmosphere Section management Correctness  Sectional Details  Check in at the start Notice the space Check in regularly Avoid negative phrases Establish norms and the general culture  Zoom Norms  Have people introduce themselves Mute people when they aren\u0026rsquo;t talking Raise hands Try to use icebreakers which respect privacy  Materials Here\u0026rsquo;s some of the stuff which, being as it was open-sourced, I suppose is OK to put here2.\n Section Leader Training Section Leaders\u0026rsquo; Guide to Virtual Sections Some Zoom Icebreakers    As you may know, the official playlist is here \u0026#x21a9;\u0026#xfe0e;\n If you know otherwise, let me know in the comments \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/scp-smallgrp/","tags":["teaching","cs106a"],"title":"Small Section On-boarding"},{"categories":["notes"],"contents":"Background A few weeks ago, I ended up recording a video for the Stanford CS106A: Code in Place initiative (which can be found here). I heard back a while ago, and am now to lead a section for the course!\nI\u0026rsquo;ll probably be making a series of short posts as this process continues.\nOn-Boarding This was very reminiscent of the Carpentries instructor training, which makes sense, given how well thought out that experience was.\nWe started out with a pre-presentation where people were able to just spitball and connect, which is pretty neat.\nOne of the interesting parts of this, was the idea of interactive recorded lectures, where the professors will be watching lectures with the students. The entire slide deck is here.\nThe other great idea for this kind of long course was the idea of having a Tea room and a Teachers lounge where people can just tune in to chat.\nCaveats A couple of things which keep cropping up for online teaching in general are the following:\n Zoom does not have persistent chats, so an auxiliary tool like an Etherpad is great  ","permalink":"https://rgoswami.me/posts/scp-onboarding/","tags":["ideas","teaching","cs106a"],"title":"On-boarding for Code in Place"},{"categories":["notes"],"contents":"Background Like a lot of my tech based rants, this was brought on by a recent Hacker News post. I won\u0026rsquo;t go into why the product listed there is a hollow faux FOSS rip-off. I won\u0026rsquo;t discuss how the \u0026lsquo;free\u0026rsquo; analytics option, like many others are just hobby projects taking pot shots at other projects. Or how insanely overpriced most alternatives are.\nI will however discuss why and how I transitioned to using the awesome Goat Counter.\nGoogle Analytics I would like to point out that it is OK to start out with Google Analytics. It is easy, and free, and scales well. There are reasons not to, but it is a good starting point.\nPros  Google Analytics is free, truly free The metrics are very detailed It is easy to set up  Cons  Privacy concerns Blocked by people Easy to obsess over metrics  Goat Counter As with most Hacker News posts, the article itself was nothing compared to the excellent comment thread. It was there that I came across people praising Goat Counter.\nPros  Is open sourced (here on Github) Super lightweight Anonymous statistics Easy to share  Cons  Has an upper limit on free accounts (10k a month) I am not very fond of Go  Conclusions I might eventually go back to GA, if I go over the 10k page view limit. Then again, I might not. It might be more like, I only care about the first 10k people who make it to my site.\nUPDATE: This site has since shifted to Clicky, for reasons outlined here\n","permalink":"https://rgoswami.me/posts/goat-google/","tags":["tools","rationale","workflow","ideas"],"title":"Analytics: Google to Goat"},{"categories":["notes"],"contents":" Explain why using bagging for prediction trees generally improves predictions over regular prediction trees.\n Introduction Bagging (or Bootstrap Aggregation) is one of the most commonly used ensemble method for improving the prediction of trees. We will broadly follow a historical development trend to understand the process. That is, we will begin by considering the Bootstrap method. This in turn requires knowledge of the Jacknife method, which is understandable from a simple bias variance perspective. Finally we will close out the discussion by considering the utility and trade-offs of the Bagging technique, and will draw attention to the fact that the Bagging method was contrasted to another popular ensemble method, namely the Random Forest method, in the previous section.\nBefore delving into the mathematics, recall that the approach taken by bagging is given as per Cichosz (2015) to be:\n create base models with bootstrap samples of the training set combine models by unweighted voting (for classification) or by averaging (for regression)  The reason for covering the Jacknife method is to develop an intuition relating to the sampling of data described in the following table:\n   Data-set Size per sample Estimator     Reduces Jacknife   Remains the same Bootstrap   Increases data-augmentation    Bias Variance Trade-offs We will recall, for this discussion, the bias variance trade off which is the basis of our model accuracy estimates (for regression) as per the formulation of James et al. (2013).\n\\begin{equation} E(yâ-\\hat{f}(xâ))Â²=\\mathrm{Var}(\\hat{f}(xâ))+[\\mathrm{Bias(\\hat{f(xâ)})}]Â²+\\mathrm{Var}(Îµ) \\end{equation}\nWhere:\n \\(E(y_{0}-\\hat{f}(x_{0}))Â²\\) is the expected test MSE, or the average test MSE if \\(f\\) is estimated with a large number of training sets and tested at each \\(xâ\\) The variance is the amount by which our approximation \\(\\hat{f}\\) will change if estimated by a different training set, or the flexibility error The bias is the (reducible) approximation error, caused by not fitting to the training set exactly \\(\\mathrm{Var}(Îµ)\\) is the irreducible error  We will also keep in mind, going forward the following requirements of a good estimator:\n Low variance AND low bias Typically, the variance increases while the bias decreases as we use more flexible methods (i.e.Â methods which fit the training set better1)  Also for the rest of this section, we will need to recall from Hastie, Tibshirani, and Friedman (2009), that the bias is given by:\n\\begin{equation} [E(\\hat{f_{k}}(xâ)-f(xâ)]Â² \\end{equation}\nWhere the expectation averages over the randomness in the training data.\nTo keep things in perspective, recall from Hastie, Tibshirani, and Friedman (2009):\n  Figure 1: Test and training error as a function of model complexity\n  Jacknife Estimates We will model our discussion on the work of Efron (1982). Note that:\n The \\(\\hat{Î¸}\\) symbol is an estimate of the true quantity \\(Î¸\\) This is defined by the estimate being \\(\\hat{Î¸}=Î¸(\\hat{F})\\) \\(\\hat{F}\\) is the empirical probability distribution, defined by mass \\(1/n\\) at \\(xáµ¢ â iâI\\), i is from 1 to n  The points above establishes our bias to be given by \\(E_FÎ¸(\\hat{F})-Î¸(F)\\) such that \\(E_F\\) is the expectation under xââ¯xâ~F.\nTo derive the Jacknife estimate \\((\\tilde{Î¸})\\) we will simply sequentially delete points xáµ¢ (changing \\(\\hat{F}\\)), and recompute our estimate \\(\\hat{Î¸}\\), which then simplifies to:\n\\begin{equation} \\tilde{Î¸}\\equiv n\\hat{Î¸}-(\\frac{n-1}{n})â_{i=1}â¿\\hat{Î¸} \\end{equation}\nIn essence, the Jacknife estimate is obtained by making repeated estimates on increasingly smaller data-sets. This intuition lets us imagine a method which actually makes estimates on larger data-sets (which is the motivation for data augmentation) or, perhaps not so intuitively, on estimates on data-sets of the same size.\nBootstrap Estimates Continuing with the same notation, we will note that the bootstrap is obtained by draw random data-sets with replacement from the training data, where each sample is the same size as the original; as noted by Hastie, Tibshirani, and Friedman (2009).\nWe will consider the bootstrap estimate for the standard deviation of the \\(\\hat{Î¸}\\) operator, which is denoted by \\(Ï(F,n,\\hat{\\theta})=Ï(F)\\)\nThe bootstrap is simple the standard deviation at the approximate F, i.e., at \\(F=\\hat{F}\\):\n\\begin{equation} \\hat{\\mathrm{SD}}=\\sigma(\\hat{F}) \\end{equation}\nSince we generally have no closed form analytical form for \\(Ï(F)\\) we must use a Monte Carlo algorithm:\n Fit a non parametric maximum likelihood estimate (MLE) of F, i.e.Â \\(\\hat{F}\\) Draw a sample from \\(\\hat{F}\\) and calculate the estimate of \\(\\hat{Î¸}\\) on that sample, say, \\(\\hat{Î¸}^*\\) Repeat 2 to get multiple (say B) replications of \\(\\hat{Î¸}^*\\)  Now we know that as \\(Bââ\\) then our estimate would match \\(Ï(\\hat{F})\\) perfectly, however, since that itself is an estimate of the value we are actually interested in, in practice there is no real point using a very high B value.\nNote that in actual practice we simply use the given training data with repetition and do not actually use an MLE of the approximate true distribution to generate samples. This causes the bootstrap estimate to be unreasonably good, since there is always significant overlap between the training and test samples during the model fit. This is why cross validation demands non-overlapping data partitions.\nConnecting Estimates The somewhat surprising result can be proved when \\(\\hat{Î¸}=Î¸(\\hat{F}\\) is a quadratic functional, namely:\n\\begin{equation}\\hat{\\mathrm{Bias}}_{boot}=\\frac{n-1}{n} \\hat{\\mathrm{Bias}}_{jack}\\end{equation}\nIn practice however, we will simply recall that the Jacknife tends to overestimate, and the Bootstrap tends to underestimation.\nBagging Bagging, is motivated by using the bootstrap methodology to improve the estimate or prediction directly, instead of using it as a method to asses the accuracy of an estimate. It is a representative of the so-called parallel ensemble methods where the base learners are generated in parallel. As such, the motivation is to reduce the error by exploiting the independence of base learners (true for mathematically exact bootstrap samples, but not really true in practice).\nMathematically the formulation of Hastie, Tibshirani, and Friedman (2009) establishes a connection between the Bayesian understanding of the bootstrap mean as a posterior average, however, here we will use a more heuristic approach.\nWe have noted above that the bagging process simply involves looking at different samples in differing orders. This has some stark repercussions for tree-based methods, since the trees are grown with a greedy approach.\n Bootstrap samples may cause different trees to be produced This causes a reduction in the variance, especially when not too many samples are considered Averaging, reduces variance while leaving bias unchanged  Practically, these separate trees being averaged allows for varying importance values of the variables to be calculated.\nIn particular, following Hastie, Tibshirani, and Friedman (2009), it is possible to see that the MSE tends to decrease by bagging.\n\\begin{align} E_P[Y-\\hat{f}^*(x)]Â² \u0026amp; = \u0026amp; E_P[Y-f*{ag}(x)+f^*_{ag}(x)-\\hat{f}^*(x)]Â² \\\\\\\n\u0026amp; = \u0026amp; E_P[Y-f^*_{ag}(x)]Â²+E_P[\\hat{f}^*(x)-f^*_{ag}(x)]Â² â¥ E_P[Y-f^*_{ag}(x)]Â² \\end{align}\nWhere:\n The training observations are independently drawn from a distribution \\(P\\) \\(f_{ag}(x)=E_P\\hat{f}^*(x)\\) is the ideal aggregate estimator  For the formulation above, we assume that \\(f_{ag}\\) is a true bagging estimate, which draws samples from the actual population. The upper bound is obtained from the variance of the \\(\\hat{f}^*(x)\\) around the mean, \\(f_{ag}\\)\nPractically, we should note the following:\n The regression trees are deep The greedy algorithm growing the trees cause them to be unstable (sensitive to changes in input data) Each tree has a high variance, and low bias Averaging these trees reduces the variance  Missing from the discussion above is how exactly the training and test sets are used in a bagging algorithm, as well as an estimate for the error for each base learner. This has been reported in the code above as the OOB error, or out of bag error. We have, as noted by Zhou (2012) and Breiman (1996) the following considerations.\n Given \\(m\\) training samples, the probability that the iáµÊ° sample is selected 0,1,2\u0026hellip; times is approximately Poisson distributed with \\(Î»=1\\) The probability of the iáµÊ° example will occur at least once is then \\(1-(1/e)â0.632\\) This means for each base learner, there are around \\(36.8\\) % original training samples which have not been used in its training process  The goodness can thus be estimated using these OOB error, which is simply an estimate of the error of the base tree on the OOB samples.\nAs a final note, random forests are conceptually easily understood by combining bagging with subspace sampling, which is why in most cases and packages, we used bagging as a special case of random forests, i.e.Â when no subspace sampling is performed, random forests algorithms perform bagging.\nReferences   Breiman, Leo. 1996. \u0026ldquo;Bagging Predictors.\u0026rdquo; Machine Learning 24 (2): 123\u0026ndash;40. https://doi.org/10.1023/A:1018054314350.\n  Cichosz, Pawel. 2015. Data Mining Algorithms: Explained Using R. Chichester, West Sussex ; Malden, MA: John Wiley \u0026amp; Sons Inc.\n  Efron, Bradley. 1982. The Jackknife, the Bootstrap, and Other Resampling Plans. CBMS-NSF Regional Conference Series in Applied Mathematics 38. Philadelphia, Pa: Society for Industrial and Applied Mathematics.\n  Hastie, Trevor, Robert Tibshirani, and J. H. Friedman. 2009. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. 2nd ed. Springer Series in Statistics. New York, NY: Springer.\n  James, Gareth, Daniela Witten, Trevor Hastie, and Robert Tibshirani. 2013. An Introduction to Statistical Learning. Vol. 103. Springer Texts in Statistics. New York, NY: Springer New York. https://doi.org/10.1007/978-1-4614-7138-7.\n  Zhou, Zhi-Hua. 2012. Ensemble Methods: Foundations and Algorithms. 0th ed. Chapman and Hall/CRC. https://doi.org/10.1201/b12207.\n    This is mostly true for reasonably smooth true functions \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/trees-and-bags/","tags":["theory","statistics","math"],"title":"Trees and Bags"},{"categories":["programming"],"contents":"Background  I recently read this post written by the now deceased Prof. David MacKayÂ 1 It should be read widely, however, given that it is distributed as a ps.gz which is then a .ps file, and thus probably inaccessible to many of the people who should read it, I decided to rework it for native online consumption (there is also a pdf) THIS IS NOT MY CONTENTÂ 2 Now, enjoy the post  Everyone Should Get an A Imagine a University â call it Camwick â where all students arrive with straight A grades. They are successful, enthusiastic, and curious. By the time they leave, only one third still receive straight As. The other two thirds get lower grades, do not enjoy their studies, and are not fun to teach. Is Camwick University a success? Camwick could point to its excellent teaching assessment scores and argue that it is âadding valueâ: students emerge knowing more. Future employers love the Universityâs policy of assigning grades â the University ranks its students, saving companies the bother of assessing job applicants themselves. But should a University be a sorting service? Isnât something wrong with an institution that takes in mainly A-quality input and turns out less than half A-quality output? If a University fails to turn out as much A-quality enthusiasts as come in, is it in fact a place of intellectual destruction, throwing away the potential of the majority of its students? What are the roots of this destruction?\nExams I would recommend that Camwick consider abolishing traditional exams. In the current system, Camwick teaches Anna, Bob, and Charlie, who are all smart, then examines them; Anna comes \u0026lsquo;top\u0026rsquo;, Bob \u0026lsquo;second\u0026rsquo; and Charlie \u0026lsquo;third\u0026rsquo;. Perhaps Charlie, given a little more time, would have figured out the material, but he wasn\u0026rsquo;t quite ready when the exam arrived - perhaps because other courses consumed his attention.\nBob\u0026rsquo;s response to his \u0026lsquo;failure\u0026rsquo; is to adopt strategies of tlittle educational value: he parrot learns, he crams, and he asks lecturers to tell him what\u0026rsquo;s going to be on the exam. The exams become the focus of attention, even though the purpose of Bob\u0026rsquo;s going to the University was learning.\nCharlie\u0026rsquo;s response is to give up on doing \u0026lsquo;well\u0026rsquo;, and coast through University, no longer understanding everything. He loses self-worth and resents the University for making him feel bad.\nSome courses at Camwick assign grades using continuous assessment instead of exams. But continuous assessment has the same effect as exams on Bob and Charlie. So course grades based on continuous assessment should be abolished at the same time as exams.\n  Figure 1: Everyone can get an A, regardless of learning rate, if their education is not halted by exams. Traditional system on the left, with an educational system on the right.\n  If Camwick had no exams, the focus of attention would have to be elsewhere. How about education, for example? Students could spend their time at Camwick exploring subjects that interest them, and attending classes that offer something they want to know about, free from the stress and misdirection of the exam system. Lecturers would at all times be friends rather than adversaries. [When I was an undergraduate at Cambridge, I asked a physis lecturer to clarify topic \\(N\\), which I felt had not been covered clearly. His response: \u0026ldquo;That\u0026rsquo;s what I love about \\(N\\): some students get it, some don\u0026rsquo;t - so we get beautiful bell shaped curves in the exam.\u0026quot;]\nOf course the extreme suggestion of abolishing all exams will not go down well: \u0026ldquo;What about standards?\u0026rdquo; \u0026ldquo;How can we get funding if we do not\u0026rdquo; \u0026ldquo;How do we award degrees that people will respect?\u0026rdquo; Traditionalists might say that students appreciate exams for the targets and feedback. Well, there\u0026rsquo;s nothing to stop us giving students targets or feedback. We can provide events just like exams, if students want them - self-administered tests, for example, would allow students to check how well they have assimilated all the material in a course. Other systems of targets and feedback that students enjoy include project work, problem-based learning, and portfolio-based assessment.\nAs a compromise, let\u0026rsquo;s modify our proposal a little: Camwick should become a place where the only achievable grade is an A. I\u0026rsquo;m not recommending that we simply give everyone an A. It\u0026rsquo;s a crime to let standards slip. When I say everyone should get an A, I mean that everyone should be allowed to get to an A.\nThink back to Alice, Bob, and Charlie. Alice grasped most of the material in the course and achieved an A. Given a little more time and little less stress, Bob and Charlie could probably have grasped it all too, and become equally strong masters of the material. What good does it do Bob and Charlie to record the fact that they were a little slower than alice? Wouldn\u0026rsquo;t it have been better, educationally, to give Bob and Charlie a little more time and help, so that they achieved the same A standard?\nDoes a bus-driver-training school rank its graduating drivers? No, it ensures that all attain the standard required of a bus-driver. Would you like to be treated by a C-grade doctor? No, everyone wants an A-grade doctor! So doctors and drivers are (I hope!) trained and trained and not let out until they are A-grade in standard. Why should other professions be treated differently?\nFigure 1a shows the command of the material of each student as a function of time in the traditional system. A traditional exam interrupts the learning process, and Bob and Charlie are recorded as having achieved a lower standard. Figure 1b shows the same students in an exam-free system, assuming they learn at the same rate as in the old system. Each student takes a different time to achieve full command of the course material. Every student has the satisfaction of achieving full command of the material.\n  Figure 2: Everyone can get an A, regardless of learning rate, if their education is not halted by exams. Traditional system on the left, with an educational system on the right.\n  The difference between the two systems is also striking if we assume that students start the course at different levels of ability. In Figure 2, albert comes from a privileged background and already knows half the course material when he arrives. Brenda and Catharine arrive at a lower educational level. Brenda and Catharine are actually faster learners than Albert, but, as Figure 2a shows, the traditional exam system rewards Albert with the A grade (\u0026lsquo;congratulations, you started first!'), and brands Brenda and Catharine failures. In the \u0026lsquo;Only A-grades\u0026rsquo; system, everyone attains an A-grade in due course; and Albert isn\u0026rsquo;t actually first to finish.\nThe information about \u0026lsquo;who finished when\u0026rsquo; could in principle be retained in order to provide some sort of student-ranking service to employers, but I would strongly urge the destruction of all such records. Only the achieving of an A grade should be recorded, nothing else. Why?\n Because being ranked creates stress. Because students who are competing with each other for ranks may be reluctant to help each other learn. In contrast, in the \u0026lsquo;Only A-grades\u0026rsquo; system, the top students lose nothing if they help their peers; indeed, they may gain in several ways: peer-teaching strengthens the students\u0026rsquo; grasp on material, and often speeds up the whole class. Evidence that a student is a quick learner may well make itself evident in her transcript without rankings being made: Alice, covering material quickly, will have time to take extra courses. So in one year she\u0026rsquo;ll accumulate a slightly fatter sheaf of A-grade qualifications. What value are rankings? If future employers want students to be formally evaluated, they can pay for an evaluation service. Why ruin a great institution? The very best students might like grades too, as they enjoy being congratulated. But the \u0026lsquo;only A-grades\u0026rsquo; system will congratualte them too.  These ideas are not new, nor are they unprecedented. In many German Universities, first- and second-year courses have no grades, no obligatory coursework, and no obligatory exams. End-of-course exams are provided only as a service to students, to help them find out if they have indeed grasped the material and are ready progress to the next stage.\nIn practice, how should we organize courses so that everyone reaches 100% mastery? For Bob and Charlie\u0026rsquo;s benefit, the average pace probably has to be reduced. Figure 3 shows one way of organizing the material in stages, so that a class is kept together. Whenever Alice has completed the material in a stage, she can spend time on other interests, or can help other members of the class.\n  Figure 3: Possible course plan. This scheme assumes that the students have rates of progress ranging from A (fastest) to C (slowest). Every two weeks, a consolidation period is inserted to ensure that C has assimilated all the learning objectives. Alice can use the consolidation period to pursue others interests or act as a peer-teacher.\n  Camwick staff who say \u0026ldquo;we can\u0026rsquo;t possibly cover a full degree course if we reduce the pace!\u0026rdquo; should bear in mind that, had Bob and charlie gone to a less prestigious University, they probably would have got first-class degrees. How can this paradox - going slowing and arriving at almost the same time - be explained? I suspect an important factor is this: struggling students get ever slower if we pile on new material before they have assimilated the old. For example, 2â¿áµ-year Lagrangian dynamics is difficult to absorb if one hasn\u0026rsquo;t grasped 1Ë¢áµ-year Newtonian dynamics. So the steady linear progress assumed in Figures 1 to 3 is a poor model of Carlie. The more Charlie is left behind, the slower he learns. This means that the true difference in pace between Alice and Charlie need not be very big. If Charlie gets lost and left behind, we are wasting everyone\u0026rsquo;s time by having him sit in classes where new material is presented. A stitch in time saves nine (Figure 4).\n  Figure 4: A stitch in time saves nine. Curve C shows Charlie\u0026rsquo;s progress in a course taught at the pace that is ideal for Alice. The more Charlie is left behind, the slower he learns. By the end of the course, there is a big gap between A and C. Curve Câ² shows Charlie\u0026rsquo;s progress in a course taught at the pace that is ideal for him. Just a small decrease in class pace allows the big gap between Alice and Charlie to be eliminated.\n  Teaching methods must be modified to ensure that everyone in the class benefits. I advocate interactive teaching: students are asked questions and encouraged to ask questions and to be active participants in their own learning. It\u0026rsquo;s not enough to ask a question and let one person in the class (Alice!) answer it. The whole class must have the chance to think, puzzle and discuss; the teacher must ascertain the level of understanding of the whole class. In large classes, I find Mazur\u0026rsquo;s voting method works well: a lecture is centered on two or three carefully chosen questions with multiple-choice answers. Students discuss a question with their neighbors, then all vote. The vote informs the lecturer whether previous material has been understood. Diversity of votes can seed a useful discussion.\nTo conclude, here are a few further advantages of the educational approach advocated here:\n Happy, curious, and self-motivated students are fun to teach. At present, British students have little choice of university teaching and assessment style: all universities give out grades. Shouldn\u0026rsquo;t we offer them a choice? Some students would like the chance to go to a place with high standards where only A-grades are awarded. If some universities adopt student-centered educational policies and stop ranking students, perhaps these attitudes will spread to schools, with consequent benefits to pupils, and in due course, to universities. Dumbed-down A levels could be replaced by educational programmes that ensure that everyone attains their maximum potential and feels happy about it. Happy graduates who get A grades are likely to become grateful alumni donors.    Also known for the fabulous free book called Information Theory, Inference, and Learning Algorithms \u0026#x21a9;\u0026#xfe0e;\n If you have a good reason why this should not be distributed here in this manner, please contact me and I will do the needful \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/mackay-all-a/","tags":["academics","teaching","evaluation","ideas"],"title":"Everyone Should Get an A - David MacKay"},{"categories":["notes"],"contents":"Background  I have had a lot of discussions regarding the teaching of git This is mostly as a part of the SoftwareCarpentries, or in view of my involvement with univ.ai, or simply in every public space I am associated with Without getting into my views, I just wanted to keep this resource in mind  The site  Learning git is a highly contentious thing People seem to be fond of GUI tools, especially since on non *nix systems, it seems that there is a lot of debate surrounding obtaining the git utility in the first place  One of the best ways of understanding (without installing stuff) the mental models required for working with git is this site\n  Figure 1: A screenshot of the site\n    However, as is clear, this is not exactly a replacement for a good old command-line.\n  It does make for a good resource for teaching with slides, or for generating other static visualizations, where live coding is not an option\n  ","permalink":"https://rgoswami.me/posts/d3git/","tags":["tools","rationale","workflow","ideas"],"title":"D3 for Git"},{"categories":["notes"],"contents":"Background Sometime this year, I realized that I no longer have access to a lot of my older communication. This included, a lot of resources I enjoyed and shared with the people who were around me at that point in time. To counter this, I have decided to opt for shorter posts, even if they don\u0026rsquo;t always include the same level of detail I would prefer to provide.\nAlternatives  I have an automated system based around IFTTT combined with Twitter, Diigo, and even Pocket However, that doesn\u0026rsquo;t really tell me much, and trawling through a massive glut of data is often pointless as well There\u0026rsquo;s always Twitter, but I don\u0026rsquo;t really care to hear the views of others when I want to revisit my own ideas  Conclusions  I will be making shorter posts here, like the random one on octobox  ","permalink":"https://rgoswami.me/posts/shortpost/","tags":["tools","rationale","workflow","ideas"],"title":"Shorter Posts"},{"categories":["programming"],"contents":"Background My dotfiles turned 4 years old a few months ago (since 9th Jan 2017) and remains one of my most frequently updated projects for obvious reasons. Going through the changes reminds me of a whole of posts I never got around to writing.\nAnyway, recently I gained access to another HPC cluster, with a standard configuration (bash, old CentOS) and decided to track my provisioning steps. This is really a very streamlined experience by now, since I\u0026rsquo;ve used the same setup across scores of machines. This is actually also a generic intro to configuring user setups on HPC (high performance cluster) machines, if one is inclined to read it in that manner. To that end, sections of this post involve restrictions relating to user privileges which aren\u0026rsquo;t normally part of most Dotfile setups.\nAside  Dotfiles define most people who maintain them No two sets are ever exactly alike They fall somewhere between winging it for each machine and using something like Chef or Ansible Tracking dotfiles is really close to having a sort of out-of-context journal  Before I settled on using the fabulous dotgit, I considered several alternatives, most notably GNU stow.\nPreliminaries It is important to note the environment into which I had to get my setup.\nSSH Setup  The very first thing to do is to use a new ssh-key   export myKey=\u0026#34;someName\u0026#34; ssh-keygen -f $HOME/.ssh/$myKey # I normally don\u0026#39;t set a password ssh-add $HOME/.ssh/$myKey ssh-copy-id $myHPC # myHPC being an IP address I more often than not tend to back this up with a cutesy alias, also because I do not always get my username of choice on these machines. So in $HOME/.ssh/config I use:\nHost myHPC Hostname 127.0.0.1 User somethingIgot IdentityFile ~/.ssh/myKey Harvesting Information  I normally use neofetch on new machines   mkdir -p $HOME/Git/Github cd $HOME/Git/Github git clone https://github.com/dylanaraps/neofetch.git cd neofetch ./neofetch   Figure 1: Neofetch Output\n  Where the top has been tastefully truncated. Just for context, the latest bash as of this writing is v5.0.16 so, that\u0026rsquo;s not too bad, given that neofetch works for bash â¥ 3.2\nTODO Circumventing User Restrictions with Nix  A post in and of itself would be required to explain why and how users are normally restricted from activities in cluster nodes Here, we leverage the nix-package management system to circumvent these User installation of nix is sadly non-trivial, so this might be of some use1  Testing nix-user-chroot  We will first check namespace support   # Errored out unshare --user --pid echo YES # Worked! zgrep CONFIG_USER_NS /boot/config-$(uname -r) # CONFIG_USER_NS=y Thankfully we have support for namespaces, so we can continue with nix-user-chroot.\n Since we definitely do not have rustup or rustc on the HPC, we will use a prebuilt binary of nix-user-chroot   cd $HOME \u0026amp;\u0026amp; wget -O nix-user-chroot https://github.com/nix-community/nix-user-chroot/releases/download/1.0.2/nix-user-chroot-bin-1.0.2-x86_64-unknown-linux-musl  Similar to the wiki example, we will use $HOME/.nix   cd ~/ chmod +x nix-user-chroot mkdir -m 0755 ~/.nix ./nix-user-chroot ~/.nix bash -c \u0026#39;curl https://nixos.org/nix/install | sh\u0026#39;  Only, this doesn\u0026rsquo;t work  Turns out that since unshare is too old, nix-user-chroot won\u0026rsquo;t work either.\nUsing PRoot PRoot is pretty neat in general, they even have a nice website describing it.\n Set a folder up for local installations (this is normally done by my Dotfiles, but we might as well have one here too)   mkdir -p $HOME/.local/bin export PATH=$PATH:$HOME/.local/bin  Get a binary from the GitLab artifacts   cd $HOME mkdir tmp cd tmp wget -O artifacts.zip https://gitlab.com/proot/proot/-/jobs/452350181/artifacts/download unzip artifacts.zip mv dist/proot $HOME/.local/bin  Bind and install nix   mkdir ~/.nix export PROOT_NO_SECCOMP=1 proot -b ~/.nix:/nix export PROOT_NO_SECCOMP=1 curl https://nixos.org/nix/install | sh If you\u0026rsquo;re very unlucky, like I was, you may be greeted by a lovely little error message along the lines of:\n/nix/store/ddmmzn4ggz1f66lwxjy64n89864yj9w9-nix-2.3.3/bin/nix-store: /opt/ohpc/pub/compiler/gcc/5.4.0/lib64/libstdc++.so.6: version `GLIBCXX_3.4.22\u0026#39; not found (required by /nix/store/c0b76xh2za9r9r4b0g3iv4x2lkw1zzcn-aws-sdk-cpp-1.7.90/lib/libaws-cpp-sdk-core.so) Which basically is as bad as it sounds. At this stage, we need a newer compiler to even get nix up and running, but can\u0026rsquo;t without getting an OS update. This chicken and egg situation calls for the drastic measure of leveraging brew first2.\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\u0026#34; Note that nothing in this section suggests the best way is not to lobby your sys-admin to install nix system-wide in multi-user mode.\nGiving Up with Linuxbrew  Somewhere around this point, linuxbrew is a good idea More on this later  Shell Stuff zsh is my shell of choice, and is what my Dotfiles expect and work best with.\n I did end up making a quick change to update the dotfiles with a target which includes a snippet to transition to zsh from the default bash shell  Dotfiles The actual installation steps basically tracks the readme instructions.\ngit clone https://github.com/kobus-v-schoor/dotgit.git mkdir -p ~/.bin cp -r dotgit/bin/dotgit* ~/.bin cat dotgit/bin/bash_completion \u0026gt;\u0026gt; ~/.bash_completion rm -rf dotgit # echo \u0026#39;export PATH=\u0026#34;$PATH:$HOME/.bin\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;export PATH=\u0026#34;$PATH:$HOME/.bin\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc   Much of this section is directly adapted from the NixOS wiki \u0026#x21a9;\u0026#xfe0e;\n This used to be called linuxbrew, but the new site makes it clear that it\u0026rsquo;s all one brew now. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/prov-dots/","tags":["workflow","projects","hpc"],"title":"Provisioning Dotfiles on an HPC"},{"categories":["personal"],"contents":" Thoughts on and rationale behind leaving QWERTY and touch typing in general. Followed by this post on refactoring my Dotfiles.\n Background I just realized that it has been over two years since I switched from QWERTY to Colemak but somehow never managed to write about it. It was a major change in my life, and it took forever to get acclimatized to. I do not think I\u0026rsquo;ll ever again be in a position to make such a change in my life again, but it was definitely worth it.\nTouch Typing My interest in touch typing in I decided to digitize my notes for posterity, during the last two years of my undergraduate studies back in Harcourt Butler Technical Institute (HBTI) Kanpur, India. in one of my many instances of yak shaving, I realized I could probably consume and annotate a lot more content by typing faster. Given that at that stage I was already a fast talker, it seemed like a natural extension. There was probably an element of nostalgia involved as well. That and the end of a bachelors involves the thesis, which generally involves a lot of typing.\nThere were (and are) some fantastic resources for learning to touch type nowadays, I personally used:\n Typing.com This is short, but a pretty good basic setup. The numbering and special characters are a bit much to take in at the level of practice you get by completing all the previous exercises, but eventually they make for a good workout. TypingClub This is what I ended up working my way through. It is comprehensive, beautiful, and fun.  Also, later, I ended up using keybr a lot, simply because typing gibberish is a good way of practicing, and it is independent of the keyboard layout.\nJust to foreshadow things, the enemy facing me at this point was the layout itself1.\n  Alternate layouts Having finally broken into the giddy regimes of 150+ wpm, I was ecstatic, and decided to start working my way through some longer reports. However, I quickly realized I was unable to type for more than a couple of minutes without getting terribly cramped. Once it got to the point of having to visit a physiotherapist, I had to call it quits. At that stage, relearning the entire touch typing corpus, given that I already was used to QWERTY, seemed pretty bleak.\nIt took forever, and I ended up applying my choices to my phone keyboard as well, which presumably helped me in terms of increasing familiarity, had the unintended effect of making me seem distant to people I was close to, since my verbose texts suddenly devolved to painful one-liners.\nThe alternative layouts I tried were:\n DVORAK At the time, TypingClub only supported QWERTY and DVORAK, so it was pretty natural for me to try it out. There are also some very nice comics about it. I remember that it was pretty neat, with a good even distribution, until I tried coding. The placement of the semicolons make it impossible to use while programming. I would still say it makes for a comfortable layout, as long as special characters are not required.     CarpalX I experimented with the entire carpalx family, but I was unable to get used to it. I liked QFMLWY best. I do recommend reading the training methodology, especially if anyone is interested in numerical optimization in general. More importantly, though it was relatively easy to set up on my devices and operating systems, the fact that it wasn\u0026rsquo;t natively supported meant a lot of grief whenever I inevitably had to use a public computer.     Colemak Eventually I decided to go with Colemak, especially since it is widely available. Nothing is easier than setxkbmap us -variant colemak -option grp:alt_shift_toggle on public machines and it\u0026rsquo;s easy on Windows as well. Colemak seems like a good compromise. I personally have not been able to reach the same speeds I managed with QWERTY, even after a year, but then again, I can be a lot more consistent, and it hurts less. Nowadays, Colemak has made its way onto most typing sites as well, including TypingClub    What about VIM?  DVORAK makes it impossible, so do most other layouts, but there are some tutorials purporting to help use vim movement with DVORAK Colemak isn\u0026rsquo;t any better, but the fact of the matter is that once you know VIM on QWERTY, and have separately internalized colemak or something else, hitting keys is just hitting keys  All that said, I still occasionally simply remap HJKL (QWERTY movement) to HNEI (Colemak analog) when it is feasible. update: I actually ended up refactoring my entire Dotfiles to use more Colemak native bindings, as described in this post.\nConclusion Changing layouts was a real struggle. Watching my WPM drop back to lower than hunt and peck styles was pretty humiliating, especially since the reports kept coming in, and more than once I switched to QWERTY. However, since then, I have managed to stay on course. I guess if I think about it, it boils down to a few scattered thoughts:\n Typing is kinda like running a marathon, knowing how it is done and doing it are two different things Tell everyone, so people can listen to you lament your reduced speed and not hate you for replying slowly Practice everyday, because, well, it works out in the long run, even when you plateau Alternate shifts! That\u0026rsquo;s really something which should show up more in tutorials, especially for listicles, not changing the shifts will really hurt Try and get a mechanical keyboard (like the Anne Pro 2 or the Coolermaster Masterkeys), they\u0026rsquo;re fun and easy to change layouts on  Comments The older commenting system was implemented with utteranc.es as seen below.\n   The images are from here, where there\u0026rsquo;s also an effort based metric used to score keyboard layouts. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/colemak-switch/","tags":["workflow","explanations"],"title":"Switching to Colemak"},{"categories":["personal"],"contents":"Background For a while I was worried about writing about a TV show here. I thought it might be frivolous, or worse, might outweigh the other kinds of articles I would like to write. However, like most things, that which is ignored just grows, so it is easier to just write and forget about it.\nThe Show Much has been said about how Bojack Horseman is one of the best shows ever, and they\u0026rsquo;re all correct. For that matter I won\u0026rsquo;t be going into the details of how every episode ties together a tapestry of lives in a meaningful way, or any of that. The show was amazingly poignant. The characters felt real. Which actually leads me to the real issue.\nThe End The end of Bojack was good. It was the way it was meant to be. For a slice-of-life show, it is a natural conclusion. It isn\u0026rsquo;t necessary that any catharsis occurs or that the characters change or become better or all that jazz. It isn\u0026rsquo;t about giving the viewers closure. It is simply about a window onto the lives of (fictional) characters being shut. To that end, I disliked attempts to bring closure in the show itself.\nOne of the main reasons why I felt strongly enough to write this, is simply because when I looked around, the prevailing opinion was that the main character should have been killed off, for his sins. This strikes me as a very flippant attitude to take. It reeks of people trying to make the show a cautionary tale, which is frankly speaking a weird approach to take towards any fictional story. The idea that the character should be redeemed also seemed equally weak, for much the same reasons.\nThe fact that the characters are hypocrites, and that none of them are as good or bad as they make themselves out to be is one of the best parts of the show.\nConclusion That\u0026rsquo;s actually all I have to say about this. I thought of adding relevant memes or listing episodes or name dropping sites, but this isn\u0026rsquo;t buzzfeed. The show is incredible, and there are far better ways of proving that. Bust out your favorite search engine + streaming content provider / digital piracy eye-patch and give it a whirl. The only thing I\u0026rsquo;d suggest is watching everything in order, it\u0026rsquo;s just that kind of show.\n","permalink":"https://rgoswami.me/posts/bojack-horseman/","tags":["thoughts","random","review","TV"],"title":"Bojack Horseman"},{"categories":["programming"],"contents":"Chapter VII - Moving Beyond Linearity All the questions are as per the ISL seventh printing.\nCommon libsUsed\u0026lt;-c(\u0026#34;dplyr\u0026#34;,\u0026#34;ggplot2\u0026#34;,\u0026#34;tidyverse\u0026#34;, \u0026#34;ISLR\u0026#34;,\u0026#34;caret\u0026#34;,\u0026#34;MASS\u0026#34;, \u0026#34;gridExtra\u0026#34;, \u0026#34;pls\u0026#34;,\u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)) Question 7.6 - Page 299 In this exercise, you will further analyze the Wage data set considered throughout this chapter.\n(a) Perform polynomial regression to predict wage using age. Use cross-validation to select the optimal degree d for the polynomial. What degree was chosen, and how does this compare to the results of hypothesis testing using ANOVA? Make a plot of the resulting polynomial fit to the data.\n(b) Fit a step function to predict wage using age, and perform cross-validation to choose the optimal number of cuts. Make a plot of the fit obtained. In this exercise, we will generate simulated data, and will then use this data to perform best subset selection.\nAnswer Lets get the data.\nset.seed(1984) wageDat\u0026lt;-ISLR::Wage wageDat %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 3000 obs. of 11 variables: ## $ year : int 2006 2004 2003 2003 2005 2008 2009 2008 2006 2004 ... ## $ age : int 18 24 45 43 50 54 44 30 41 52 ... ## $ maritl : Factor w/ 5 levels \u0026#34;1. Never Married\u0026#34;,..: 1 1 2 2 4 2 2 1 1 2 ... ## $ race : Factor w/ 4 levels \u0026#34;1. White\u0026#34;,\u0026#34;2. Black\u0026#34;,..: 1 1 1 3 1 1 4 3 2 1 ... ## $ education : Factor w/ 5 levels \u0026#34;1. \u0026lt; HS Grad\u0026#34;,..: 1 4 3 4 2 4 3 3 3 2 ... ## $ region : Factor w/ 9 levels \u0026#34;1. New England\u0026#34;,..: 2 2 2 2 2 2 2 2 2 2 ... ## $ jobclass : Factor w/ 2 levels \u0026#34;1. Industrial\u0026#34;,..: 1 2 1 2 2 2 1 2 2 2 ... ## $ health : Factor w/ 2 levels \u0026#34;1. \u0026lt;=Good\u0026#34;,\u0026#34;2. \u0026gt;=Very Good\u0026#34;: 1 2 1 2 1 2 2 1 2 2 ... ## $ health_ins: Factor w/ 2 levels \u0026#34;1. Yes\u0026#34;,\u0026#34;2. No\u0026#34;: 2 2 1 1 1 1 1 1 1 1 ... ## $ logwage : num 4.32 4.26 4.88 5.04 4.32 ... ## $ wage : num 75 70.5 131 154.7 75 ... ## NULL wageDat %\u0026gt;% summary %\u0026gt;% print ## year age maritl race ## Min. :2003 Min. :18.00 1. Never Married: 648 1. White:2480 ## 1st Qu.:2004 1st Qu.:33.75 2. Married :2074 2. Black: 293 ## Median :2006 Median :42.00 3. Widowed : 19 3. Asian: 190 ## Mean :2006 Mean :42.41 4. Divorced : 204 4. Other: 37 ## 3rd Qu.:2008 3rd Qu.:51.00 5. Separated : 55 ## Max. :2009 Max. :80.00 ## ## education region jobclass ## 1. \u0026lt; HS Grad :268 2. Middle Atlantic :3000 1. Industrial :1544 ## 2. HS Grad :971 1. New England : 0 2. Information:1456 ## 3. Some College :650 3. East North Central: 0 ## 4. College Grad :685 4. West North Central: 0 ## 5. Advanced Degree:426 5. South Atlantic : 0 ## 6. East South Central: 0 ## (Other) : 0 ## health health_ins logwage wage ## 1. \u0026lt;=Good : 858 1. Yes:2083 Min. :3.000 Min. : 20.09 ## 2. \u0026gt;=Very Good:2142 2. No : 917 1st Qu.:4.447 1st Qu.: 85.38 ## Median :4.653 Median :104.92 ## Mean :4.654 Mean :111.70 ## 3rd Qu.:4.857 3rd Qu.:128.68 ## Max. :5.763 Max. :318.34 ## wageDat %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## year age maritl race education region jobclass ## 7 61 5 4 5 1 2 ## health health_ins logwage wage ## 2 2 508 508 library(boot) ## ## Attaching package: \u0026#39;boot\u0026#39; ## The following object is masked from \u0026#39;package:lattice\u0026#39;: ## ## melanoma a) Polynomial regression all.deltas = rep(NA, 10) for (i in 1:10) { glm.fit = glm(wage~poly(age, i), data=Wage) all.deltas[i] = cv.glm(Wage, glm.fit, K=10)$delta[2] } plot(1:10, all.deltas, xlab=\u0026#34;Degree\u0026#34;, ylab=\u0026#34;CV error\u0026#34;, type=\u0026#34;l\u0026#34;, pch=20, lwd=2, ylim=c(1590, 1700)) min.point = min(all.deltas) sd.points = sd(all.deltas) abline(h=min.point + 0.2 * sd.points, col=\u0026#34;red\u0026#34;, lty=\u0026#34;dashed\u0026#34;) abline(h=min.point - 0.2 * sd.points, col=\u0026#34;red\u0026#34;, lty=\u0026#34;dashed\u0026#34;) legend(\u0026#34;topright\u0026#34;, \u0026#34;0.2-standard deviation lines\u0026#34;, lty=\u0026#34;dashed\u0026#34;, col=\u0026#34;red\u0026#34;)   # ANOVA fits=list() for (i in 1:10) { fits[[i]]=glm(wage~poly(age,i),data=wageDat) } anova(fits[[1]],fits[[2]],fits[[3]],fits[[4]],fits[[5]], fits[[6]],fits[[7]],fits[[8]],fits[[9]],fits[[10]]) ## Analysis of Deviance Table ## ## Model 1: wage ~ poly(age, i) ## Model 2: wage ~ poly(age, i) ## Model 3: wage ~ poly(age, i) ## Model 4: wage ~ poly(age, i) ## Model 5: wage ~ poly(age, i) ## Model 6: wage ~ poly(age, i) ## Model 7: wage ~ poly(age, i) ## Model 8: wage ~ poly(age, i) ## Model 9: wage ~ poly(age, i) ## Model 10: wage ~ poly(age, i) ## Resid. Df Resid. Dev Df Deviance ## 1 2998 5022216 ## 2 2997 4793430 1 228786 ## 3 2996 4777674 1 15756 ## 4 2995 4771604 1 6070 ## 5 2994 4770322 1 1283 ## 6 2993 4766389 1 3932 ## 7 2992 4763834 1 2555 ## 8 2991 4763707 1 127 ## 9 2990 4756703 1 7004 ## 10 2989 4756701 1 3  The 4th degree looks the best at the moment   # 3rd or 4th degrees look best based on ANOVA test # let\u0026#39;s go with 4th degree fit plot(wage~age, data=wageDat, col=\u0026#34;darkgrey\u0026#34;) agelims = range(wageDat$age) age.grid = seq(from=agelims[1], to=agelims[2]) lm.fit = lm(wage~poly(age, 4), data=wageDat) lm.pred = predict(lm.fit, data.frame(age=age.grid)) lines(age.grid, lm.pred, col=\u0026#34;blue\u0026#34;, lwd=2)   b) Step function and cross-validation # cross-validation cv.error \u0026lt;- rep(0,9) for (i in 2:10) { wageDat$age.cut \u0026lt;- cut(wageDat$age,i) glm.fit \u0026lt;- glm(wage~age.cut, data=wageDat) cv.error[i-1] \u0026lt;- cv.glm(wageDat, glm.fit, K=10)$delta[1] # [1]:std, [2]:bias-corrected } cv.error ## [1] 1732.337 1682.978 1636.736 1635.600 1624.174 1610.688 1604.081 1612.005 ## [9] 1607.022 cv.error ## [1] 1732.337 1682.978 1636.736 1635.600 1624.174 1610.688 1604.081 1612.005 ## [9] 1607.022 plot(2:10, cv.error, type=\u0026#34;b\u0026#34;)   cut.fit \u0026lt;- glm(wage~cut(age,8), data=wageDat) preds \u0026lt;- predict(cut.fit, newdata=list(age=age.grid), se=TRUE) se.bands \u0026lt;- preds$fit + cbind(2*preds$se.fit, -2*preds$se.fit) plot(wageDat$age, wageDat$wage, xlim=agelims, cex=0.5, col=\u0026#34;darkgrey\u0026#34;) title(\u0026#34;Fit with 8 Age Bands\u0026#34;) lines(age.grid, preds$fit, lwd=2, col=\u0026#34;blue\u0026#34;) matlines(age.grid, se.bands, lwd=1, col=\u0026#34;blue\u0026#34;, lty=3)   Question 7.8 - Page 299 Fit some of the non-linear models investigated in this chapter to the Auto data set. Is there evidence for non-linear relationships in this data set? Create some informative plots to justify your answer.\nAnswer autoDat\u0026lt;-ISLR::Auto autoDat %\u0026gt;% pivot_longer(-c(mpg,name),names_to=\u0026#34;Params\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=mpg,y=Value)) + geom_point() + facet_wrap(~ Params, scales = \u0026#34;free_y\u0026#34;)   Very clearly there is a lot of non-linearity in the mpg data, especially for acceleration, weight, displacement, horsepower.\nrss = rep(NA, 10) fits = list() for (d in 1:10) { fits[[d]] = lm(mpg ~ poly(displacement, d), data = autoDat) rss[d] = deviance(fits[[d]]) } rss %\u0026gt;% print ## [1] 8378.822 7412.263 7392.322 7391.722 7380.838 7270.746 7089.716 6917.401 ## [9] 6737.801 6610.190 anova(fits[[1]],fits[[2]],fits[[3]],fits[[4]],fits[[5]], fits[[6]],fits[[7]],fits[[8]],fits[[9]],fits[[10]]) ## Analysis of Variance Table ## ## Model 1: mpg ~ poly(displacement, d) ## Model 2: mpg ~ poly(displacement, d) ## Model 3: mpg ~ poly(displacement, d) ## Model 4: mpg ~ poly(displacement, d) ## Model 5: mpg ~ poly(displacement, d) ## Model 6: mpg ~ poly(displacement, d) ## Model 7: mpg ~ poly(displacement, d) ## Model 8: mpg ~ poly(displacement, d) ## Model 9: mpg ~ poly(displacement, d) ## Model 10: mpg ~ poly(displacement, d) ## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 390 8378.8 ## 2 389 7412.3 1 966.56 55.7108 5.756e-13 *** ## 3 388 7392.3 1 19.94 1.1494 0.284364 ## 4 387 7391.7 1 0.60 0.0346 0.852549 ## 5 386 7380.8 1 10.88 0.6273 0.428823 ## 6 385 7270.7 1 110.09 6.3455 0.012177 * ## 7 384 7089.7 1 181.03 10.4343 0.001344 ** ## 8 383 6917.4 1 172.31 9.9319 0.001753 ** ## 9 382 6737.8 1 179.60 10.3518 0.001404 ** ## 10 381 6610.2 1 127.61 7.3553 0.006990 ** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 Confirming our visual indications, we see that the second degree models work well.\nlibrary(glmnet) ## Loading required package: Matrix ## ## Attaching package: \u0026#39;Matrix\u0026#39; ## The following objects are masked from \u0026#39;package:tidyr\u0026#39;: ## ## expand, pack, unpack ## Loaded glmnet 3.0-2 library(boot) cv.errs = rep(NA, 15) for (d in 1:15) { fit = glm(mpg ~ poly(displacement, d), data = Auto) cv.errs[d] = cv.glm(Auto, fit, K = 15)$delta[2] } which.min(cv.errs) ## [1] 10 Strangely, we seem to have ended up with a ten variable model here.\n# Step functions cv.errs = rep(NA, 10) for (c in 2:10) { Auto$dis.cut = cut(Auto$displacement, c) fit = glm(mpg ~ dis.cut, data = Auto) cv.errs[c] = cv.glm(Auto, fit, K = 10)$delta[2] } which.min(cv.errs) %\u0026gt;% print ## [1] 9 library(splines) cv.errs = rep(NA, 10) for (df in 3:10) { fit = glm(mpg ~ ns(displacement, df = df), data = Auto) cv.errs[df] = cv.glm(Auto, fit, K = 10)$delta[2] } which.min(cv.errs) %\u0026gt;% print ## [1] 10 library(gam) ## Loading required package: foreach ## ## Attaching package: \u0026#39;foreach\u0026#39; ## The following objects are masked from \u0026#39;package:purrr\u0026#39;: ## ## accumulate, when ## Loaded gam 1.16.1 # GAMs fit = gam(mpg ~ s(displacement, 4) + s(horsepower, 4), data = Auto) ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored summary(fit) ## ## Call: gam(formula = mpg ~ s(displacement, 4) + s(horsepower, 4), data = Auto) ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -11.2982 -2.1592 -0.4394 2.1247 17.0946 ## ## (Dispersion Parameter for gaussian family taken to be 15.3543) ## ## Null Deviance: 23818.99 on 391 degrees of freedom ## Residual Deviance: 5880.697 on 382.9999 degrees of freedom ## AIC: 2194.05 ## ## Number of Local Scoring Iterations: 2 ## ## Anova for Parametric Effects ## Df Sum Sq Mean Sq F value Pr(\u0026gt;F) ## s(displacement, 4) 1 15254.9 15254.9 993.524 \u0026lt; 2e-16 *** ## s(horsepower, 4) 1 1038.4 1038.4 67.632 3.1e-15 *** ## Residuals 383 5880.7 15.4 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Anova for Nonparametric Effects ## Npar Df Npar F Pr(F) ## (Intercept) ## s(displacement, 4) 3 13.613 1.863e-08 *** ## s(horsepower, 4) 3 15.606 1.349e-09 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 Question 7.9 - Pages 299-300 This question uses the variables dis (the weighted mean of distances to five Boston employment centers) and nox (nitrogen oxides concentration in parts per 10 million) from the Boston data. We will treat dis as the predictor and nox as the response.\n(a) Use the poly() function to fit a cubic polynomial regression to predict nox using dis. Report the regression output, and plot the resulting data and polynomial fits.\n(b) Plot the polynomial fits for a range of different polynomial degrees (say, from 1 to 10), and report the associated residual sum of squares.\n(c) Perform cross-validation or another approach to select the optimal degree for the polynomial, and explain your results.\n(d) Use the bs() function to fit a regression spline to predict nox using dis. Report the output for the fit using four degrees of freedom. How did you choose the knots? Plot the resulting fit.\n(e) Now fit a regression spline for a range of degrees of freedom, and plot the resulting fits and report the resulting RSS. Describe the results obtained.\n(f) Perform cross-validation or another approach in order to select the best degrees of freedom for a regression spline on this data. Describe your results.\nAnswer boston\u0026lt;-MASS::Boston boston %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 506 obs. of 14 variables: ## $ crim : num 0.00632 0.02731 0.02729 0.03237 0.06905 ... ## $ zn : num 18 0 0 0 0 0 12.5 12.5 12.5 12.5 ... ## $ indus : num 2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ... ## $ chas : int 0 0 0 0 0 0 0 0 0 0 ... ## $ nox : num 0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ... ## $ rm : num 6.58 6.42 7.18 7 7.15 ... ## $ age : num 65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ... ## $ dis : num 4.09 4.97 4.97 6.06 6.06 ... ## $ rad : int 1 2 2 3 3 3 5 5 5 5 ... ## $ tax : num 296 242 242 222 222 222 311 311 311 311 ... ## $ ptratio: num 15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ... ## $ black : num 397 397 393 395 397 ... ## $ lstat : num 4.98 9.14 4.03 2.94 5.33 ... ## $ medv : num 24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ... ## NULL boston %\u0026gt;% summary %\u0026gt;% print ## crim zn indus chas ## Min. : 0.00632 Min. : 0.00 Min. : 0.46 Min. :0.00000 ## 1st Qu.: 0.08204 1st Qu.: 0.00 1st Qu.: 5.19 1st Qu.:0.00000 ## Median : 0.25651 Median : 0.00 Median : 9.69 Median :0.00000 ## Mean : 3.61352 Mean : 11.36 Mean :11.14 Mean :0.06917 ## 3rd Qu.: 3.67708 3rd Qu.: 12.50 3rd Qu.:18.10 3rd Qu.:0.00000 ## Max. :88.97620 Max. :100.00 Max. :27.74 Max. :1.00000 ## nox rm age dis ## Min. :0.3850 Min. :3.561 Min. : 2.90 Min. : 1.130 ## 1st Qu.:0.4490 1st Qu.:5.886 1st Qu.: 45.02 1st Qu.: 2.100 ## Median :0.5380 Median :6.208 Median : 77.50 Median : 3.207 ## Mean :0.5547 Mean :6.285 Mean : 68.57 Mean : 3.795 ## 3rd Qu.:0.6240 3rd Qu.:6.623 3rd Qu.: 94.08 3rd Qu.: 5.188 ## Max. :0.8710 Max. :8.780 Max. :100.00 Max. :12.127 ## rad tax ptratio black ## Min. : 1.000 Min. :187.0 Min. :12.60 Min. : 0.32 ## 1st Qu.: 4.000 1st Qu.:279.0 1st Qu.:17.40 1st Qu.:375.38 ## Median : 5.000 Median :330.0 Median :19.05 Median :391.44 ## Mean : 9.549 Mean :408.2 Mean :18.46 Mean :356.67 ## 3rd Qu.:24.000 3rd Qu.:666.0 3rd Qu.:20.20 3rd Qu.:396.23 ## Max. :24.000 Max. :711.0 Max. :22.00 Max. :396.90 ## lstat medv ## Min. : 1.73 Min. : 5.00 ## 1st Qu.: 6.95 1st Qu.:17.02 ## Median :11.36 Median :21.20 ## Mean :12.65 Mean :22.53 ## 3rd Qu.:16.95 3rd Qu.:25.00 ## Max. :37.97 Max. :50.00 boston %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## crim zn indus chas nox rm age dis rad tax ## 504 26 76 2 81 446 356 412 9 66 ## ptratio black lstat medv ## 46 357 455 229 a) Polynomial fit.03 \u0026lt;- lm(nox~poly(dis,3), data=boston) dislims \u0026lt;- range(boston$dis) dis.grid \u0026lt;- seq(dislims[1], dislims[2], 0.1) preds \u0026lt;- predict(fit.03, newdata=list(dis=dis.grid), se=TRUE) se.bands \u0026lt;- preds$fit + cbind(2*preds$se.fit, -2*preds$se.fit) par(mfrow=c(1,1), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0)) plot(boston$dis, boston$nox, xlim=dislims, cex=0.5, col=\u0026#34;darkgrey\u0026#34;) title(\u0026#34;Degree 3 Polynomial Fit\u0026#34;) lines(dis.grid, preds$fit, lwd=2, col=\u0026#34;blue\u0026#34;) matlines(dis.grid, se.bands, lwd=1, col=\u0026#34;blue\u0026#34;, lty=3)   summary(fit.03) ## ## Call: ## lm(formula = nox ~ poly(dis, 3), data = boston) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.121130 -0.040619 -0.009738 0.023385 0.194904 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 0.554695 0.002759 201.021 \u0026lt; 2e-16 *** ## poly(dis, 3)1 -2.003096 0.062071 -32.271 \u0026lt; 2e-16 *** ## poly(dis, 3)2 0.856330 0.062071 13.796 \u0026lt; 2e-16 *** ## poly(dis, 3)3 -0.318049 0.062071 -5.124 4.27e-07 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 0.06207 on 502 degrees of freedom ## Multiple R-squared: 0.7148, Adjusted R-squared: 0.7131 ## F-statistic: 419.3 on 3 and 502 DF, p-value: \u0026lt; 2.2e-16 b) Multiple Polynomials rss.error \u0026lt;- rep(0,10) for (i in 1:10) { lm.fit \u0026lt;- lm(nox~poly(dis,i), data=boston) rss.error[i] \u0026lt;- sum(lm.fit$residuals^2) } rss.error ## [1] 2.768563 2.035262 1.934107 1.932981 1.915290 1.878257 1.849484 1.835630 ## [9] 1.833331 1.832171 plot(rss.error, type=\u0026#34;b\u0026#34;)   c) Cross validation and polynomial selection require(boot) set.seed(1) cv.error \u0026lt;- rep(0,10) for (i in 1:10) { glm.fit \u0026lt;- glm(nox~poly(dis,i), data=boston) cv.error[i] \u0026lt;- cv.glm(boston, glm.fit, K=10)$delta[1] # [1]:std, [2]:bias-corrected } cv.error ## [1] 0.005558263 0.004085706 0.003876521 0.003863342 0.004237452 0.005686862 ## [7] 0.010278897 0.006810868 0.033308607 0.004075599 plot(cv.error, type=\u0026#34;b\u0026#34;)    I feel like the second degree fit would be the most reasonable, though the fourth degree seems to be doing well.  d) Regression spline fit.sp \u0026lt;- lm(nox~bs(dis, df=4), data=boston) pred \u0026lt;- predict(fit.sp, newdata=list(dis=dis.grid), se=T) plot(boston$dis, boston$nox, col=\u0026#34;gray\u0026#34;) lines(dis.grid, pred$fit, lwd=2) lines(dis.grid, pred$fit+2*pred$se, lty=\u0026#34;dashed\u0026#34;) lines(dis.grid, pred$fit-2*pred$se, lty=\u0026#34;dashed\u0026#34;)   # set df to select knots at uniform quantiles of `dis` attr(bs(boston$dis,df=4),\u0026#34;knots\u0026#34;) # only 1 knot at 50th percentile ## 50% ## 3.20745 e) Range of regression splines rss.error \u0026lt;- rep(0,7) for (i in 4:10) { fit.sp \u0026lt;- lm(nox~bs(dis, df=i), data=boston) rss.error[i-3] \u0026lt;- sum(fit.sp$residuals^2) } rss.error ## [1] 1.922775 1.840173 1.833966 1.829884 1.816995 1.825653 1.792535 plot(4:10, rss.error, type=\u0026#34;b\u0026#34;)    As the model gains more degrees of freedom, it tends to over fit to the training data better  f) Cross validation for best spline cv.error \u0026lt;- rep(0,7) for (i in 4:10) { glm.fit \u0026lt;- glm(nox~bs(dis, df=i), data=boston) cv.error[i-3] \u0026lt;- cv.glm(boston, glm.fit, K=10)$delta[1] } ## Warning in bs(dis, degree = 3L, knots = c(`50%` = 3.1523), Boundary.knots = ## c(1.1296, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned ## bases ## Warning in bs(dis, degree = 3L, knots = c(`50%` = 3.1523), Boundary.knots = ## c(1.1296, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned ## bases ## Warning in bs(dis, degree = 3L, knots = c(`50%` = 3.2157), Boundary.knots = ## c(1.137, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`50%` = 3.2157), Boundary.knots = ## c(1.137, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`33.33333%` = 2.35953333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`33.33333%` = 2.35953333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`33.33333%` = 2.38403333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`33.33333%` = 2.38403333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`25%` = 2.07945, `50%` = 3.1323, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`25%` = 2.07945, `50%` = 3.1323, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`25%` = 2.1103, `50%` = 3.2797, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`25%` = 2.1103, `50%` = 3.2797, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`20%` = 1.9682, `40%` = 2.7147, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`20%` = 1.9682, `40%` = 2.7147, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`20%` = 1.95434, `40%` = 2.59666, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`20%` = 1.95434, `40%` = 2.59666, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`16.66667%` = 1.82203333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`16.66667%` = 1.82203333333333, : some ## \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`16.66667%` = 1.8226, `33.33333%` = ## 2.3817, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`16.66667%` = 1.8226, `33.33333%` = ## 2.3817, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`14.28571%` = 1.7936, `28.57143%` ## = 2.16972857142857, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill- ## conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`14.28571%` = 1.7936, `28.57143%` ## = 2.16972857142857, : some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill- ## conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`12.5%` = 1.754625, `25%` = 2.10215, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`12.5%` = 1.754625, `25%` = 2.10215, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`12.5%` = 1.751575, `25%` = 2.08755, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases ## Warning in bs(dis, degree = 3L, knots = c(`12.5%` = 1.751575, `25%` = 2.08755, : ## some \u0026#39;x\u0026#39; values beyond boundary knots may cause ill-conditioned bases cv.error ## [1] 0.003898810 0.003694675 0.003732665 0.003766202 0.003716389 0.003723126 ## [7] 0.003727358 plot(4:10, cv.error, type=\u0026#34;b\u0026#34;)    A fifth degree polynomial is clearly indicated  Question 10 - Page 300 This question relates to the College data set.\n(a) Split the data into a training set and a test set. Using out-of-state tuition as the response and the other variables as the predictors, perform forward stepwise selection on the training set in order to identify a satisfactory model that uses just a subset of the predictors.\n(b) Fit a GAM on the training data, using out-of-state tuition as the response and the features selected in the previous step as the predictors. Plot the results, and explain your ï¬ndings.\n(c) Evaluate the model obtained on the test set, and explain the results obtained.\n(d) For which variables, if any, is there evidence of a non-linear relationship with the response?\nAnswer colDat\u0026lt;-ISLR::College colDat %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 777 obs. of 18 variables: ## $ Private : Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 2 2 2 2 2 2 2 2 2 2 ... ## $ Apps : num 1660 2186 1428 417 193 ... ## $ Accept : num 1232 1924 1097 349 146 ... ## $ Enroll : num 721 512 336 137 55 158 103 489 227 172 ... ## $ Top10perc : num 23 16 22 60 16 38 17 37 30 21 ... ## $ Top25perc : num 52 29 50 89 44 62 45 68 63 44 ... ## $ F.Undergrad: num 2885 2683 1036 510 249 ... ## $ P.Undergrad: num 537 1227 99 63 869 ... ## $ Outstate : num 7440 12280 11250 12960 7560 ... ## $ Room.Board : num 3300 6450 3750 5450 4120 ... ## $ Books : num 450 750 400 450 800 500 500 450 300 660 ... ## $ Personal : num 2200 1500 1165 875 1500 ... ## $ PhD : num 70 29 53 92 76 67 90 89 79 40 ... ## $ Terminal : num 78 30 66 97 72 73 93 100 84 41 ... ## $ S.F.Ratio : num 18.1 12.2 12.9 7.7 11.9 9.4 11.5 13.7 11.3 11.5 ... ## $ perc.alumni: num 12 16 30 37 2 11 26 37 23 15 ... ## $ Expend : num 7041 10527 8735 19016 10922 ... ## $ Grad.Rate : num 60 56 54 59 15 55 63 73 80 52 ... ## NULL colDat %\u0026gt;% summary %\u0026gt;% print ## Private Apps Accept Enroll Top10perc ## No :212 Min. : 81 Min. : 72 Min. : 35 Min. : 1.00 ## Yes:565 1st Qu.: 776 1st Qu.: 604 1st Qu.: 242 1st Qu.:15.00 ## Median : 1558 Median : 1110 Median : 434 Median :23.00 ## Mean : 3002 Mean : 2019 Mean : 780 Mean :27.56 ## 3rd Qu.: 3624 3rd Qu.: 2424 3rd Qu.: 902 3rd Qu.:35.00 ## Max. :48094 Max. :26330 Max. :6392 Max. :96.00 ## Top25perc F.Undergrad P.Undergrad Outstate ## Min. : 9.0 Min. : 139 Min. : 1.0 Min. : 2340 ## 1st Qu.: 41.0 1st Qu.: 992 1st Qu.: 95.0 1st Qu.: 7320 ## Median : 54.0 Median : 1707 Median : 353.0 Median : 9990 ## Mean : 55.8 Mean : 3700 Mean : 855.3 Mean :10441 ## 3rd Qu.: 69.0 3rd Qu.: 4005 3rd Qu.: 967.0 3rd Qu.:12925 ## Max. :100.0 Max. :31643 Max. :21836.0 Max. :21700 ## Room.Board Books Personal PhD ## Min. :1780 Min. : 96.0 Min. : 250 Min. : 8.00 ## 1st Qu.:3597 1st Qu.: 470.0 1st Qu.: 850 1st Qu.: 62.00 ## Median :4200 Median : 500.0 Median :1200 Median : 75.00 ## Mean :4358 Mean : 549.4 Mean :1341 Mean : 72.66 ## 3rd Qu.:5050 3rd Qu.: 600.0 3rd Qu.:1700 3rd Qu.: 85.00 ## Max. :8124 Max. :2340.0 Max. :6800 Max. :103.00 ## Terminal S.F.Ratio perc.alumni Expend ## Min. : 24.0 Min. : 2.50 Min. : 0.00 Min. : 3186 ## 1st Qu.: 71.0 1st Qu.:11.50 1st Qu.:13.00 1st Qu.: 6751 ## Median : 82.0 Median :13.60 Median :21.00 Median : 8377 ## Mean : 79.7 Mean :14.09 Mean :22.74 Mean : 9660 ## 3rd Qu.: 92.0 3rd Qu.:16.50 3rd Qu.:31.00 3rd Qu.:10830 ## Max. :100.0 Max. :39.80 Max. :64.00 Max. :56233 ## Grad.Rate ## Min. : 10.00 ## 1st Qu.: 53.00 ## Median : 65.00 ## Mean : 65.46 ## 3rd Qu.: 78.00 ## Max. :118.00 colDat %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## Private Apps Accept Enroll Top10perc Top25perc ## 2 711 693 581 82 89 ## F.Undergrad P.Undergrad Outstate Room.Board Books Personal ## 714 566 640 553 122 294 ## PhD Terminal S.F.Ratio perc.alumni Expend Grad.Rate ## 78 65 173 61 744 81 plotLEAP=function(leapObj){ par(mfrow = c(2,2)) bar2=which.max(leapObj$adjr2) bbic=which.min(leapObj$bic) bcp=which.min(leapObj$cp) plot(leapObj$rss,xlab=\u0026#34;Number of variables\u0026#34;,ylab=\u0026#34;RSS\u0026#34;,type=\u0026#34;b\u0026#34;) plot(leapObj$adjr2,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;Adjusted R^2\u0026#34;),type=\u0026#34;b\u0026#34;) points(bar2,leapObj$adjr2[bar2],col=\u0026#34;green\u0026#34;,cex=2,pch=20) plot(leapObj$bic,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;BIC\u0026#34;),type=\u0026#34;b\u0026#34;) points(bbic,leapObj$bic[bbic],col=\u0026#34;blue\u0026#34;,cex=2,pch=20) plot(leapObj$cp,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;C_p\u0026#34;),type=\u0026#34;b\u0026#34;) points(bcp,leapObj$cp[bcp],col=\u0026#34;red\u0026#34;,cex=2,pch=20) } a) Train test train_ind = sample(colDat %\u0026gt;% nrow,100) test_ind = setdiff(seq_len(colDat %\u0026gt;% nrow), train_ind) Best subset selection train_set\u0026lt;-colDat[train_ind,] test_set\u0026lt;-colDat[-train_ind,] library(leaps) modelFit\u0026lt;-regsubsets(Outstate~.,data=colDat,nvmax=20) modelFit %\u0026gt;% summary %\u0026gt;% print ## Subset selection object ## Call: regsubsets.formula(Outstate ~ ., data = colDat, nvmax = 20) ## 17 Variables (and intercept) ## Forced in Forced out ## PrivateYes FALSE FALSE ## Apps FALSE FALSE ## Accept FALSE FALSE ## Enroll FALSE FALSE ## Top10perc FALSE FALSE ## Top25perc FALSE FALSE ## F.Undergrad FALSE FALSE ## P.Undergrad FALSE FALSE ## Room.Board FALSE FALSE ## Books FALSE FALSE ## Personal FALSE FALSE ## PhD FALSE FALSE ## Terminal FALSE FALSE ## S.F.Ratio FALSE FALSE ## perc.alumni FALSE FALSE ## Expend FALSE FALSE ## Grad.Rate FALSE FALSE ## 1 subsets of each size up to 17 ## Selection Algorithm: exhaustive ## PrivateYes Apps Accept Enroll Top10perc Top25perc F.Undergrad ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 11 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 12 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 13 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 14 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 15 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 16 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 17 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## P.Undergrad Room.Board Books Personal PhD Terminal S.F.Ratio ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 9 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 10 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 11 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 12 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 13 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 14 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 15 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 16 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 17 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## perc.alumni Expend Grad.Rate ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 11 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 12 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 13 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 14 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 15 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 16 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 17 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; We might want to take a look at these.\npar(mfrow=c(2,2)) plot(modelFit) plot(modelFit,scale=\u0026#39;Cp\u0026#39;) plot(modelFit,scale=\u0026#39;r2\u0026#39;) plot(modelFit,scale=\u0026#39;adjr2\u0026#39;)   plotLEAP(modelFit %\u0026gt;% summary)    So we like 14 variables, namely   coefficients(modelFit,id=14) %\u0026gt;% print ## (Intercept) PrivateYes Apps Accept Enroll ## -1.817040e+03 2.256946e+03 -2.999022e-01 8.023519e-01 -5.372545e-01 ## Top10perc F.Undergrad Room.Board Personal PhD ## 2.365529e+01 -9.569936e-02 8.741819e-01 -2.478418e-01 1.269506e+01 ## Terminal S.F.Ratio perc.alumni Expend Grad.Rate ## 2.297296e+01 -4.700560e+01 4.195006e+01 2.003912e-01 2.383197e+01  But five seems like a better bet.   coefficients(modelFit,id=5) ## (Intercept) PrivateYes Room.Board PhD perc.alumni ## -2864.6325619 2936.7416766 1.0677573 40.5334088 61.3147684 ## Expend ## 0.2253945 b) GAM library(gam) fit = gam(Outstate ~ Private+s(Apps,3)+Accept+Enroll+ Top10perc+F.Undergrad+Room.Board+ Personal+PhD+Terminal+S.F.Ratio+ perc.alumni+Expend+Grad.Rate , data = colDat) ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored fit2 = gam(Outstate ~ Private+s(Room.Board,2)+s(PhD,3)+s(perc.alumni)+Expend , data = colDat) ## Warning in model.matrix.default(mt, mf, contrasts): non-list contrasts argument ## ignored par(mfrow=c(2,2)) plot(fit,se=TRUE) par(mfrow=c(2,2)) plot(fit2,se=TRUE)   c) Evaluate pred \u0026lt;- predict(fit, test_set) mse.error \u0026lt;- mean((test_set$Outstate - pred)^2) mse.error %\u0026gt;% print ## [1] 3691891 gam.tss = mean((test_set$Outstate - mean(test_set$Outstate))^2) test.rss = 1 - mse.error/gam.tss test.rss %\u0026gt;% print ## [1] 0.7731239 pred2 \u0026lt;- predict(fit2, test_set) mse.error2 \u0026lt;- mean((test_set$Outstate - pred2)^2) mse.error2 %\u0026gt;% print ## [1] 4121902 gam.tss2 = mean((test_set$Outstate - mean(test_set$Outstate))^2) test.rss2 = 1 - mse.error2/gam.tss2 test.rss2 %\u0026gt;% print ## [1] 0.7466987 This is pretty good model, all told.\nd) Summary summary(fit) %\u0026gt;% print ## ## Call: gam(formula = Outstate ~ Private + s(Apps, 3) + Accept + Enroll + ## Top10perc + F.Undergrad + Room.Board + Personal + PhD + Terminal + ## S.F.Ratio + perc.alumni + Expend + Grad.Rate, data = colDat) ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -6641.083 -1262.806 -5.698 1270.911 9965.901 ## ## (Dispersion Parameter for gaussian family taken to be 3749048) ## ## Null Deviance: 12559297426 on 776 degrees of freedom ## Residual Deviance: 2849276343 on 760 degrees of freedom ## AIC: 13985.3 ## ## Number of Local Scoring Iterations: 2 ## ## Anova for Parametric Effects ## Df Sum Sq Mean Sq F value Pr(\u0026gt;F) ## Private 1 4034912907 4034912907 1076.250 \u0026lt; 2.2e-16 *** ## s(Apps, 3) 1 1344548030 1344548030 358.637 \u0026lt; 2.2e-16 *** ## Accept 1 90544274 90544274 24.151 1.091e-06 *** ## Enroll 1 144471570 144471570 38.535 8.838e-10 *** ## Top10perc 1 1802244831 1802244831 480.721 \u0026lt; 2.2e-16 *** ## F.Undergrad 1 45230645 45230645 12.065 0.0005430 *** ## Room.Board 1 1110285773 1110285773 296.151 \u0026lt; 2.2e-16 *** ## Personal 1 47886988 47886988 12.773 0.0003738 *** ## PhD 1 220249039 220249039 58.748 5.476e-14 *** ## Terminal 1 66366007 66366007 17.702 2.892e-05 *** ## S.F.Ratio 1 190811028 190811028 50.896 2.274e-12 *** ## perc.alumni 1 225293653 225293653 60.094 2.904e-14 *** ## Expend 1 258162295 258162295 68.861 4.805e-16 *** ## Grad.Rate 1 57947219 57947219 15.457 9.214e-05 *** ## Residuals 760 2849276343 3749048 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Anova for Nonparametric Effects ## Npar Df Npar F Pr(F) ## (Intercept) ## Private ## s(Apps, 3) 2 8.571 0.0002085 *** ## Accept ## Enroll ## Top10perc ## F.Undergrad ## Room.Board ## Personal ## PhD ## Terminal ## S.F.Ratio ## perc.alumni ## Expend ## Grad.Rate ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 summary(fit2) %\u0026gt;% print ## ## Call: gam(formula = Outstate ~ Private + s(Room.Board, 2) + s(PhD, ## 3) + s(perc.alumni) + Expend, data = colDat) ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -8676.030 -1345.678 -8.409 1265.524 9590.459 ## ## (Dispersion Parameter for gaussian family taken to be 4175193) ## ## Null Deviance: 12559297426 on 776 degrees of freedom ## Residual Deviance: 3194023899 on 765.0002 degrees of freedom ## AIC: 14064.05 ## ## Number of Local Scoring Iterations: 2 ## ## Anova for Parametric Effects ## Df Sum Sq Mean Sq F value Pr(\u0026gt;F) ## Private 1 3751107814 3751107814 898.43 \u0026lt; 2.2e-16 *** ## s(Room.Board, 2) 1 2913770756 2913770756 697.88 \u0026lt; 2.2e-16 *** ## s(PhD, 3) 1 1149711330 1149711330 275.37 \u0026lt; 2.2e-16 *** ## s(perc.alumni) 1 556759894 556759894 133.35 \u0026lt; 2.2e-16 *** ## Expend 1 554812125 554812125 132.88 \u0026lt; 2.2e-16 *** ## Residuals 765 3194023899 4175193 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Anova for Nonparametric Effects ## Npar Df Npar F Pr(F) ## (Intercept) ## Private ## s(Room.Board, 2) 1 4.9853 0.0258517 * ## s(PhD, 3) 2 9.1614 0.0001171 *** ## s(perc.alumni) 3 0.8726 0.4548496 ## Expend ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ","permalink":"https://rgoswami.me/posts/islr-ch7/","tags":["solutions","R","ISLR"],"title":"ISLR :: Moving Beyond Linearity"},{"categories":["programming"],"contents":"Chapter VI - Linear Model Selection and Regularization All the questions are as per the ISL seventh printing1.\nCommon Instead of using the standard functions, we will leverage the mlr3 package2.\n#install.packages(\u0026#34;mlr3\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;mlr3viz\u0026#34;,\u0026#34;mlr3learners\u0026#34;) Actually for R version 3.6.2, the steps to get it working were a bit more involved.\nLoad ISLR and other libraries.\nlibsUsed\u0026lt;-c(\u0026#34;dplyr\u0026#34;,\u0026#34;ggplot2\u0026#34;,\u0026#34;tidyverse\u0026#34;, \u0026#34;ISLR\u0026#34;,\u0026#34;caret\u0026#34;,\u0026#34;MASS\u0026#34;, \u0026#34;gridExtra\u0026#34;, \u0026#34;pls\u0026#34;,\u0026#34;latex2exp\u0026#34;,\u0026#34;data.table\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)) Question 6.8 - Page 262 In this exercise, we will generate simulated data, and will then use this data to perform best subset selection.\n(a) Use the =rnorm()=function to generate a predictor \\(X\\) of length \\(n = 100\\), as well as a noise vector \\(\\eta\\) of length \\(n = 100\\).\n(b) Generate a response vector \\(Y\\) of length \\(n = 100\\) according to the model \\[Y = \\beta_0 + \\beta_1X + \\beta2X^2 + \\beta_3X^3 + \\eta\\], where \\(\\beta_{0}\\) , \\(\\beta_{1}\\), \\(\\beta_{2}\\), and \\(\\beta_{3}\\) are constants of your choice.\n(c) Use the regsubsets() function to perform best subset selection in order to choose the best model containing the predictors \\(X\\), \\(X^{2}\\), \u0026hellip;, \\(X^{10}\\). What is the best model obtained according to \\(C_p\\) , BIC, and adjusted \\(R^2\\) ? Show some plots to provide evidence for your answer, and report the coefficients of the best model obtained. Note you will need to use the data.frame() function to create a single data set containing both \\(X\\) and \\(Y\\).\n(d) Repeat (c), using forward stepwise selection and also using backwards stepwise selection. How does your answer compare to the results in (c)?\n(e) Now fit a lasso model to the simulated data, again using \\(X\\), \\(X^{2}\\), \u0026hellip;, \\(X^{10}\\) as predictors. Use cross-validation to select the optimal value of \\(\\lambda\\). Create plots of the cross-validation error as a function of \\(\\lambda\\). Report the resulting coefficient estimates, and discuss the results obtained.\n(f) Now generate a response vector Y according to the model \\[Y = \\beta_{0} + \\beta_{7}X^{7} + \\eta,\\] and perform best subset selection and the lasso. Discuss the results obtained.\nAnswer a) Generate model set.seed(1984) x\u0026lt;-rnorm(100) noise\u0026lt;-rnorm(100) b) Response vector beta=c(43,5,3,6) y\u0026lt;-beta[1] + beta[2]*x + beta[3]*x^2 + beta[4]*x^3 + noise qplot(x,y)   c) Subset selection Since the question requires it, we will be using the leaps libraries.\nlibrary(leaps) df\u0026lt;-data.frame(y=y,x=x) sets=regsubsets(y~poly(x,10,raw=T),data=df,nvmax=10) sets %\u0026gt;% summary ## Subset selection object ## Call: regsubsets.formula(y ~ poly(x, 10, raw = T), data = df, nvmax = 10) ## 10 Variables (and intercept) ## Forced in Forced out ## poly(x, 10, raw = T)1 FALSE FALSE ## poly(x, 10, raw = T)2 FALSE FALSE ## poly(x, 10, raw = T)3 FALSE FALSE ## poly(x, 10, raw = T)4 FALSE FALSE ## poly(x, 10, raw = T)5 FALSE FALSE ## poly(x, 10, raw = T)6 FALSE FALSE ## poly(x, 10, raw = T)7 FALSE FALSE ## poly(x, 10, raw = T)8 FALSE FALSE ## poly(x, 10, raw = T)9 FALSE FALSE ## poly(x, 10, raw = T)10 FALSE FALSE ## 1 subsets of each size up to 10 ## Selection Algorithm: exhaustive ## poly(x, 10, raw = T)1 poly(x, 10, raw = T)2 poly(x, 10, raw = T)3 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 3 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## poly(x, 10, raw = T)4 poly(x, 10, raw = T)5 poly(x, 10, raw = T)6 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## poly(x, 10, raw = T)7 poly(x, 10, raw = T)8 poly(x, 10, raw = T)9 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## poly(x, 10, raw = T)10 ## 1 ( 1 ) \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; We also want the best parameters.\nsummarySet\u0026lt;-summary(sets) which.min(summarySet$cp) %\u0026gt;% print ## [1] 3 which.min(summarySet$bic) %\u0026gt;% print ## [1] 3 which.max(summarySet$adjr2) %\u0026gt;% print ## [1] 7 We might want to see this as a plot.\nplot(summarySet$cp, xlab = \u0026#34;Subset Size\u0026#34;, ylab = \u0026#34;Cp\u0026#34;, pch = 20, type = \u0026#34;l\u0026#34;) points(3,summarySet$cp[3],pch=4,col=\u0026#39;red\u0026#39;,lwd=7)   plot(summarySet$bic, xlab = \u0026#34;Subset Size\u0026#34;, ylab = \u0026#34;BIC\u0026#34;, pch = 20, type = \u0026#34;l\u0026#34;) points(3,summarySet$bic[3],pch=4,col=\u0026#39;red\u0026#39;,lwd=7)   plot(summarySet$adjr2, xlab = \u0026#34;Subset Size\u0026#34;, ylab = \u0026#34;Adjusted R2\u0026#34;, pch = 20, type = \u0026#34;l\u0026#34;) points(3,summarySet$adjr2[3],pch=4,col=\u0026#39;red\u0026#39;,lwd=7)   Lets check the coefficients.\ncoefficients(sets,id=3) %\u0026gt;% print ## (Intercept) poly(x, 10, raw = T)1 poly(x, 10, raw = T)2 ## 42.895657 5.108094 3.034408 ## poly(x, 10, raw = T)3 ## 5.989367 beta %\u0026gt;% print ## [1] 43 5 3 6 We see that we actually have a pretty good set of coefficients.\nd) Forward and backward stepwise models modelX\u0026lt;-poly(x,10,raw=T) forwardFit\u0026lt;-regsubsets(y~modelX,data=df,nvmax=10,method=\u0026#34;forward\u0026#34;) forwardFit %\u0026gt;% summary %\u0026gt;% print ## Subset selection object ## Call: regsubsets.formula(y ~ modelX, data = df, nvmax = 10, method = \u0026#34;forward\u0026#34;) ## 10 Variables (and intercept) ## Forced in Forced out ## modelX1 FALSE FALSE ## modelX2 FALSE FALSE ## modelX3 FALSE FALSE ## modelX4 FALSE FALSE ## modelX5 FALSE FALSE ## modelX6 FALSE FALSE ## modelX7 FALSE FALSE ## modelX8 FALSE FALSE ## modelX9 FALSE FALSE ## modelX10 FALSE FALSE ## 1 subsets of each size up to 10 ## Selection Algorithm: forward ## modelX1 modelX2 modelX3 modelX4 modelX5 modelX6 modelX7 modelX8 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## modelX9 modelX10 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; We might want to take a look at these.\npar(mfrow=c(2,2)) plot(forwardFit) plot(forwardFit,scale=\u0026#39;Cp\u0026#39;) plot(forwardFit,scale=\u0026#39;r2\u0026#39;) plot(forwardFit,scale=\u0026#39;adjr2\u0026#39;)   I find these not as fun to look at, so we will do better.\nplotLEAP=function(leapObj){ par(mfrow = c(2,2)) bar2=which.max(leapObj$adjr2) bbic=which.min(leapObj$bic) bcp=which.min(leapObj$cp) plot(leapObj$rss,xlab=\u0026#34;Number of variables\u0026#34;,ylab=\u0026#34;RSS\u0026#34;,type=\u0026#34;b\u0026#34;) plot(leapObj$adjr2,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;Adjusted R^2\u0026#34;),type=\u0026#34;b\u0026#34;) points(bar2,leapObj$adjr2[bar2],col=\u0026#34;green\u0026#34;,cex=2,pch=20) plot(leapObj$bic,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;BIC\u0026#34;),type=\u0026#34;b\u0026#34;) points(bbic,leapObj$bic[bbic],col=\u0026#34;blue\u0026#34;,cex=2,pch=20) plot(leapObj$cp,xlab=\u0026#34;Number of variables\u0026#34;,ylab=TeX(\u0026#34;C_p\u0026#34;),type=\u0026#34;b\u0026#34;) points(bcp,leapObj$cp[bcp],col=\u0026#34;red\u0026#34;,cex=2,pch=20) } plotLEAP(forwardFit %\u0026gt;% summary)   Lets check the backward selection as well.\nmodelX\u0026lt;-poly(x,10,raw=T) backwardFit\u0026lt;-regsubsets(y~modelX,data=df,nvmax=10,method=\u0026#34;backward\u0026#34;) backwardFit %\u0026gt;% summary %\u0026gt;% print ## Subset selection object ## Call: regsubsets.formula(y ~ modelX, data = df, nvmax = 10, method = \u0026#34;backward\u0026#34;) ## 10 Variables (and intercept) ## Forced in Forced out ## modelX1 FALSE FALSE ## modelX2 FALSE FALSE ## modelX3 FALSE FALSE ## modelX4 FALSE FALSE ## modelX5 FALSE FALSE ## modelX6 FALSE FALSE ## modelX7 FALSE FALSE ## modelX8 FALSE FALSE ## modelX9 FALSE FALSE ## modelX10 FALSE FALSE ## 1 subsets of each size up to 10 ## Selection Algorithm: backward ## modelX1 modelX2 modelX3 modelX4 modelX5 modelX6 modelX7 modelX8 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## modelX9 modelX10 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; We might want to take a look at these.\npar(mfrow=c(2,2)) plot(backwardFit) plot(backwardFit,scale=\u0026#39;Cp\u0026#39;) plot(backwardFit,scale=\u0026#39;r2\u0026#39;) plot(backwardFit,scale=\u0026#39;adjr2\u0026#39;)   plotLEAP(backwardFit %\u0026gt;% summary)   In spite of some slight variations, overall all methods converge to the same best set of parameters, that of the third model.\ne) LASSO and Cross Validation For this, instead of using glmnet directly, we will use caret.\ndf\u0026lt;-df %\u0026gt;% mutate(x2=x^2,x3=x^3, x4=x^4,x5=x^5, x6=x^6,x7=x^7, x8=x^8,x9=x^9, x10=x^10) lambda\u0026lt;-10^seq(-3, 3, length = 100) lassoCaret= train(y~.,data=df,method=\u0026#34;glmnet\u0026#34;,tuneGrid=expand.grid(alpha=1,lambda=lambda)) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassoCaret %\u0026gt;% print ## glmnet ## ## 100 samples ## 10 predictor ## ## No pre-processing ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 100, 100, 100, 100, 100, 100, ... ## Resampling results across tuning parameters: ## ## lambda RMSE Rsquared MAE ## 1.000000e-03 1.009696 0.9965632 0.8051425 ## 1.149757e-03 1.009696 0.9965632 0.8051425 ## 1.321941e-03 1.009696 0.9965632 0.8051425 ## 1.519911e-03 1.009696 0.9965632 0.8051425 ## 1.747528e-03 1.009696 0.9965632 0.8051425 ## 2.009233e-03 1.009696 0.9965632 0.8051425 ## 2.310130e-03 1.009696 0.9965632 0.8051425 ## 2.656088e-03 1.009696 0.9965632 0.8051425 ## 3.053856e-03 1.009696 0.9965632 0.8051425 ## 3.511192e-03 1.009696 0.9965632 0.8051425 ## 4.037017e-03 1.009696 0.9965632 0.8051425 ## 4.641589e-03 1.009696 0.9965632 0.8051425 ## 5.336699e-03 1.009696 0.9965632 0.8051425 ## 6.135907e-03 1.009696 0.9965632 0.8051425 ## 7.054802e-03 1.009696 0.9965632 0.8051425 ## 8.111308e-03 1.009696 0.9965632 0.8051425 ## 9.326033e-03 1.009696 0.9965632 0.8051425 ## 1.072267e-02 1.009696 0.9965632 0.8051425 ## 1.232847e-02 1.009696 0.9965632 0.8051425 ## 1.417474e-02 1.009696 0.9965632 0.8051425 ## 1.629751e-02 1.009696 0.9965632 0.8051425 ## 1.873817e-02 1.009696 0.9965632 0.8051425 ## 2.154435e-02 1.009696 0.9965632 0.8051425 ## 2.477076e-02 1.009696 0.9965632 0.8051425 ## 2.848036e-02 1.009696 0.9965632 0.8051425 ## 3.274549e-02 1.009696 0.9965632 0.8051425 ## 3.764936e-02 1.009696 0.9965632 0.8051425 ## 4.328761e-02 1.009696 0.9965632 0.8051425 ## 4.977024e-02 1.009696 0.9965632 0.8051425 ## 5.722368e-02 1.009696 0.9965632 0.8051425 ## 6.579332e-02 1.009696 0.9965632 0.8051425 ## 7.564633e-02 1.009637 0.9965632 0.8050666 ## 8.697490e-02 1.009216 0.9965637 0.8047862 ## 1.000000e-01 1.008901 0.9965636 0.8046468 ## 1.149757e-01 1.009470 0.9965616 0.8054790 ## 1.321941e-01 1.011206 0.9965561 0.8074253 ## 1.519911e-01 1.014475 0.9965476 0.8104930 ## 1.747528e-01 1.019202 0.9965383 0.8147296 ## 2.009233e-01 1.025943 0.9965259 0.8203974 ## 2.310130e-01 1.035374 0.9965094 0.8284187 ## 2.656088e-01 1.048294 0.9964878 0.8393282 ## 3.053856e-01 1.065717 0.9964592 0.8530952 ## 3.511192e-01 1.088903 0.9964215 0.8701072 ## 4.037017e-01 1.119433 0.9963715 0.8918217 ## 4.641589e-01 1.158919 0.9963053 0.9193677 ## 5.336699e-01 1.209841 0.9962136 0.9532842 ## 6.135907e-01 1.275467 0.9960778 0.9957151 ## 7.054802e-01 1.357247 0.9958966 1.0471169 ## 8.111308e-01 1.457886 0.9956561 1.1087362 ## 9.326033e-01 1.580743 0.9953362 1.1818188 ## 1.072267e+00 1.729330 0.9949070 1.2696235 ## 1.232847e+00 1.907599 0.9943306 1.3758463 ## 1.417474e+00 2.120178 0.9935518 1.5059031 ## 1.629751e+00 2.369642 0.9924954 1.6673393 ## 1.873817e+00 2.662906 0.9910539 1.8621728 ## 2.154435e+00 3.007271 0.9890638 2.0978907 ## 2.477076e+00 3.409377 0.9863097 2.3788439 ## 2.848036e+00 3.864727 0.9825900 2.7053428 ## 3.274549e+00 4.350785 0.9778541 3.0659309 ## 3.764936e+00 4.847045 0.9724311 3.4403210 ## 4.328761e+00 5.369017 0.9668240 3.8351441 ## 4.977024e+00 5.919492 0.9626812 4.2512694 ## 5.722368e+00 6.562134 0.9580843 4.7389049 ## 6.579332e+00 7.307112 0.9534537 5.2945905 ## 7.564633e+00 8.132296 0.9500300 5.8774541 ## 8.697490e+00 9.067321 0.9486589 6.4760997 ## 1.000000e+01 10.167822 0.9483195 7.1226569 ## 1.149757e+01 11.473284 0.9482975 7.8556639 ## 1.321941e+01 13.002703 0.9482975 8.6990451 ## 1.519911e+01 14.727852 0.9454119 9.6414650 ## 1.747528e+01 16.325210 0.9426796 10.5303097 ## 2.009233e+01 17.740599 0.9357286 11.3560865 ## 2.310130e+01 18.585795 0.9227167 11.8799668 ## 2.656088e+01 18.939596 0.9080584 12.1336575 ## 3.053856e+01 19.123568 0.9109065 12.2733471 ## 3.511192e+01 19.197966 NaN 12.3308613 ## 4.037017e+01 19.197966 NaN 12.3308613 ## 4.641589e+01 19.197966 NaN 12.3308613 ## 5.336699e+01 19.197966 NaN 12.3308613 ## 6.135907e+01 19.197966 NaN 12.3308613 ## 7.054802e+01 19.197966 NaN 12.3308613 ## 8.111308e+01 19.197966 NaN 12.3308613 ## 9.326033e+01 19.197966 NaN 12.3308613 ## 1.072267e+02 19.197966 NaN 12.3308613 ## 1.232847e+02 19.197966 NaN 12.3308613 ## 1.417474e+02 19.197966 NaN 12.3308613 ## 1.629751e+02 19.197966 NaN 12.3308613 ## 1.873817e+02 19.197966 NaN 12.3308613 ## 2.154435e+02 19.197966 NaN 12.3308613 ## 2.477076e+02 19.197966 NaN 12.3308613 ## 2.848036e+02 19.197966 NaN 12.3308613 ## 3.274549e+02 19.197966 NaN 12.3308613 ## 3.764936e+02 19.197966 NaN 12.3308613 ## 4.328761e+02 19.197966 NaN 12.3308613 ## 4.977024e+02 19.197966 NaN 12.3308613 ## 5.722368e+02 19.197966 NaN 12.3308613 ## 6.579332e+02 19.197966 NaN 12.3308613 ## 7.564633e+02 19.197966 NaN 12.3308613 ## 8.697490e+02 19.197966 NaN 12.3308613 ## 1.000000e+03 19.197966 NaN 12.3308613 ## ## Tuning parameter \u0026#39;alpha\u0026#39; was held constant at a value of 1 ## RMSE was used to select the optimal model using the smallest value. ## The final values used for the model were alpha = 1 and lambda = 0.1. lassoCaret %\u0026gt;% ggplot   lassoCaret %\u0026gt;% varImp %\u0026gt;% ggplot   library(glmnet) ## Loading required package: Matrix ## ## Attaching package: \u0026#39;Matrix\u0026#39; ## The following objects are masked from \u0026#39;package:tidyr\u0026#39;: ## ## expand, pack, unpack ## Loaded glmnet 3.0-2 library(boot) ## ## Attaching package: \u0026#39;boot\u0026#39; ## The following object is masked from \u0026#39;package:lattice\u0026#39;: ## ## melanoma lasso.mod \u0026lt;- cv.glmnet(as.matrix(df[-1]), y, alpha=1) lambda \u0026lt;- lasso.mod$lambda.min plot(lasso.mod)   predict(lasso.mod, s=lambda, type=\u0026#34;coefficients\u0026#34;) ## 11 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 42.975240 ## x 5.005023 ## x2 2.947540 ## x3 5.989105 ## x4 . ## x5 . ## x6 . ## x7 . ## x8 . ## x9 . ## x10 . Clearly, the only important variables are \\(x\\), \\(x^2\\) and \\(x^3\\).\nf) New model Our new model requires a newly expanded set of betas as well.\ny2\u0026lt;-beta[1]+23*x^7+noise modelX\u0026lt;-poly(x,10,raw=T) newDF\u0026lt;-data.frame(x=as.matrix(modelX),y=y2) newSub\u0026lt;-regsubsets(y2~.,data=newDF,nvmax=10) newSub %\u0026gt;% summary ## Subset selection object ## Call: regsubsets.formula(y2 ~ ., data = newDF, nvmax = 10) ## 11 Variables (and intercept) ## Forced in Forced out ## x.1 FALSE FALSE ## x.2 FALSE FALSE ## x.3 FALSE FALSE ## x.4 FALSE FALSE ## x.5 FALSE FALSE ## x.6 FALSE FALSE ## x.7 FALSE FALSE ## x.8 FALSE FALSE ## x.9 FALSE FALSE ## x.10 FALSE FALSE ## y FALSE FALSE ## 1 subsets of each size up to 10 ## Selection Algorithm: exhaustive ## x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 y ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 3 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; plotLEAP(newSub %\u0026gt;% summary)   Or in its more native look,\npar(mfrow=c(2,2)) plot(newSub) plot(newSub,scale=\u0026#39;Cp\u0026#39;) plot(newSub,scale=\u0026#39;r2\u0026#39;) plot(newSub,scale=\u0026#39;adjr2\u0026#39;)   library(glmnet) library(boot) lasso.mod2 \u0026lt;- cv.glmnet(as.matrix(newDF[-1]), y, alpha=1) lambda2 \u0026lt;- lasso.mod2$lambda.min plot(lasso.mod2)   predict(lasso.mod2, s=lambda, type=\u0026#34;coefficients\u0026#34;) ## 11 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 42.67982691 ## x.2 3.22521396 ## x.3 8.56699146 ## x.4 . ## x.5 -0.10229572 ## x.6 . ## x.7 -0.03184905 ## x.8 . ## x.9 . ## x.10 . ## y . lambda\u0026lt;-10^seq(-3, 3, length = 100) lassocaret2= train(y~.,data=newDF,method=\u0026#34;glmnet\u0026#34;,tuneGrid=expand.grid(alpha=1,lambda=lambda)) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassocaret2 %\u0026gt;% print ## glmnet ## ## 100 samples ## 10 predictor ## ## No pre-processing ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 100, 100, 100, 100, 100, 100, ... ## Resampling results across tuning parameters: ## ## lambda RMSE Rsquared MAE ## 1.000000e-03 40.03231 0.9999955 14.48774 ## 1.149757e-03 40.03231 0.9999955 14.48774 ## 1.321941e-03 40.03231 0.9999955 14.48774 ## 1.519911e-03 40.03231 0.9999955 14.48774 ## 1.747528e-03 40.03231 0.9999955 14.48774 ## 2.009233e-03 40.03231 0.9999955 14.48774 ## 2.310130e-03 40.03231 0.9999955 14.48774 ## 2.656088e-03 40.03231 0.9999955 14.48774 ## 3.053856e-03 40.03231 0.9999955 14.48774 ## 3.511192e-03 40.03231 0.9999955 14.48774 ## 4.037017e-03 40.03231 0.9999955 14.48774 ## 4.641589e-03 40.03231 0.9999955 14.48774 ## 5.336699e-03 40.03231 0.9999955 14.48774 ## 6.135907e-03 40.03231 0.9999955 14.48774 ## 7.054802e-03 40.03231 0.9999955 14.48774 ## 8.111308e-03 40.03231 0.9999955 14.48774 ## 9.326033e-03 40.03231 0.9999955 14.48774 ## 1.072267e-02 40.03231 0.9999955 14.48774 ## 1.232847e-02 40.03231 0.9999955 14.48774 ## 1.417474e-02 40.03231 0.9999955 14.48774 ## 1.629751e-02 40.03231 0.9999955 14.48774 ## 1.873817e-02 40.03231 0.9999955 14.48774 ## 2.154435e-02 40.03231 0.9999955 14.48774 ## 2.477076e-02 40.03231 0.9999955 14.48774 ## 2.848036e-02 40.03231 0.9999955 14.48774 ## 3.274549e-02 40.03231 0.9999955 14.48774 ## 3.764936e-02 40.03231 0.9999955 14.48774 ## 4.328761e-02 40.03231 0.9999955 14.48774 ## 4.977024e-02 40.03231 0.9999955 14.48774 ## 5.722368e-02 40.03231 0.9999955 14.48774 ## 6.579332e-02 40.03231 0.9999955 14.48774 ## 7.564633e-02 40.03231 0.9999955 14.48774 ## 8.697490e-02 40.03231 0.9999955 14.48774 ## 1.000000e-01 40.03231 0.9999955 14.48774 ## 1.149757e-01 40.03231 0.9999955 14.48774 ## 1.321941e-01 40.03231 0.9999955 14.48774 ## 1.519911e-01 40.03231 0.9999955 14.48774 ## 1.747528e-01 40.03231 0.9999955 14.48774 ## 2.009233e-01 40.03231 0.9999955 14.48774 ## 2.310130e-01 40.03231 0.9999955 14.48774 ## 2.656088e-01 40.03231 0.9999955 14.48774 ## 3.053856e-01 40.03231 0.9999955 14.48774 ## 3.511192e-01 40.03231 0.9999955 14.48774 ## 4.037017e-01 40.03231 0.9999955 14.48774 ## 4.641589e-01 40.03231 0.9999955 14.48774 ## 5.336699e-01 40.03231 0.9999955 14.48774 ## 6.135907e-01 40.03231 0.9999955 14.48774 ## 7.054802e-01 40.03231 0.9999955 14.48774 ## 8.111308e-01 40.03231 0.9999955 14.48774 ## 9.326033e-01 40.03231 0.9999955 14.48774 ## 1.072267e+00 40.03231 0.9999955 14.48774 ## 1.232847e+00 40.03231 0.9999955 14.48774 ## 1.417474e+00 40.03231 0.9999955 14.48774 ## 1.629751e+00 40.03231 0.9999955 14.48774 ## 1.873817e+00 40.03231 0.9999955 14.48774 ## 2.154435e+00 40.03231 0.9999955 14.48774 ## 2.477076e+00 40.03231 0.9999955 14.48774 ## 2.848036e+00 40.03231 0.9999955 14.48774 ## 3.274549e+00 40.03231 0.9999955 14.48774 ## 3.764936e+00 40.03231 0.9999955 14.48774 ## 4.328761e+00 40.03231 0.9999955 14.48774 ## 4.977024e+00 40.03231 0.9999955 14.48774 ## 5.722368e+00 40.03231 0.9999955 14.48774 ## 6.579332e+00 40.03231 0.9999955 14.48774 ## 7.564633e+00 40.43005 0.9999955 14.59881 ## 8.697490e+00 41.25214 0.9999955 14.81913 ## 1.000000e+01 42.30446 0.9999955 15.09937 ## 1.149757e+01 43.59429 0.9999955 15.44307 ## 1.321941e+01 45.43633 0.9999955 15.93255 ## 1.519911e+01 47.55425 0.9999955 16.49605 ## 1.747528e+01 49.98935 0.9999955 17.14447 ## 2.009233e+01 52.90533 0.9999955 17.91650 ## 2.310130e+01 57.57589 0.9999955 19.10125 ## 2.656088e+01 63.25484 0.9999955 20.53147 ## 3.053856e+01 70.51580 0.9999955 22.36400 ## 3.511192e+01 78.93391 0.9999955 24.49105 ## 4.037017e+01 88.61274 0.9999955 26.93830 ## 4.641589e+01 99.97831 0.9999955 29.83601 ## 5.336699e+01 113.48225 0.9999955 33.39320 ## 6.135907e+01 129.17536 0.9999955 37.58303 ## 7.054802e+01 147.76452 0.9999957 42.74333 ## 8.111308e+01 169.60027 0.9999961 48.98043 ## 9.326033e+01 194.94266 0.9999965 56.29001 ## 1.072267e+02 224.07631 0.9999969 64.70026 ## 1.232847e+02 257.56092 0.9999971 74.36989 ## 1.417474e+02 296.13382 0.9999971 85.51504 ## 1.629751e+02 340.49129 0.9999971 98.33212 ## 1.873817e+02 391.49185 0.9999971 113.06864 ## 2.154435e+02 450.13031 0.9999971 130.01206 ## 2.477076e+02 509.28329 0.9999970 147.15405 ## 2.848036e+02 564.17558 0.9999969 163.34475 ## 3.274549e+02 618.84080 0.9999969 179.85589 ## 3.764936e+02 681.69265 0.9999969 198.83969 ## 4.328761e+02 741.14452 0.9999967 217.28049 ## 4.977024e+02 807.25385 0.9999967 237.88938 ## 5.722368e+02 883.26360 0.9999967 261.58461 ## 6.579332e+02 970.65640 0.9999967 288.82836 ## 7.564633e+02 1037.84801 0.9999960 312.54099 ## 8.697490e+02 1088.92551 0.9999960 334.04769 ## 1.000000e+03 1131.46176 0.9999955 354.62317 ## ## Tuning parameter \u0026#39;alpha\u0026#39; was held constant at a value of 1 ## RMSE was used to select the optimal model using the smallest value. ## The final values used for the model were alpha = 1 and lambda = 6.579332. lassocaret2 %\u0026gt;% ggplot   lassocaret2 %\u0026gt;% varImp %\u0026gt;% ggplot   Clearly, the LASSO model has correctly reduced the model down to the correct single variable form, though best subset seems to suggest using more predictors, their coefficients are low enough to recognize that they are noise.\nQuestion 6.9 - Page 263 In this exercise, we will predict the number of applications received using the other variables in the College data set.\n(a) Split the data set into a training set and a test set.\n(b) Fit a linear model using least squares on the training set, and report the test error obtained.\n(c) Fit a ridge regression model on the training set, with \\(\\lambda\\) chosen by cross-validation. Report the test error obtained.\n(d) Fit a lasso model on the training set, with \\(\\lambda\\) chosen by crossvalidation. Report the test error obtained, along with the number of non-zero coefficient estimates.\n(e) Fit a PCR model on the training set, with \\(M\\) chosen by crossvalidation. Report the test error obtained, along with the value of \\(M\\) selected by cross-validation.\n(f) Fit a PLS model on the training set, with M chosen by crossvalidation. Report the test error obtained, along with the value of M selected by cross-validation.\n(g) Comment on the results obtained. How accurately can we predict the number of college applications received? Is there much difference among the test errors resulting from these five approaches?\nAnswer We will use the caret package, since at the moment, mlr3 does not have learners for PCR and PLS.\ncolDat\u0026lt;-ISLR::College colDat %\u0026gt;% summary %\u0026gt;% print ## Private Apps Accept Enroll Top10perc ## No :212 Min. : 81 Min. : 72 Min. : 35 Min. : 1.00 ## Yes:565 1st Qu.: 776 1st Qu.: 604 1st Qu.: 242 1st Qu.:15.00 ## Median : 1558 Median : 1110 Median : 434 Median :23.00 ## Mean : 3002 Mean : 2019 Mean : 780 Mean :27.56 ## 3rd Qu.: 3624 3rd Qu.: 2424 3rd Qu.: 902 3rd Qu.:35.00 ## Max. :48094 Max. :26330 Max. :6392 Max. :96.00 ## Top25perc F.Undergrad P.Undergrad Outstate ## Min. : 9.0 Min. : 139 Min. : 1.0 Min. : 2340 ## 1st Qu.: 41.0 1st Qu.: 992 1st Qu.: 95.0 1st Qu.: 7320 ## Median : 54.0 Median : 1707 Median : 353.0 Median : 9990 ## Mean : 55.8 Mean : 3700 Mean : 855.3 Mean :10441 ## 3rd Qu.: 69.0 3rd Qu.: 4005 3rd Qu.: 967.0 3rd Qu.:12925 ## Max. :100.0 Max. :31643 Max. :21836.0 Max. :21700 ## Room.Board Books Personal PhD ## Min. :1780 Min. : 96.0 Min. : 250 Min. : 8.00 ## 1st Qu.:3597 1st Qu.: 470.0 1st Qu.: 850 1st Qu.: 62.00 ## Median :4200 Median : 500.0 Median :1200 Median : 75.00 ## Mean :4358 Mean : 549.4 Mean :1341 Mean : 72.66 ## 3rd Qu.:5050 3rd Qu.: 600.0 3rd Qu.:1700 3rd Qu.: 85.00 ## Max. :8124 Max. :2340.0 Max. :6800 Max. :103.00 ## Terminal S.F.Ratio perc.alumni Expend ## Min. : 24.0 Min. : 2.50 Min. : 0.00 Min. : 3186 ## 1st Qu.: 71.0 1st Qu.:11.50 1st Qu.:13.00 1st Qu.: 6751 ## Median : 82.0 Median :13.60 Median :21.00 Median : 8377 ## Mean : 79.7 Mean :14.09 Mean :22.74 Mean : 9660 ## 3rd Qu.: 92.0 3rd Qu.:16.50 3rd Qu.:31.00 3rd Qu.:10830 ## Max. :100.0 Max. :39.80 Max. :64.00 Max. :56233 ## Grad.Rate ## Min. : 10.00 ## 1st Qu.: 53.00 ## Median : 65.00 ## Mean : 65.46 ## 3rd Qu.: 78.00 ## Max. :118.00 colDat %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 777 obs. of 18 variables: ## $ Private : Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 2 2 2 2 2 2 2 2 2 2 ... ## $ Apps : num 1660 2186 1428 417 193 ... ## $ Accept : num 1232 1924 1097 349 146 ... ## $ Enroll : num 721 512 336 137 55 158 103 489 227 172 ... ## $ Top10perc : num 23 16 22 60 16 38 17 37 30 21 ... ## $ Top25perc : num 52 29 50 89 44 62 45 68 63 44 ... ## $ F.Undergrad: num 2885 2683 1036 510 249 ... ## $ P.Undergrad: num 537 1227 99 63 869 ... ## $ Outstate : num 7440 12280 11250 12960 7560 ... ## $ Room.Board : num 3300 6450 3750 5450 4120 ... ## $ Books : num 450 750 400 450 800 500 500 450 300 660 ... ## $ Personal : num 2200 1500 1165 875 1500 ... ## $ PhD : num 70 29 53 92 76 67 90 89 79 40 ... ## $ Terminal : num 78 30 66 97 72 73 93 100 84 41 ... ## $ S.F.Ratio : num 18.1 12.2 12.9 7.7 11.9 9.4 11.5 13.7 11.3 11.5 ... ## $ perc.alumni: num 12 16 30 37 2 11 26 37 23 15 ... ## $ Expend : num 7041 10527 8735 19016 10922 ... ## $ Grad.Rate : num 60 56 54 59 15 55 63 73 80 52 ... ## NULL colDat %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## Private Apps Accept Enroll Top10perc Top25perc ## 2 711 693 581 82 89 ## F.Undergrad P.Undergrad Outstate Room.Board Books Personal ## 714 566 640 553 122 294 ## PhD Terminal S.F.Ratio perc.alumni Expend Grad.Rate ## 78 65 173 61 744 81 Clearly, there are no psuedo-factors which might have been converted at this stage.\na) Train-Test split train_ind\u0026lt;-createDataPartition(colDat$Apps,p=0.8,times=1,list=FALSE) train_set\u0026lt;-colDat[train_ind,] test_set\u0026lt;-colDat[-train_ind,] b) Linear least squares linCol\u0026lt;-train(Apps~.,data=train_set,method=\u0026#34;lm\u0026#34;) linCol %\u0026gt;% summary ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5145.6 -414.8 -20.3 340.5 7526.8 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -2.918e+02 4.506e+02 -0.648 0.517486 ## PrivateYes -5.351e+02 1.532e+02 -3.494 0.000511 *** ## Accept 1.617e+00 4.258e-02 37.983 \u0026lt; 2e-16 *** ## Enroll -1.012e+00 1.959e-01 -5.165 3.26e-07 *** ## Top10perc 5.379e+01 6.221e+00 8.647 \u0026lt; 2e-16 *** ## Top25perc -1.632e+01 5.046e+00 -3.235 0.001282 ** ## F.Undergrad 6.836e-02 3.457e-02 1.978 0.048410 * ## P.Undergrad 7.929e-02 3.367e-02 2.355 0.018854 * ## Outstate -7.303e-02 2.098e-02 -3.481 0.000536 *** ## Room.Board 1.695e-01 5.367e-02 3.159 0.001663 ** ## Books 9.998e-02 2.578e-01 0.388 0.698328 ## Personal -3.145e-03 6.880e-02 -0.046 0.963553 ## PhD -8.926e+00 5.041e+00 -1.771 0.077112 . ## Terminal -2.298e+00 5.608e+00 -0.410 0.682152 ## S.F.Ratio 6.038e+00 1.420e+01 0.425 0.670757 ## perc.alumni -5.085e-01 4.560e+00 -0.112 0.911249 ## Expend 4.668e-02 1.332e-02 3.505 0.000490 *** ## Grad.Rate 9.042e+00 3.379e+00 2.676 0.007653 ** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1042 on 606 degrees of freedom ## Multiple R-squared: 0.9332, Adjusted R-squared: 0.9313 ## F-statistic: 497.7 on 17 and 606 DF, p-value: \u0026lt; 2.2e-16 linPred\u0026lt;-predict(linCol,test_set) linPred %\u0026gt;% postResample(obs = test_set$Apps) ## RMSE Rsquared MAE ## 1071.6360025 0.9017032 625.7827996 Do note that the metrics are calculated in a manner to ensure no negative values are obtained.\nc) Ridge regression with CV for Î» L2Grid \u0026lt;- expand.grid(alpha=0, lambda=10^seq(from=-3,to=30,length=100)) ridgCol\u0026lt;-train(Apps~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L2Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. ridgCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 100 -none- numeric ## beta 1700 dgCMatrix S4 ## df 100 -none- numeric ## dim 2 -none- numeric ## lambda 100 -none- numeric ## dev.ratio 100 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 17 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(ridgCol$finalModel, ridgCol$bestTune$lambda) %\u0026gt;% print ## 18 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) -1.407775e+03 ## PrivateYes -5.854245e+02 ## Accept 1.042778e+00 ## Enroll 3.511219e-01 ## Top10perc 2.780211e+01 ## Top25perc 2.883536e-02 ## F.Undergrad 6.825141e-02 ## P.Undergrad 5.281320e-02 ## Outstate -2.011504e-02 ## Room.Board 2.155224e-01 ## Books 1.517585e-01 ## Personal -3.711406e-02 ## PhD -4.453155e+00 ## Terminal -3.783231e+00 ## S.F.Ratio 6.897360e+00 ## perc.alumni -9.301831e+00 ## Expend 5.601144e-02 ## Grad.Rate 1.259989e+01 ggplot(ridgCol)   ridgPred\u0026lt;-predict(ridgCol,test_set) ridgPred %\u0026gt;% postResample(obs = test_set$Apps) ## RMSE Rsquared MAE ## 1047.7545250 0.9051726 644.4535063 d) LASSO with CV for Î» L1Grid \u0026lt;- expand.grid(alpha=1, # for lasso lambda=10^seq(from=-3,to=30,length=100)) lassoCol\u0026lt;-train(Apps~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L1Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassoCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 81 -none- numeric ## beta 1377 dgCMatrix S4 ## df 81 -none- numeric ## dim 2 -none- numeric ## lambda 81 -none- numeric ## dev.ratio 81 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 17 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(lassoCol$finalModel, lassoCol$bestTune$lambda) %\u0026gt;% print ## 18 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) -325.51554340 ## PrivateYes -532.28956305 ## Accept 1.60370798 ## Enroll -0.90158328 ## Top10perc 51.96610325 ## Top25perc -14.87886847 ## F.Undergrad 0.05352324 ## P.Undergrad 0.07832395 ## Outstate -0.07047302 ## Room.Board 0.16783269 ## Books 0.08836704 ## Personal . ## PhD -8.67634519 ## Terminal -2.18494018 ## S.F.Ratio 5.25050018 ## perc.alumni -0.67848535 ## Expend 0.04597728 ## Grad.Rate 8.67569015 ggplot(lassoCol)   lassoPred\u0026lt;-predict(lassoCol,test_set) lassoPred %\u0026gt;% postResample(obs = test_set$Apps) ## RMSE Rsquared MAE ## 1068.9834769 0.9021268 622.7029418 e) PCR with CV for M mGrid \u0026lt;- expand.grid(ncomp=seq(from=1,to=20,length=10)) pcrCol\u0026lt;-train(Apps~.,data=train_set,method=\u0026#34;pcr\u0026#34;,tuneGrid = mGrid) pcrCol %\u0026gt;% summary %\u0026gt;% print ## Data: X dimension: 624 17 ## Y dimension: 624 1 ## Fit method: svdpc ## Number of components considered: 17 ## TRAINING: % variance explained ## 1 comps 2 comps 3 comps 4 comps 5 comps 6 comps 7 comps ## X 48.2314 87.24 95.02 97.26 98.63 99.43 99.91 ## .outcome 0.2419 76.54 77.88 80.19 91.27 91.34 91.34 ## 8 comps 9 comps 10 comps 11 comps 12 comps 13 comps 14 comps ## X 99.96 100.00 100.00 100.00 100.00 100.00 100.00 ## .outcome 91.65 91.66 92.26 92.65 92.66 92.67 92.76 ## 15 comps 16 comps 17 comps ## X 100.00 100.00 100.00 ## .outcome 93.17 93.18 93.32 ## NULL ggplot(pcrCol)   pcrPred\u0026lt;-predict(pcrCol,test_set) pcrPred %\u0026gt;% postResample(obs = test_set$Apps) ## RMSE Rsquared MAE ## 1071.6360025 0.9017032 625.7827996 f) PLS with CV for M plsCol\u0026lt;-train(Apps~.,data=train_set,method=\u0026#34;pls\u0026#34;,tuneGrid = mGrid) plsCol %\u0026gt;% summary %\u0026gt;% print ## Data: X dimension: 624 17 ## Y dimension: 624 1 ## Fit method: oscorespls ## Number of components considered: 17 ## TRAINING: % variance explained ## 1 comps 2 comps 3 comps 4 comps 5 comps 6 comps 7 comps ## X 39.02 56.4 91.83 96.61 98.62 99.22 99.49 ## .outcome 78.04 84.1 86.88 91.09 91.38 91.49 91.66 ## 8 comps 9 comps 10 comps 11 comps 12 comps 13 comps 14 comps ## X 99.96 99.99 100.00 100.00 100.00 100.00 100.00 ## .outcome 91.68 91.85 92.64 92.87 93.16 93.18 93.18 ## 15 comps 16 comps 17 comps ## X 100.00 100.00 100.00 ## .outcome 93.18 93.19 93.32 ## NULL ggplot(plsCol)   plsPred\u0026lt;-predict(plsCol,test_set) plsPred %\u0026gt;% postResample(obs = test_set$Apps) ## RMSE Rsquared MAE ## 1071.6360039 0.9017032 625.7827987 g) Comments and Comparison models \u0026lt;- list(ridge = ridgCol, lasso = lassoCol, pcr = pcrCol, pls=plsCol,linear=linCol) resamples(models) %\u0026gt;% summary ## ## Call: ## summary.resamples(object = .) ## ## Models: ridge, lasso, pcr, pls, linear ## Number of resamples: 25 ## ## MAE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## ridge 536.9612 600.5398 623.2005 649.6713 707.4014 793.4972 0 ## lasso 573.8563 616.3883 671.9453 655.8858 691.7620 732.2155 0 ## pcr 576.1427 618.8694 650.0360 662.9040 714.8491 767.5535 0 ## pls 553.3999 607.9757 637.1985 638.6619 668.5120 735.4479 0 ## linear 556.5553 619.2395 654.1478 659.4635 686.7747 792.4912 0 ## ## RMSE ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## ridge 882.2646 920.5934 1000.519 1168.603 1163.377 1939.541 0 ## lasso 801.9415 990.0724 1168.234 1184.329 1302.221 1584.712 0 ## pcr 828.1370 942.2678 1131.207 1144.071 1284.178 1544.078 0 ## pls 786.7989 1038.3265 1167.764 1157.026 1274.041 1461.434 0 ## linear 798.3771 1063.3690 1134.291 1135.977 1215.115 1403.576 0 ## ## Rsquared ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s ## ridge 0.8735756 0.8962010 0.9185736 0.9136429 0.9306819 0.9474913 0 ## lasso 0.8851991 0.9132766 0.9217660 0.9191638 0.9284838 0.9398772 0 ## pcr 0.8658504 0.9080179 0.9235117 0.9146884 0.9281892 0.9471991 0 ## pls 0.8881249 0.9080786 0.9183968 0.9173632 0.9258994 0.9420894 0 ## linear 0.8840049 0.8986452 0.9222319 0.9160913 0.9296275 0.9492198 0 resamples(models) %\u0026gt;% bwplot(scales=\u0026#34;free\u0026#34;)    Given the tighter spread of PLS, it seems more reliable than PCR Ridge is just poor in every way OLS does well, but it also has a worrying outlier LASSO appears to be doing alright as well We also have kept track of the performance on the test_set  We might want to see the variable significance values as well.\nlgp\u0026lt;-linCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;OLS Variable Importance\u0026#34;) rgp\u0026lt;-ridgCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Ridge Variable Importance\u0026#34;) lsgp\u0026lt;-lassoCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Lasso Variable Importance\u0026#34;) pcgp\u0026lt;-pcrCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;PCR Variable Importance\u0026#34;) plgp\u0026lt;-plsCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;PLS Variable Importance\u0026#34;) grid.arrange(lgp,rgp,lsgp,pcgp,plgp,ncol=3)   Question 6.10 - Pages 263-264 We have seen that as the number of features used in a model increases, the training error will necessarily decrease, but the test error may not. We will now explore this in a simulated data set.\n(a) Generate a data set with \\(p = 20\\) features, \\(n = 1,000\\) observations, and an associated quantitative response vector generated according to the model \\[Y = X\\beta + \\eta,\\] where \\(\\beta\\) has some elements that are exactly equal to zero.\n(b) Split your data set into a training set containing \\(100\\) observations and a test set containing \\(900\\) observations.\n(c) Perform best subset selection on the training set, and plot the training set MSE associated with the best model of each size.\n(d) Plot the test set MSE associated with the best model of each size.\n(e) For which model size does the test set MSE take on its minimum value? Comment on your results. If it takes on its minimum value for a model containing only an intercept or a model containing all of the features, then play around with the way that you are generating the data in (a) until you come up with a scenario in which the test set MSE is minimized for an intermediate model size.\n(f) How does the model at which the test set MSE is minimized compare to the true model used to generate the data? Comment on the coefficient values.\n(g) Create a plot displaying \\(\\sqrt{\\Sum_{j=1}^{p}(\\beta_{j}-\\hat{\\beta}_{j}^{r})^{2}}\\) for a range of values of \\(r\\), where \\(\\hat{\\beta}_{j}^{r}\\) is the $j$th coefficient estimate for the best model containing \\(r\\) coefficients. Comment on what you observe. How does this compare to the test MSE plot from (d)?\nAnswer Model creation p=20 n=1000 noise\u0026lt;-rnorm(n) xmat\u0026lt;-matrix(rnorm(n*p),nrow=n,ncol=p) beta\u0026lt;-sample(-10:34,20) beta[sample(1:20,4)]=0 myY\u0026lt;-xmat %*% beta + noise modelDat\u0026lt;-data.frame(x=as.matrix(xmat),y=myY)  As always we will want to take a peak   modelDat %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 1000 obs. of 21 variables: ## $ x.1 : num -0.406 -1.375 0.858 -0.231 -0.601 ... ## $ x.2 : num -0.129 -0.218 -0.17 0.573 -0.513 ... ## $ x.3 : num 0.127 -0.224 1.014 0.896 0.159 ... ## $ x.4 : num 0.499 -0.151 -0.488 -0.959 2.187 ... ## $ x.5 : num -0.235 -0.345 -0.773 -0.346 0.773 ... ## $ x.6 : num 0.26 -0.429 -1.183 -1.159 0.959 ... ## $ x.7 : num 0.567 1.647 0.149 -0.593 -0.902 ... ## $ x.8 : num -0.092 0.8391 -1.4835 0.0229 -0.1353 ... ## $ x.9 : num -0.998 -1.043 -0.563 -0.377 0.324 ... ## $ x.10: num -0.4401 -0.195 -0.5139 -0.0156 -0.9543 ... ## $ x.11: num -0.147 0.829 0.165 0.101 -0.105 ... ## $ x.12: num -0.0118 1.02 1.0794 1.3184 -2.2844 ... ## $ x.13: num -1.683 0.487 -1.142 -0.744 -0.175 ... ## $ x.14: num 0.228 -1.031 -2.798 -0.646 0.56 ... ## $ x.15: num -0.718 0.508 0.637 -0.556 0.585 ... ## $ x.16: num -1.6378 0.581 -0.9939 0.0537 -0.5854 ... ## $ x.17: num 1.758 -0.616 1.377 -0.876 -1.174 ... ## $ x.18: num -1.438 0.373 1.364 0.399 0.949 ... ## $ x.19: num -0.715 -0.731 1.142 0.149 0.916 ... ## $ x.20: num 2.774 -2.024 1.316 0.138 0.187 ... ## $ y : num 77.5 -82.8 -38.9 -79.7 64.9 ... ## NULL modelDat %\u0026gt;% summary %\u0026gt;% print ## x.1 x.2 x.3 x.4 ## Min. :-2.79766 Min. :-3.13281 Min. :-2.71232 Min. :-4.29604 ## 1st Qu.:-0.60516 1st Qu.:-0.66759 1st Qu.:-0.60561 1st Qu.:-0.66598 ## Median : 0.04323 Median : 0.03681 Median : 0.06556 Median : 0.06589 ## Mean : 0.06879 Mean : 0.01004 Mean : 0.06443 Mean : 0.02244 ## 3rd Qu.: 0.74049 3rd Qu.: 0.68234 3rd Qu.: 0.70521 3rd Qu.: 0.71174 ## Max. : 3.50354 Max. : 3.47268 Max. : 3.02817 Max. : 3.27326 ## x.5 x.6 x.7 x.8 ## Min. :-3.228376 Min. :-4.24014 Min. :-2.98577 Min. :-3.27770 ## 1st Qu.:-0.698220 1st Qu.:-0.69448 1st Qu.:-0.59092 1st Qu.:-0.52939 ## Median :-0.058778 Median :-0.01141 Median : 0.01732 Median : 0.05703 ## Mean : 0.000126 Mean :-0.05158 Mean : 0.04767 Mean : 0.08231 ## 3rd Qu.: 0.663570 3rd Qu.: 0.64217 3rd Qu.: 0.67438 3rd Qu.: 0.72849 ## Max. : 3.036307 Max. : 3.27572 Max. : 2.72163 Max. : 3.33409 ## x.9 x.10 x.11 x.12 ## Min. :-3.08957 Min. :-3.21268 Min. :-3.00572 Min. :-3.72016 ## 1st Qu.:-0.65456 1st Qu.:-0.69401 1st Qu.:-0.68226 1st Qu.:-0.63043 ## Median :-0.04242 Median :-0.03069 Median :-0.04777 Median : 0.07079 ## Mean : 0.02049 Mean :-0.02400 Mean :-0.03729 Mean : 0.03769 ## 3rd Qu.: 0.71209 3rd Qu.: 0.61540 3rd Qu.: 0.64873 3rd Qu.: 0.67155 ## Max. : 3.23110 Max. : 2.76059 Max. : 2.87306 Max. : 3.48569 ## x.13 x.14 x.15 x.16 ## Min. :-3.20126 Min. :-3.55432 Min. :-2.857575 Min. :-3.5383 ## 1st Qu.:-0.68535 1st Qu.:-0.66752 1st Qu.:-0.658708 1st Qu.:-0.7813 ## Median :-0.01329 Median :-0.03302 Median : 0.020581 Median :-0.0740 ## Mean : 0.01094 Mean : 0.02113 Mean : 0.007976 Mean :-0.0883 ## 3rd Qu.: 0.64877 3rd Qu.: 0.74919 3rd Qu.: 0.670464 3rd Qu.: 0.5568 ## Max. : 2.78973 Max. : 3.47923 Max. : 2.891527 Max. : 3.0938 ## x.17 x.18 x.19 x.20 ## Min. :-3.28570 Min. :-4.06416 Min. :-3.0443 Min. :-4.06307 ## 1st Qu.:-0.72302 1st Qu.:-0.72507 1st Qu.:-0.6684 1st Qu.:-0.70518 ## Median :-0.02439 Median :-0.04941 Median :-0.0610 Median :-0.07697 ## Mean :-0.01459 Mean :-0.03164 Mean :-0.0414 Mean :-0.05302 ## 3rd Qu.: 0.62692 3rd Qu.: 0.68115 3rd Qu.: 0.6381 3rd Qu.: 0.58597 ## Max. : 2.86446 Max. : 3.32958 Max. : 3.1722 Max. : 3.01358 ## y ## Min. :-199.268 ## 1st Qu.: -54.758 ## Median : -1.607 ## Mean : -1.710 ## 3rd Qu.: 49.367 ## Max. : 278.244 b) Train Test Split train_ind = sample(modelDat %\u0026gt;% nrow,100) test_ind = setdiff(seq_len(modelDat %\u0026gt;% nrow), train_set) Best subset selection train_set\u0026lt;-modelDat[train_ind,] test_set\u0026lt;-modelDat[-train_ind,] linCol\u0026lt;-train(y~.,data=train_set,method=\u0026#34;lm\u0026#34;) linCol %\u0026gt;% summary ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.12474 -0.53970 -0.00944 0.42398 2.21086 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -0.06052 0.09604 -0.630 0.530 ## x.1 -0.02265 0.09198 -0.246 0.806 ## x.2 28.91650 0.09879 292.719 \u0026lt;2e-16 *** ## x.3 14.16532 0.09343 151.610 \u0026lt;2e-16 *** ## x.4 28.16256 0.09828 286.564 \u0026lt;2e-16 *** ## x.5 0.13742 0.09658 1.423 0.159 ## x.6 27.01497 0.08540 316.341 \u0026lt;2e-16 *** ## x.7 31.15917 0.09003 346.092 \u0026lt;2e-16 *** ## x.8 -9.66308 0.11095 -87.094 \u0026lt;2e-16 *** ## x.9 0.11641 0.10768 1.081 0.283 ## x.10 19.06687 0.09662 197.344 \u0026lt;2e-16 *** ## x.11 -9.09956 0.08627 -105.472 \u0026lt;2e-16 *** ## x.12 -8.01933 0.10198 -78.633 \u0026lt;2e-16 *** ## x.13 4.26852 0.09888 43.170 \u0026lt;2e-16 *** ## x.14 20.22366 0.09853 205.247 \u0026lt;2e-16 *** ## x.15 -0.16607 0.10466 -1.587 0.117 ## x.16 7.95594 0.11250 70.721 \u0026lt;2e-16 *** ## x.17 10.89851 0.11157 97.684 \u0026lt;2e-16 *** ## x.18 -1.09760 0.09391 -11.688 \u0026lt;2e-16 *** ## x.19 22.05197 0.08697 253.553 \u0026lt;2e-16 *** ## x.20 20.88796 0.09274 225.221 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 0.8583 on 79 degrees of freedom ## Multiple R-squared: 0.9999, Adjusted R-squared: 0.9999 ## F-statistic: 4.71e+04 on 20 and 79 DF, p-value: \u0026lt; 2.2e-16 linPred\u0026lt;-predict(linCol,test_set) linPred %\u0026gt;% postResample(obs = test_set$y) ## RMSE Rsquared MAE ## 1.2151815 0.9997265 0.9638378 L2Grid \u0026lt;- expand.grid(alpha=0, lambda=10^seq(from=-3,to=30,length=100)) ridgCol\u0026lt;-train(y~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L2Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. ridgCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 100 -none- numeric ## beta 2000 dgCMatrix S4 ## df 100 -none- numeric ## dim 2 -none- numeric ## lambda 100 -none- numeric ## dev.ratio 100 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 20 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(ridgCol$finalModel, ridgCol$bestTune$lambda) %\u0026gt;% print ## 21 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 0.03898376 ## x.1 -0.12140945 ## x.2 27.63771674 ## x.3 13.46853844 ## x.4 26.54402352 ## x.5 -0.13838118 ## x.6 25.87706885 ## x.7 29.90687677 ## x.8 -9.42088971 ## x.9 -0.08983349 ## x.10 17.45444598 ## x.11 -8.33991071 ## x.12 -7.23653865 ## x.13 3.35145521 ## x.14 19.42178898 ## x.15 -0.02794731 ## x.16 7.63951382 ## x.17 11.08083907 ## x.18 -1.36872894 ## x.19 20.90257005 ## x.20 20.07494414 ggplot(ridgCol)   ridgPred\u0026lt;-predict(ridgCol,test_set) ridgPred %\u0026gt;% postResample(obs = test_set$y) ## RMSE Rsquared MAE ## 3.7554417 0.9994231 3.0184859 L1Grid \u0026lt;- expand.grid(alpha=1, # for lasso lambda=10^seq(from=-3,to=30,length=100)) lassoCol\u0026lt;-train(y~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L1Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassoCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 47 -none- numeric ## beta 940 dgCMatrix S4 ## df 47 -none- numeric ## dim 2 -none- numeric ## lambda 47 -none- numeric ## dev.ratio 47 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 20 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(lassoCol$finalModel, lassoCol$bestTune$lambda) %\u0026gt;% print ## 21 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 0.1158884 ## x.1 . ## x.2 28.5897869 ## x.3 13.3637110 ## x.4 27.2558797 ## x.5 . ## x.6 26.6625588 ## x.7 30.6841774 ## x.8 -9.1388677 ## x.9 . ## x.10 17.9220939 ## x.11 -8.2461257 ## x.12 -7.0603651 ## x.13 3.2052101 ## x.14 19.7219890 ## x.15 . ## x.16 7.2082509 ## x.17 10.4137411 ## x.18 -0.6693664 ## x.19 21.5357460 ## x.20 20.5226071 ggplot(lassoCol)   lassoPred\u0026lt;-predict(lassoCol,test_set) lassoPred %\u0026gt;% postResample(obs = test_set$y) ## RMSE Rsquared MAE ## 2.7289452 0.9992454 2.2029482 mGrid \u0026lt;- expand.grid(ncomp=seq(from=1,to=20,length=10)) pcrCol\u0026lt;-train(y~.,data=train_set,method=\u0026#34;pcr\u0026#34;,tuneGrid = mGrid) pcrCol %\u0026gt;% summary %\u0026gt;% print ## Data: X dimension: 100 20 ## Y dimension: 100 1 ## Fit method: svdpc ## Number of components considered: 20 ## TRAINING: % variance explained ## 1 comps 2 comps 3 comps 4 comps 5 comps 6 comps 7 comps ## X 10.040 18.46 26.62 34.56 41.87 48.54 54.56 ## .outcome 8.425 34.90 41.09 43.12 45.06 48.09 66.44 ## 8 comps 9 comps 10 comps 11 comps 12 comps 13 comps 14 comps ## X 60.33 65.37 70.01 74.46 78.72 82.32 85.67 ## .outcome 85.76 88.81 89.93 91.66 91.91 92.04 92.08 ## 15 comps 16 comps 17 comps 18 comps 19 comps 20 comps ## X 88.85 91.94 94.59 96.73 98.51 100.00 ## .outcome 92.15 94.96 99.51 99.57 99.76 99.99 ## NULL ggplot(pcrCol)   pcrPred\u0026lt;-predict(pcrCol,test_set) pcrPred %\u0026gt;% postResample(obs = test_set$y) ## RMSE Rsquared MAE ## 1.2151815 0.9997265 0.9638378 plsCol\u0026lt;-train(y~.,data=train_set,method=\u0026#34;pls\u0026#34;,tuneGrid = mGrid) plsCol %\u0026gt;% summary %\u0026gt;% print ## Data: X dimension: 100 20 ## Y dimension: 100 1 ## Fit method: oscorespls ## Number of components considered: 20 ## TRAINING: % variance explained ## 1 comps 2 comps 3 comps 4 comps 5 comps 6 comps 7 comps ## X 7.762 14.79 21.01 26.89 31.55 36.13 41.12 ## .outcome 92.765 98.81 99.75 99.96 99.98 99.99 99.99 ## 8 comps 9 comps 10 comps 11 comps 12 comps 13 comps 14 comps ## X 46.35 51.21 56.12 60.34 65.63 71.57 76.16 ## .outcome 99.99 99.99 99.99 99.99 99.99 99.99 99.99 ## 15 comps 16 comps 17 comps 18 comps 19 comps 20 comps ## X 80.72 84.69 88.98 92.69 96.71 100.00 ## .outcome 99.99 99.99 99.99 99.99 99.99 99.99 ## NULL ggplot(plsCol)   plsPred\u0026lt;-predict(plsCol,test_set) plsPred %\u0026gt;% postResample(obs = test_set$y) ## RMSE Rsquared MAE ## 1.2151815 0.9997265 0.9638378 d) Test MSE for best models  All the models have the same RÂ² but Ridge does the worst followed by LASSO  For the rest of the question, we will consider the OLS model.\nmodelFit\u0026lt;-regsubsets(y~.,data=modelDat,nvmax=20) modelFit %\u0026gt;% summary %\u0026gt;% print ## Subset selection object ## Call: regsubsets.formula(y ~ ., data = modelDat, nvmax = 20) ## 20 Variables (and intercept) ## Forced in Forced out ## x.1 FALSE FALSE ## x.2 FALSE FALSE ## x.3 FALSE FALSE ## x.4 FALSE FALSE ## x.5 FALSE FALSE ## x.6 FALSE FALSE ## x.7 FALSE FALSE ## x.8 FALSE FALSE ## x.9 FALSE FALSE ## x.10 FALSE FALSE ## x.11 FALSE FALSE ## x.12 FALSE FALSE ## x.13 FALSE FALSE ## x.14 FALSE FALSE ## x.15 FALSE FALSE ## x.16 FALSE FALSE ## x.17 FALSE FALSE ## x.18 FALSE FALSE ## x.19 FALSE FALSE ## x.20 FALSE FALSE ## 1 subsets of each size up to 20 ## Selection Algorithm: exhaustive ## x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8 x.9 x.10 x.11 x.12 x.13 x.14 x.15 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 9 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 10 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 11 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 12 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 13 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 14 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 15 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 16 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 17 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 18 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 19 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 20 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## x.16 x.17 x.18 x.19 x.20 ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 5 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 6 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 11 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 12 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 13 ( 1 ) \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 14 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 15 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 16 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 17 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 18 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 19 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 20 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; We might want to take a look at these.\npar(mfrow=c(2,2)) plot(modelFit) plot(modelFit,scale=\u0026#39;Cp\u0026#39;) plot(modelFit,scale=\u0026#39;r2\u0026#39;) plot(modelFit,scale=\u0026#39;adjr2\u0026#39;)   plotLEAP(modelFit %\u0026gt;% summary)   It would appear that 16 variables would be a good bet. We note that the lasso model did void out 4 parameters, namely xâ,xâ,xââ and xââ.\nLets take a quick look at the various model variable significance values.\nlgp\u0026lt;-linCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;OLS Variable Importance\u0026#34;) rgp\u0026lt;-ridgCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Ridge Variable Importance\u0026#34;) lsgp\u0026lt;-lassoCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Lasso Variable Importance\u0026#34;) pcgp\u0026lt;-pcrCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;PCR Variable Importance\u0026#34;) plgp\u0026lt;-plsCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;PLS Variable Importance\u0026#34;) grid.arrange(lgp,rgp,lsgp,pcgp,plgp,ncol=3,bottom=\u0026#34;Effective Importance, scaled\u0026#34;)   e) Model size The test set numeric minimum RMSE is a tie between OLS and PCR, and this was achieved for the (effective) 16 variable OLS model, as well as the 18 variable PCR model.\nf) Best model We will consider the OLS and PCR models and its parameters.\nlinCol$finalModel %\u0026gt;% print ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Coefficients: ## (Intercept) x.1 x.2 x.3 x.4 x.5 ## -0.06052 -0.02265 28.91650 14.16532 28.16256 0.13742 ## x.6 x.7 x.8 x.9 x.10 x.11 ## 27.01497 31.15917 -9.66308 0.11641 19.06687 -9.09956 ## x.12 x.13 x.14 x.15 x.16 x.17 ## -8.01933 4.26852 20.22366 -0.16607 7.95594 10.89851 ## x.18 x.19 x.20 ## -1.09760 22.05197 20.88796 pcrCol$bestTune %\u0026gt;% print ## ncomp ## 10 20 Now to compare this to the original.\nbeta %\u0026gt;% print ## [1] 0 29 14 28 0 27 31 -10 0 19 -9 -8 4 20 0 8 11 -1 22 ## [20] 21 t=data.frame(linCol$finalModel$coefficients[-1]) %\u0026gt;% rename(\u0026#34;Model_Coeffs\u0026#34;=1) %\u0026gt;% add_column(beta) %\u0026gt;% rename(\u0026#34;Original_Coeffs\u0026#34;=2) print(t) ## Model_Coeffs Original_Coeffs ## x.1 -0.02265289 0 ## x.2 28.91649699 29 ## x.3 14.16532050 14 ## x.4 28.16255937 28 ## x.5 0.13741621 0 ## x.6 27.01497459 27 ## x.7 31.15917172 31 ## x.8 -9.66308362 -10 ## x.9 0.11641282 0 ## x.10 19.06687041 19 ## x.11 -9.09955826 -9 ## x.12 -8.01932598 -8 ## x.13 4.26852334 4 ## x.14 20.22366153 20 ## x.15 -0.16606531 0 ## x.16 7.95593559 8 ## x.17 10.89851353 11 ## x.18 -1.09759687 -1 ## x.19 22.05196537 22 ## x.20 20.88795623 21 We see that the coefficients are pretty similar.\ng) Plotting differences val.errors = rep(NaN, p) a = rep(NaN, p) b = rep(NaN, p) x_cols = colnames(xmat, do.NULL = FALSE, prefix = \u0026#34;x.\u0026#34;) for (i in 1:p) { coefi = coef(modelFit, id = i) a[i] = length(coefi) - 1 ## Not counting the intercept b[i] = sqrt(sum((beta[x_cols %in% names(coefi)] - coefi[names(coefi) %in% x_cols])^2) + sum(beta[!(x_cols %in% names(coefi))])^2) ## Handling the intercept } plot(x = a, y = b, xlab = \u0026#34;Number of Coefficients\u0026#34;, ylab = \u0026#34;Relative Error\u0026#34;)   Question 6.11 - Page 264 We will now try to predict per capita crime rate in the Boston data set.\n(a) Try out some of the regression methods explored in this chapter, such as best subset selection, the lasso, ridge regression, and PCR. Present and discuss results for the approaches that you consider.\n(b) Propose a model (or set of models) that seem to perform well on this data set, and justify your answer. Make sure that you are evaluating model performance using validation set error, crossvalidation, or some other reasonable alternative, as opposed to using training error.\n(c) Does your chosen model involve all of the features in the data set? Why or why not?\nAnswer boston\u0026lt;-MASS::Boston  Summarize   boston %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 506 obs. of 14 variables: ## $ crim : num 0.00632 0.02731 0.02729 0.03237 0.06905 ... ## $ zn : num 18 0 0 0 0 0 12.5 12.5 12.5 12.5 ... ## $ indus : num 2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ... ## $ chas : int 0 0 0 0 0 0 0 0 0 0 ... ## $ nox : num 0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ... ## $ rm : num 6.58 6.42 7.18 7 7.15 ... ## $ age : num 65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ... ## $ dis : num 4.09 4.97 4.97 6.06 6.06 ... ## $ rad : int 1 2 2 3 3 3 5 5 5 5 ... ## $ tax : num 296 242 242 222 222 222 311 311 311 311 ... ## $ ptratio: num 15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ... ## $ black : num 397 397 393 395 397 ... ## $ lstat : num 4.98 9.14 4.03 2.94 5.33 ... ## $ medv : num 24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ... ## NULL boston %\u0026gt;% summary %\u0026gt;% print ## crim zn indus chas ## Min. : 0.00632 Min. : 0.00 Min. : 0.46 Min. :0.00000 ## 1st Qu.: 0.08204 1st Qu.: 0.00 1st Qu.: 5.19 1st Qu.:0.00000 ## Median : 0.25651 Median : 0.00 Median : 9.69 Median :0.00000 ## Mean : 3.61352 Mean : 11.36 Mean :11.14 Mean :0.06917 ## 3rd Qu.: 3.67708 3rd Qu.: 12.50 3rd Qu.:18.10 3rd Qu.:0.00000 ## Max. :88.97620 Max. :100.00 Max. :27.74 Max. :1.00000 ## nox rm age dis ## Min. :0.3850 Min. :3.561 Min. : 2.90 Min. : 1.130 ## 1st Qu.:0.4490 1st Qu.:5.886 1st Qu.: 45.02 1st Qu.: 2.100 ## Median :0.5380 Median :6.208 Median : 77.50 Median : 3.207 ## Mean :0.5547 Mean :6.285 Mean : 68.57 Mean : 3.795 ## 3rd Qu.:0.6240 3rd Qu.:6.623 3rd Qu.: 94.08 3rd Qu.: 5.188 ## Max. :0.8710 Max. :8.780 Max. :100.00 Max. :12.127 ## rad tax ptratio black ## Min. : 1.000 Min. :187.0 Min. :12.60 Min. : 0.32 ## 1st Qu.: 4.000 1st Qu.:279.0 1st Qu.:17.40 1st Qu.:375.38 ## Median : 5.000 Median :330.0 Median :19.05 Median :391.44 ## Mean : 9.549 Mean :408.2 Mean :18.46 Mean :356.67 ## 3rd Qu.:24.000 3rd Qu.:666.0 3rd Qu.:20.20 3rd Qu.:396.23 ## Max. :24.000 Max. :711.0 Max. :22.00 Max. :396.90 ## lstat medv ## Min. : 1.73 Min. : 5.00 ## 1st Qu.: 6.95 1st Qu.:17.02 ## Median :11.36 Median :21.20 ## Mean :12.65 Mean :22.53 ## 3rd Qu.:16.95 3rd Qu.:25.00 ## Max. :37.97 Max. :50.00 boston %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## crim zn indus chas nox rm age dis rad tax ## 504 26 76 2 81 446 356 412 9 66 ## ptratio black lstat medv ## 46 357 455 229 a) Test regression models train_ind = sample(boston %\u0026gt;% nrow,100) test_ind = setdiff(seq_len(boston %\u0026gt;% nrow), train_set) train_set\u0026lt;-boston[train_ind,] test_set\u0026lt;-boston[-train_ind,] linCol\u0026lt;-train(crim~.,data=train_set,method=\u0026#34;lm\u0026#34;) linCol %\u0026gt;% summary ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.2431 -1.0344 -0.0563 0.8187 8.1318 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 0.9339246 7.6508393 0.122 0.9031 ## zn 0.0046819 0.0157375 0.297 0.7668 ## indus 0.0276209 0.0875254 0.316 0.7531 ## chas -1.1602278 1.2386869 -0.937 0.3516 ## nox -7.5024503 5.0207818 -1.494 0.1388 ## rm 1.1240874 0.7462340 1.506 0.1356 ## age 0.0020182 0.0137404 0.147 0.8836 ## dis -0.3934753 0.2454365 -1.603 0.1126 ## rad 0.4540613 0.0791580 5.736 1.41e-07 *** ## tax 0.0008469 0.0052593 0.161 0.8724 ## ptratio -0.2978204 0.1637629 -1.819 0.0725 . ## black 0.0030642 0.0045281 0.677 0.5004 ## lstat 0.1322779 0.0626485 2.111 0.0376 * ## medv -0.0841382 0.0590700 -1.424 0.1580 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.362 on 86 degrees of freedom ## Multiple R-squared: 0.775, Adjusted R-squared: 0.741 ## F-statistic: 22.78 on 13 and 86 DF, p-value: \u0026lt; 2.2e-16 linPred\u0026lt;-predict(linCol,test_set) linPred %\u0026gt;% postResample(obs = test_set$crim) ## RMSE Rsquared MAE ## 7.3794735 0.4056002 2.6774969 L2Grid \u0026lt;- expand.grid(alpha=0, lambda=10^seq(from=-3,to=30,length=100)) ridgCol\u0026lt;-train(crim~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L2Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. ridgCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 100 -none- numeric ## beta 1300 dgCMatrix S4 ## df 100 -none- numeric ## dim 2 -none- numeric ## lambda 100 -none- numeric ## dev.ratio 100 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 13 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(ridgCol$finalModel, ridgCol$bestTune$lambda) %\u0026gt;% print ## 14 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) -3.881166065 ## zn 0.002597790 ## indus -0.005103517 ## chas -0.674764337 ## nox -0.053645732 ## rm 0.600064844 ## age 0.001153570 ## dis -0.179295384 ## rad 0.267082956 ## tax 0.006447932 ## ptratio -0.075885753 ## black -0.001650403 ## lstat 0.086462700 ## medv -0.027519270 ggplot(ridgCol)   ridgPred\u0026lt;-predict(ridgCol,test_set) ridgPred %\u0026gt;% postResample(obs = test_set$crim) ## RMSE Rsquared MAE ## 7.5065916 0.4017056 2.4777547 L1Grid \u0026lt;- expand.grid(alpha=1, # for lasso lambda=10^seq(from=-3,to=30,length=100)) lassoCol\u0026lt;-train(crim~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L1Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassoCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 78 -none- numeric ## beta 1014 dgCMatrix S4 ## df 78 -none- numeric ## dim 2 -none- numeric ## lambda 78 -none- numeric ## dev.ratio 78 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 13 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(lassoCol$finalModel, lassoCol$bestTune$lambda) %\u0026gt;% print ## 14 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) -2.024006430 ## zn . ## indus . ## chas . ## nox . ## rm . ## age . ## dis -0.008506188 ## rad 0.386379255 ## tax 0.001779579 ## ptratio . ## black . ## lstat 0.040788606 ## medv . ggplot(lassoCol)   lassoPred\u0026lt;-predict(lassoCol,test_set) lassoPred %\u0026gt;% postResample(obs = test_set$crim) ## RMSE Rsquared MAE ## 7.5868293 0.3859121 2.4892258 mGrid \u0026lt;- expand.grid(ncomp=seq(from=1,to=20,length=10))  All the models have the same RÂ² but Ridge does the worst followed by LASSO  For the rest of the question, we will consider the OLS model.\nmodelFit\u0026lt;-regsubsets(crim~.,data=boston,nvmax=20) modelFit %\u0026gt;% summary %\u0026gt;% print ## Subset selection object ## Call: regsubsets.formula(crim ~ ., data = boston, nvmax = 20) ## 13 Variables (and intercept) ## Forced in Forced out ## zn FALSE FALSE ## indus FALSE FALSE ## chas FALSE FALSE ## nox FALSE FALSE ## rm FALSE FALSE ## age FALSE FALSE ## dis FALSE FALSE ## rad FALSE FALSE ## tax FALSE FALSE ## ptratio FALSE FALSE ## black FALSE FALSE ## lstat FALSE FALSE ## medv FALSE FALSE ## 1 subsets of each size up to 13 ## Selection Algorithm: exhaustive ## zn indus chas nox rm age dis rad tax ptratio black lstat medv ## 1 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; ## 2 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 3 ( 1 ) \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; ## 4 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 5 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 6 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 7 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; ## 8 ( 1 ) \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 9 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 10 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 11 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 12 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34; \u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; ## 13 ( 1 ) \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; \u0026#34;*\u0026#34; We might want to take a look at these.\npar(mfrow=c(2,2)) plot(modelFit) plot(modelFit,scale=\u0026#39;Cp\u0026#39;) plot(modelFit,scale=\u0026#39;r2\u0026#39;) plot(modelFit,scale=\u0026#39;adjr2\u0026#39;)   plotLEAP(modelFit %\u0026gt;% summary)   It would appear that 16 variables would be a good bet. We note that the lasso model did void out 4 parameters, namely xâ,xâ,xââ and xââ.\nLets take a quick look at the various model variable significance values.\nlgp\u0026lt;-linCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;OLS Variable Importance\u0026#34;) rgp\u0026lt;-ridgCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Ridge Variable Importance\u0026#34;) lsgp\u0026lt;-lassoCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Lasso Variable Importance\u0026#34;) grid.arrange(lgp,rgp,lsgp,ncol=2,bottom=\u0026#34;Effective Importance, scaled\u0026#34;)   b) Propose a model   Given the data and plots, I would probably end up using the Ridge regression model\n  Clearly, LASSO is not working very well since it seems to have taken mainly 3 variables, one of which is largely categorical (9 levels)\n  c) Model properties boston %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 506 obs. of 14 variables: ## $ crim : num 0.00632 0.02731 0.02729 0.03237 0.06905 ... ## $ zn : num 18 0 0 0 0 0 12.5 12.5 12.5 12.5 ... ## $ indus : num 2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ... ## $ chas : int 0 0 0 0 0 0 0 0 0 0 ... ## $ nox : num 0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ... ## $ rm : num 6.58 6.42 7.18 7 7.15 ... ## $ age : num 65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ... ## $ dis : num 4.09 4.97 4.97 6.06 6.06 ... ## $ rad : int 1 2 2 3 3 3 5 5 5 5 ... ## $ tax : num 296 242 242 222 222 222 311 311 311 311 ... ## $ ptratio: num 15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ... ## $ black : num 397 397 393 395 397 ... ## $ lstat : num 4.98 9.14 4.03 2.94 5.33 ... ## $ medv : num 24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ... ## NULL boston %\u0026gt;% summary %\u0026gt;% print ## crim zn indus chas ## Min. : 0.00632 Min. : 0.00 Min. : 0.46 Min. :0.00000 ## 1st Qu.: 0.08204 1st Qu.: 0.00 1st Qu.: 5.19 1st Qu.:0.00000 ## Median : 0.25651 Median : 0.00 Median : 9.69 Median :0.00000 ## Mean : 3.61352 Mean : 11.36 Mean :11.14 Mean :0.06917 ## 3rd Qu.: 3.67708 3rd Qu.: 12.50 3rd Qu.:18.10 3rd Qu.:0.00000 ## Max. :88.97620 Max. :100.00 Max. :27.74 Max. :1.00000 ## nox rm age dis ## Min. :0.3850 Min. :3.561 Min. : 2.90 Min. : 1.130 ## 1st Qu.:0.4490 1st Qu.:5.886 1st Qu.: 45.02 1st Qu.: 2.100 ## Median :0.5380 Median :6.208 Median : 77.50 Median : 3.207 ## Mean :0.5547 Mean :6.285 Mean : 68.57 Mean : 3.795 ## 3rd Qu.:0.6240 3rd Qu.:6.623 3rd Qu.: 94.08 3rd Qu.: 5.188 ## Max. :0.8710 Max. :8.780 Max. :100.00 Max. :12.127 ## rad tax ptratio black ## Min. : 1.000 Min. :187.0 Min. :12.60 Min. : 0.32 ## 1st Qu.: 4.000 1st Qu.:279.0 1st Qu.:17.40 1st Qu.:375.38 ## Median : 5.000 Median :330.0 Median :19.05 Median :391.44 ## Mean : 9.549 Mean :408.2 Mean :18.46 Mean :356.67 ## 3rd Qu.:24.000 3rd Qu.:666.0 3rd Qu.:20.20 3rd Qu.:396.23 ## Max. :24.000 Max. :711.0 Max. :22.00 Max. :396.90 ## lstat medv ## Min. : 1.73 Min. : 5.00 ## 1st Qu.: 6.95 1st Qu.:17.02 ## Median :11.36 Median :21.20 ## Mean :12.65 Mean :22.53 ## 3rd Qu.:16.95 3rd Qu.:25.00 ## Max. :37.97 Max. :50.00 boston %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) %\u0026gt;% print ## crim zn indus chas nox rm age dis rad tax ## 504 26 76 2 81 446 356 412 9 66 ## ptratio black lstat medv ## 46 357 455 229  A good idea would be removing rad and chas from the regression   boston\u0026lt;-boston %\u0026gt;% subset(select=-c(rad,chas)) train_ind = sample(boston %\u0026gt;% nrow,100) test_ind = setdiff(seq_len(boston %\u0026gt;% nrow), train_set) train_set\u0026lt;-boston[train_ind,] test_set\u0026lt;-boston[-train_ind,] L2Grid \u0026lt;- expand.grid(alpha=0, lambda=10^seq(from=-3,to=30,length=100)) ridgCol\u0026lt;-train(crim~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L2Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. ridgCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 100 -none- numeric ## beta 1100 dgCMatrix S4 ## df 100 -none- numeric ## dim 2 -none- numeric ## lambda 100 -none- numeric ## dev.ratio 100 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 11 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(ridgCol$finalModel, ridgCol$bestTune$lambda) %\u0026gt;% print ## 12 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 0.23015398 ## zn 0.01595378 ## indus -0.01006683 ## nox 3.42104450 ## rm -0.05904911 ## age 0.01419585 ## dis -0.16724715 ## tax 0.01021790 ## ptratio 0.05741508 ## black -0.01414707 ## lstat 0.15519923 ## medv -0.04483670 ggplot(ridgCol)   ridgPred\u0026lt;-predict(ridgCol,test_set) ridgPred %\u0026gt;% postResample(obs = test_set$crim) ## RMSE Rsquared MAE ## 6.9365371 0.3619974 2.8570012 L1Grid \u0026lt;- expand.grid(alpha=1, # for lasso lambda=10^seq(from=-3,to=30,length=100)) lassoCol\u0026lt;-train(crim~.,data=train_set,method=\u0026#34;glmnet\u0026#34;,tuneGrid = L1Grid) ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : ## There were missing values in resampled performance measures. lassoCol %\u0026gt;% summary %\u0026gt;% print ## Length Class Mode ## a0 74 -none- numeric ## beta 814 dgCMatrix S4 ## df 74 -none- numeric ## dim 2 -none- numeric ## lambda 74 -none- numeric ## dev.ratio 74 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 5 -none- call ## nobs 1 -none- numeric ## lambdaOpt 1 -none- numeric ## xNames 11 -none- character ## problemType 1 -none- character ## tuneValue 2 data.frame list ## obsLevels 1 -none- logical ## param 0 -none- list coef(lassoCol$finalModel, lassoCol$bestTune$lambda) %\u0026gt;% print ## 12 x 1 sparse Matrix of class \u0026#34;dgCMatrix\u0026#34; ## 1 ## (Intercept) 0.86635621 ## zn . ## indus . ## nox . ## rm . ## age . ## dis . ## tax 0.01402174 ## ptratio . ## black -0.01454496 ## lstat 0.15290845 ## medv . ggplot(lassoCol)   lassoPred\u0026lt;-predict(lassoCol,test_set) lassoPred %\u0026gt;% postResample(obs = test_set$crim) ## RMSE Rsquared MAE ## 6.9630616 0.3693364 2.6767742 rgp\u0026lt;-ridgCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Ridge Variable Importance\u0026#34;) lsgp\u0026lt;-lassoCol %\u0026gt;% varImp %\u0026gt;% ggplot + ggtitle(\u0026#34;Lasso Variable Importance\u0026#34;) grid.arrange(rgp,lsgp,ncol=2,bottom=\u0026#34;Effective Importance, scaled\u0026#34;)   None of these models are actually any good apparently, given that we have an RÂ² of 0.3619974 for the L2 regularization and 0.3693364 for the L1.\n  James, G., Witten, D., Hastie, T., \u0026amp; Tibshirani, R. (2013). An Introduction to Statistical Learning: with Applications in R. Berlin, Germany: Springer Science \u0026amp; Business Media. \u0026#x21a9;\u0026#xfe0e;\n Lang et al., (2019). mlr3: A modern object-oriented machine learning framework in R. Journal of Open Source Software, 4(44), 1903, https://doi.org/10.21105/joss.01903 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/islr-ch6/","tags":["solutions","R","ISLR"],"title":"ISLR :: Linear Model Selection and Regularization"},{"categories":["programming"],"contents":"Chapter V - Resampling Methods All the questions are as per the ISL seventh printing1.\nCommon Instead of using the standard functions, we will leverage the mlr3 package2.\n#install.packages(\u0026#34;mlr3\u0026#34;,\u0026#34;data.table\u0026#34;,\u0026#34;mlr3viz\u0026#34;,\u0026#34;mlr3learners\u0026#34;) Actually for R version 3.6.2, the steps to get it working were a bit more involved.\ninstall.packages(\u0026#34;remotes\u0026#34;,\u0026#34;data.table\u0026#34;, \u0026#34;GGally\u0026#34;,\u0026#34;precerec\u0026#34;) # For plots library(remotes) remotes::install_github(\u0026#34;mlr-org/mlr3\u0026#34;) remotes::install_github(\u0026#34;mlr-org/mlr3viz\u0026#34;) remotes::install_github(\u0026#34;mlr-org/mlr3learners\u0026#34;) Load ISLR and other libraries.\nlibsUsed\u0026lt;-c(\u0026#34;dplyr\u0026#34;,\u0026#34;ggplot2\u0026#34;,\u0026#34;tidyverse\u0026#34;, \u0026#34;ISLR\u0026#34;,\u0026#34;caret\u0026#34;,\u0026#34;MASS\u0026#34;, \u0026#34;pROC\u0026#34;,\u0026#34;mlr3\u0026#34;,\u0026#34;data.table\u0026#34;, \u0026#34;mlr3viz\u0026#34;,\u0026#34;mlr3learners\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)) Question 5.5 - Page 198 In Chapter 4, we used logistic regression to predict the probability of default using income and balance on the Default data set. We will now estimate the test error of this logistic regression model using the validation set approach. Do not forget to set a random seed before beginning your analysis.\n(a) Fit a logistic regression model that uses income and balance to predict default.\n(b) Using the validation set approach, estimate the test error of this model. In order to do this, you must perform the following steps:\n  Split the sample set into a training set and a validation set.\n  Fit a multiple logistic regression model using only the training observations.\n  Obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default for that individual, and classifying the individual to the default category if the posterior probability is greater than \\(0.5\\).\n  Compute the validation set error, which is the fraction of the observations in the validation set that are misclassified.\n  (c) Repeat the process in (b) three times, using three different splits of the observations into a training set and a validation set. Comment on the results obtained.\n(d) Now consider a logistic regression model that predicts the prob- ability of default using income , balance , and a dummy variable for student. Estimate the test error for this model using the validation set approach. Comment on whether or not including a dummy variable for student leads to a reduction in the test error rate.\nAnswer We will need our data.\ndefDat\u0026lt;-ISLR::Default  Very quick peek   defDat %\u0026gt;% summary ## default student balance income ## No :9667 No :7056 Min. : 0.0 Min. : 772 ## Yes: 333 Yes:2944 1st Qu.: 481.7 1st Qu.:21340 ## Median : 823.6 Median :34553 ## Mean : 835.4 Mean :33517 ## 3rd Qu.:1166.3 3rd Qu.:43808 ## Max. :2654.3 Max. :73554 defDat %\u0026gt;% str ## \u0026#39;data.frame\u0026#39;: 10000 obs. of 4 variables: ## $ default: Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 1 1 1 1 1 1 1 1 1 1 ... ## $ student: Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 1 2 1 1 1 2 1 2 1 1 ... ## $ balance: num 730 817 1074 529 786 ... ## $ income : num 44362 12106 31767 35704 38463 ... a) Logistic Model with mlr3 Following the new approach which leverages R6 features leads us to define a classification task first. As far as I can tell, the data needs to be filtered to contain only the things we need to predict with, in this case we are required to use only income and balance so we will do so.\nset.seed(1984) redDat\u0026lt;-defDat %\u0026gt;% subset(select=c(income,balance,default)) tskLogiFull=TaskClassif$new(id=\u0026#34;credit\u0026#34;,backend=redDat,target=\u0026#34;default\u0026#34;) print(tskLogiFull) ## \u0026lt;TaskClassif:credit\u0026gt; (10000 x 3) ## * Target: default ## * Properties: twoclass ## * Features (2): ## - dbl (2): balance, income This can be visualized neatly as well.\nautoplot(tskLogiFull)   Figure 1: MLR3 Visualizations\n  We have a pretty imbalanced data-set.\nautoplot(tskLogiFull,type=\u0026#34;pairs\u0026#34;) ## Registered S3 method overwritten by \u0026#39;GGally\u0026#39;: ## method from ## +.gg ggplot2 ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   Figure 2: Paired mlr3 data\n  We can use any of the learners implemented, so it is a good idea to take a quick peek at them all.\nas.data.table(mlr_learners) ## key feature_types ## 1: classif.debug logical,integer,numeric,character,factor,ordered ## 2: classif.featureless logical,integer,numeric,character,factor,ordered ## 3: classif.glmnet logical,integer,numeric ## 4: classif.kknn logical,integer,numeric,factor,ordered ## 5: classif.lda logical,integer,numeric,factor,ordered ## 6: classif.log_reg logical,integer,numeric,character,factor,ordered ## 7: classif.naive_bayes logical,integer,numeric,factor ## 8: classif.qda logical,integer,numeric,factor,ordered ## 9: classif.ranger logical,integer,numeric,character,factor,ordered ## 10: classif.rpart logical,integer,numeric,factor,ordered ## 11: classif.svm logical,integer,numeric ## 12: classif.xgboost logical,integer,numeric ## 13: regr.featureless logical,integer,numeric,character,factor,ordered ## 14: regr.glmnet logical,integer,numeric ## 15: regr.kknn logical,integer,numeric,factor,ordered ## 16: regr.km logical,integer,numeric ## 17: regr.lm logical,integer,numeric,factor ## 18: regr.ranger logical,integer,numeric,character,factor,ordered ## 19: regr.rpart logical,integer,numeric,factor,ordered ## 20: regr.svm logical,integer,numeric ## 21: regr.xgboost logical,integer,numeric ## key feature_types ## packages ## 1: ## 2: ## 3: glmnet ## 4: kknn ## 5: MASS ## 6: stats ## 7: e1071 ## 8: MASS ## 9: ranger ## 10: rpart ## 11: e1071 ## 12: xgboost ## 13: stats ## 14: glmnet ## 15: kknn ## 16: DiceKriging ## 17: stats ## 18: ranger ## 19: rpart ## 20: e1071 ## 21: xgboost ## packages ## properties ## 1: missings,multiclass,twoclass ## 2: importance,missings,multiclass,selected_features,twoclass ## 3: multiclass,twoclass,weights ## 4: multiclass,twoclass ## 5: multiclass,twoclass,weights ## 6: twoclass,weights ## 7: multiclass,twoclass ## 8: multiclass,twoclass,weights ## 9: importance,multiclass,oob_error,twoclass,weights ## 10: importance,missings,multiclass,selected_features,twoclass,weights ## 11: multiclass,twoclass ## 12: importance,missings,multiclass,twoclass,weights ## 13: importance,missings,selected_features ## 14: weights ## 15: ## 16: ## 17: weights ## 18: importance,oob_error,weights ## 19: importance,missings,selected_features,weights ## 20: ## 21: importance,missings,weights ## properties ## predict_types ## 1: response,prob ## 2: response,prob ## 3: response,prob ## 4: response,prob ## 5: response,prob ## 6: response,prob ## 7: response,prob ## 8: response,prob ## 9: response,prob ## 10: response,prob ## 11: response,prob ## 12: response,prob ## 13: response,se ## 14: response ## 15: response ## 16: response,se ## 17: response,se ## 18: response,se ## 19: response ## 20: response ## 21: response ## predict_types We can now pick the logistic one. Note that this essentially proxies our requests down to the stats package.\nlearner = mlr_learners$get(\u0026#34;classif.log_reg\u0026#34;) Now we can final solve the question, which is to simply use the model on all our data and return the accuracy metrics.\ntrainFullCred=learner$train(tskLogiFull) print(learner$predict(tskLogiFull)$confusion) ## truth ## response No Yes ## No 9629 225 ## Yes 38 108 measure = msr(\u0026#34;classif.acc\u0026#34;) print(learner$predict(tskLogiFull)$score(measure)) ## classif.acc ## 0.9737 Note that this style of working with objects does not really utilize the familiar %\u0026gt;% interface.\nThe caret package still has neater default metrics so we will use that as well.\nconfusionMatrix(learner$predict(tskLogiFull)$response,defDat$default) ## Confusion Matrix and Statistics ## ## Reference ## Prediction No Yes ## No 9629 225 ## Yes 38 108 ## ## Accuracy : 0.9737 ## 95% CI : (0.9704, 0.9767) ## No Information Rate : 0.9667 ## P-Value [Acc \u0026gt; NIR] : 3.067e-05 ## ## Kappa : 0.4396 ## ## Mcnemar\u0026#39;s Test P-Value : \u0026lt; 2.2e-16 ## ## Sensitivity : 0.9961 ## Specificity : 0.3243 ## Pos Pred Value : 0.9772 ## Neg Pred Value : 0.7397 ## Prevalence : 0.9667 ## Detection Rate : 0.9629 ## Detection Prevalence : 0.9854 ## Balanced Accuracy : 0.6602 ## ## \u0026#39;Positive\u0026#39; Class : No ## autoplot(learner$predict(tskLogiFull))   Figure 3: Autoplot results\n  We can get some other plots as well, but we need our probabilities to be returned.\n# For ROC curves lrnprob = lrn(\u0026#34;classif.log_reg\u0026#34;,predict_type=\u0026#34;prob\u0026#34;) lrnprob$train(tskLogiFull) autoplot(lrnprob$predict(tskLogiFull),type=\u0026#34;roc\u0026#34;)   Figure 4: ROC curve\n  b) Validation Sets with mlr3 Though the question seems to require a manual validation set generation and thresholding, we can simply use the defaults.\ntrain_set = sample(tskLogiFull$nrow, 0.8 * tskLogiFull$nrow) test_set = setdiff(seq_len(tskLogiFull$nrow), train_set) learner$train(tskLogiFull,row_ids=train_set) confusionMatrix(learner$predict(tskLogiFull, row_ids=test_set)$response,defDat[-train_set,]$default) ## Confusion Matrix and Statistics ## ## Reference ## Prediction No Yes ## No 1921 47 ## Yes 9 23 ## ## Accuracy : 0.972 ## 95% CI : (0.9638, 0.9788) ## No Information Rate : 0.965 ## P-Value [Acc \u0026gt; NIR] : 0.04663 ## ## Kappa : 0.4387 ## ## Mcnemar\u0026#39;s Test P-Value : 7.641e-07 ## ## Sensitivity : 0.9953 ## Specificity : 0.3286 ## Pos Pred Value : 0.9761 ## Neg Pred Value : 0.7188 ## Prevalence : 0.9650 ## Detection Rate : 0.9605 ## Detection Prevalence : 0.9840 ## Balanced Accuracy : 0.6620 ## ## \u0026#39;Positive\u0026#39; Class : No ## For a reasonable comparison, we will demonstrate a standard approach as well. In this instance we will not use caret to ensure that our class distribution in the train and test sets are not sampled to remain the same.\ntrainNoCaret\u0026lt;-sample(nrow(defDat), size = floor(.8*nrow(defDat)), replace = F) glm.fit=glm(default~income+balance,data=defDat,family=binomial,subset=trainNoCaret) glm.probs\u0026lt;-predict(glm.fit,defDat[-trainNoCaret,],type=\u0026#34;response\u0026#34;) glm.preds\u0026lt;-ifelse(glm.probs \u0026lt; 0.5, \u0026#34;No\u0026#34;, \u0026#34;Yes\u0026#34;) confusionMatrix(glm.preds %\u0026gt;% factor,defDat[-trainNoCaret,]$default) ## Confusion Matrix and Statistics ## ## Reference ## Prediction No Yes ## No 1930 46 ## Yes 6 18 ## ## Accuracy : 0.974 ## 95% CI : (0.966, 0.9805) ## No Information Rate : 0.968 ## P-Value [Acc \u0026gt; NIR] : 0.06859 ## ## Kappa : 0.3986 ## ## Mcnemar\u0026#39;s Test P-Value : 6.362e-08 ## ## Sensitivity : 0.9969 ## Specificity : 0.2812 ## Pos Pred Value : 0.9767 ## Neg Pred Value : 0.7500 ## Prevalence : 0.9680 ## Detection Rate : 0.9650 ## Detection Prevalence : 0.9880 ## Balanced Accuracy : 0.6391 ## ## \u0026#39;Positive\u0026#39; Class : No ## Since the two approaches use different samples there is a little variation, but we can see that the accuracy is essentially the same.\nc) 3-fold cross validation As per the question, we can repeat the block above three times, or extract it into a function which takes a seed value and run that three times. Either way, here we will present the mlr3 approach to cross validation and resampling.\nrr = resample(tskLogiFull, lrnprob, rsmp(\u0026#34;cv\u0026#34;, folds = 3)) ## INFO [22:12:30.025] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 1/3) ## INFO [22:12:30.212] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 2/3) ## INFO [22:12:30.360] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 3/3) autoplot(rr,type=\u0026#34;roc\u0026#34;)   Figure 5: Resampled ROC curve\n  We might want the average as well.\nrr$aggregate(msr(\u0026#34;classif.ce\u0026#34;)) %\u0026gt;% print ## classif.ce ## 0.02630035 Adding Student as a dummy variable We will stick to the mlr3 approach because it is faster.\nredDat2\u0026lt;-defDat %\u0026gt;% mutate(student=as.numeric(defDat$student)) tskLogi2=TaskClassif$new(id=\u0026#34;credit\u0026#34;,backend=redDat2,target=\u0026#34;default\u0026#34;) print(tskLogi2) ## \u0026lt;TaskClassif:credit\u0026gt; (10000 x 4) ## * Target: default ## * Properties: twoclass ## * Features (3): ## - dbl (3): balance, income, student autoplot(tskLogi2,type=\u0026#34;pairs\u0026#34;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   Figure 6: Logistic regression pairs data\n  This gives us a visual indicator and premonition that we might not be getting incredible results with our new variable in the mix, but we should still work it through.\nconfusionMatrix(lrnprob$predict(tskLogi2)$response,defDat$default) ## Confusion Matrix and Statistics ## ## Reference ## Prediction No Yes ## No 9629 225 ## Yes 38 108 ## ## Accuracy : 0.9737 ## 95% CI : (0.9704, 0.9767) ## No Information Rate : 0.9667 ## P-Value [Acc \u0026gt; NIR] : 3.067e-05 ## ## Kappa : 0.4396 ## ## Mcnemar\u0026#39;s Test P-Value : \u0026lt; 2.2e-16 ## ## Sensitivity : 0.9961 ## Specificity : 0.3243 ## Pos Pred Value : 0.9772 ## Neg Pred Value : 0.7397 ## Prevalence : 0.9667 ## Detection Rate : 0.9629 ## Detection Prevalence : 0.9854 ## Balanced Accuracy : 0.6602 ## ## \u0026#39;Positive\u0026#39; Class : No ## autoplot(lrnprob$predict(tskLogi2))   Figure 7: Autoplot figure\n  lrnprob$train(tskLogi2) autoplot(lrnprob$predict(tskLogi2),type=\u0026#34;roc\u0026#34;)   Figure 8: ROC plot\n  Although we have slightly better accuracy with the new variable, it needs to be compared to determine if it is worth further investigation.\nWith a three-fold validation approach,\nlibrary(\u0026#34;gridExtra\u0026#34;) ## ## Attaching package: \u0026#39;gridExtra\u0026#39; ## The following object is masked from \u0026#39;package:dplyr\u0026#39;: ## ## combine rr2 = resample(tskLogi2, lrnprob, rsmp(\u0026#34;cv\u0026#34;, folds = 3)) ## INFO [22:12:39.670] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 1/3) ## INFO [22:12:39.731] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 2/3) ## INFO [22:12:39.780] Applying learner \u0026#39;classif.log_reg\u0026#39; on task \u0026#39;credit\u0026#39; (iter 3/3) wS\u0026lt;-autoplot(rr2) nS\u0026lt;-autoplot(rr) grid.arrange(wS,nS,ncol=2,bottom=\u0026#34;With student (left) and without (right)\u0026#34;)   Figure 9: Plot of accuracy\n  Given the results, it is fair to say that adding the student data is useful in general.\nQuestion 5.6 - Page 199 We continue to consider the use of a logistic regression model to predict the probability of default using income and balance on the Default data set. In particular, we will now compute estimates for the standard errors of the income and balance logistic regression coefficients in two different ways: (1) using the bootstrap, and (2) using the standard formula for computing the standard errors in the glm() function. Do not forget to set a random seed before beginning your analysis.\n(a) Using the summary() and glm() functions, determine the estimated standard errors for the coefficients associated with income and balance in a multiple logistic regression model that uses both predictors.\n(b) Write a function, boot.fn() , that takes as input the Default data set as well as an index of the observations, and that outputs the coefficient estimates for income and balance in the multiple logistic regression model.\n(c) Use the boot() function together with your boot.fn() function to estimate the standard errors of the logistic regression coefficients for income and balance.\n(d) Comment on the estimated standard errors obtained using the glm() function and using your bootstrap function.\nAnswer This question is slightly more specific to the packages in the book so we will use them.\na) Fit summary glm.fit %\u0026gt;% summary ## ## Call: ## glm(formula = default ~ income + balance, family = binomial, ## data = defDat, subset = trainNoCaret) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.1943 -0.1488 -0.0588 -0.0217 3.7058 ## ## Coefficients: ## Estimate Std. Error z value Pr(\u0026gt;|z|) ## (Intercept) -1.150e+01 4.814e-01 -23.885 \u0026lt; 2e-16 *** ## income 2.288e-05 5.553e-06 4.121 3.78e-05 *** ## balance 5.593e-03 2.509e-04 22.295 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2354.0 on 7999 degrees of freedom ## Residual deviance: 1283.6 on 7997 degrees of freedom ## AIC: 1289.6 ## ## Number of Fisher Scoring iterations: 8 b) Function boot.fn=function(data,subs){return(coef(glm(default~income+balance,data=data, family=binomial,subset=subs)))} boot.fn(defDat,train_set) %\u0026gt;% print ## (Intercept) income balance ## -1.136824e+01 1.846153e-05 5.576468e-03 glm(default~income+balance,data=defDat,family=binomial,subset=train_set) %\u0026gt;% summary ## ## Call: ## glm(formula = default ~ income + balance, family = binomial, ## data = defDat, subset = train_set) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.4280 -0.1465 -0.0582 -0.0218 3.7115 ## ## Coefficients: ## Estimate Std. Error z value Pr(\u0026gt;|z|) ## (Intercept) -1.137e+01 4.813e-01 -23.618 \u0026lt; 2e-16 *** ## income 1.846e-05 5.553e-06 3.324 0.000886 *** ## balance 5.576e-03 2.529e-04 22.046 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2313.6 on 7999 degrees of freedom ## Residual deviance: 1266.4 on 7997 degrees of freedom ## AIC: 1272.4 ## ## Number of Fisher Scoring iterations: 8 We see that the statistics obtained from both are the same.\nc) Bootstrap The old fashioned way. R is the resample rate, boot.fn is the statistic used.\nlibrary(boot) ## ## Attaching package: \u0026#39;boot\u0026#39; ## The following object is masked from \u0026#39;package:lattice\u0026#39;: ## ## melanoma boot(defDat,boot.fn,R=184) %\u0026gt;% print ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = defDat, statistic = boot.fn, R = 184) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* -1.154047e+01 -1.407368e-02 4.073453e-01 ## t2* 2.080898e-05 -6.386634e-08 4.720109e-06 ## t3* 5.647103e-03 1.350950e-05 2.111547e-04 d) Comparison  Clearly, there is not much difference in the standard error estimates  Var | Bootstrap | Summary |\n| :---------: | --------- |\nIntercept | 4.428026e-01 | 4.883e-01 |\nincome | 2.797011e-06 | 5.548e-06 |\nbalance | 2.423002e-04 | 2.591e-04 |\nQuestion 5.8 - Page 200 We will now perform cross-validation on a simulated data set. (a) Generate a simulated data set as follows:\n\u0026gt; set . seed (1) \u0026gt; y = rnorm (100) \u0026gt; x = rnorm (100) \u0026gt; y =x -2\\* x ^2+ rnorm (100) In this data set, what is n and what is p? Write out the model used to generate the data in equation form.\n(b) Create a scatterplot of \\(X\\) against \\(Y\\). Comment on what you find.\n(c) Set a random seed, and then compute the LOOCV errors that result from fitting the following four models using least squares:\n  \\(Y=\\beta_0+\\beta_1X+\\eta\\)\n  \\(Y=\\beta_0+\\beta_1X+\\beta_2X^2+\\eta\\)\n  \\(Y=\\beta_0+\\beta_1X+\\beta_2X^2+\\beta_{3}X^{3}+\\eta\\)\n  \\(Y=\\beta_0+\\beta_1X+\\beta_2X^2+\\beta_{3}X^{3}+\\beta_{4}X^{4}+\\eta\\)\n  Note you may find it helpful to use the data.frame() function to create a single data set containing both \\(X\\) and \\(Y\\).\n(d) Repeat (c) using another random seed, and report your results. Are your results the same as what you got in (c)? Why?\n(e) Which of the models in (c) had the smallest LOOCV error? Is this what you expected? Explain your answer.\n(f) Comment on the statistical significance of the coefficient esti- mates that results from fitting each of the models in (c) using least squares. Do these results agree with the conclusions drawn based on the cross-validation results?\nAnswer a) Modeling data set.seed(1) y \u0026lt;- rnorm(100) x \u0026lt;- rnorm(100) y \u0026lt;- x - 2*x^2 + rnorm(100) Clearly:\n Our equation is \\(y=x-2x^{2}+\\epsilon\\) where \\(epsilon\\) is normally distributed from 100 samples We have \\(n=100\\) observations \\(p=2\\) where \\(p\\) is the number of features  b) Visual inspection qplot(x,y)   Figure 10: Model data plot\n  We observe that the data is quadratic, as we also know from the generating function, which was a quadratic equation plus normally distributed noise.\nc) Least squares fits Not very important, but here we use the caret form.\npow=function(x,y){return(x^y)} dfDat \u0026lt;- data.frame(y,x,x2=pow(x,2),x3=pow(x,3),x4=pow(x,4)) We might have also just used poly(x,n) to skip making the data frame.\nWe will set our resampling method as follows:\nfitControl\u0026lt;-trainControl(method=\u0026#34;LOOCV\u0026#34;) train(y~x,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 2.427134 0.05389864 1.878566 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 2 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.042399 0.8032414 0.8029942 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2+x3,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 3 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.050041 0.8003517 0.8073024 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2+x3+x4,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 4 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.055828 0.7982111 0.8150296 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE d) Seeding effects set.seed(1995) train(y~x,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 2.427134 0.05389864 1.878566 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 2 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.042399 0.8032414 0.8029942 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2+x3,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 3 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.050041 0.8003517 0.8073024 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~x+x2+x3+x4,data=dfDat,trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 4 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.055828 0.7982111 0.8150296 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE We note that there is no change on varying the seed because LOOCV is exhaustive and uses n folds for each observation.\ne) Analysis train(y~x,data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 2.427134 0.05389864 1.878566 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~poly(x,2),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.042399 0.8032414 0.8029942 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~poly(x,3),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.050041 0.8003517 0.8073024 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE train(y~poly(x,4),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% print ## Linear Regression ## ## 100 samples ## 1 predictor ## ## No pre-processing ## Resampling: Leave-One-Out Cross-Validation ## Summary of sample sizes: 99, 99, 99, 99, 99, 99, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 1.055828 0.7982111 0.8150296 ## ## Tuning parameter \u0026#39;intercept\u0026#39; was held constant at a value of TRUE Clearly the quadratic polynomial has the lowest error, which makes sense given how the data was generated.\nf) Statistical significance train(y~x,data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% summary %\u0026gt;% print ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.3469 -0.9275 0.8028 1.5608 4.3974 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.8185 0.2364 -7.692 1.14e-11 *** ## x 0.2430 0.2479 0.981 0.329 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.362 on 98 degrees of freedom ## Multiple R-squared: 0.009717, Adjusted R-squared: -0.0003881 ## F-statistic: 0.9616 on 1 and 98 DF, p-value: 0.3292 train(y~poly(x,2),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% summary %\u0026gt;% print ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.89884 -0.53765 0.04135 0.61490 2.73607 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.8277 0.1032 -17.704 \u0026lt;2e-16 *** ## `poly(x, 2)1` 2.3164 1.0324 2.244 0.0271 * ## `poly(x, 2)2` -21.0586 1.0324 -20.399 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.032 on 97 degrees of freedom ## Multiple R-squared: 0.8128, Adjusted R-squared: 0.8089 ## F-statistic: 210.6 on 2 and 97 DF, p-value: \u0026lt; 2.2e-16 train(y~poly(x,3),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% summary %\u0026gt;% print ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.87250 -0.53881 0.02862 0.59383 2.74350 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.8277 0.1037 -17.621 \u0026lt;2e-16 *** ## `poly(x, 3)1` 2.3164 1.0372 2.233 0.0279 * ## `poly(x, 3)2` -21.0586 1.0372 -20.302 \u0026lt;2e-16 *** ## `poly(x, 3)3` -0.3048 1.0372 -0.294 0.7695 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.037 on 96 degrees of freedom ## Multiple R-squared: 0.813, Adjusted R-squared: 0.8071 ## F-statistic: 139.1 on 3 and 96 DF, p-value: \u0026lt; 2.2e-16 train(y~poly(x,4),data=dfDat %\u0026gt;% subset(select=c(y,x)),trControl=fitControl,method=\u0026#34;lm\u0026#34;) %\u0026gt;% summary %\u0026gt;% print ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8914 -0.5244 0.0749 0.5932 2.7796 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.8277 0.1041 -17.549 \u0026lt;2e-16 *** ## `poly(x, 4)1` 2.3164 1.0415 2.224 0.0285 * ## `poly(x, 4)2` -21.0586 1.0415 -20.220 \u0026lt;2e-16 *** ## `poly(x, 4)3` -0.3048 1.0415 -0.293 0.7704 ## `poly(x, 4)4` -0.4926 1.0415 -0.473 0.6373 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.041 on 95 degrees of freedom ## Multiple R-squared: 0.8134, Adjusted R-squared: 0.8055 ## F-statistic: 103.5 on 4 and 95 DF, p-value: \u0026lt; 2.2e-16  Clearly, the second order terms are the most significant, as expected  Question 5.9 - Page 201 We will now consider the Boston housing data set, from the MASS library.\n(a) Based on this data set, provide an estimate for the population mean of medv. Call this estimate \\(\\hat{\\mu}\\).\n(b) Provide an estimate of the standard error of \\(\\hat{\\mu}\\). Interpret this result. Hint: We can compute the standard error of the sample mean by dividing the sample standard deviation by the square root of the number of observations.\n(c) Now estimate the standard error of \\(\\hat{\\mu}\\) using the bootstrap. How does this compare to your answer from (b)?\n(d) Based on your bootstrap estimate from (c), provide a 95 % confidence interval for the mean of medv. Compare it to the results obtained using t.test(Boston\\$medv). Hint: You can approximate a 95 % confidence interval using the formula \\([\\hat{\\mu} â 2SE(\\hat{\\mu}), \\hat{\\mu} + 2SE(\\hat{\\mu})]\\).\n(e) Based on this data set, provide an estimate, \\(\\hat{\\mu_{med}}\\), for the median value of medv in the population.\n(f) We now would like to estimate the standard error of \\(\\hat{\\mu}\\) med. Unfortunately, there is no simple formula for computing the standard error of the median. Instead, estimate the standard error of the median using the bootstrap. Comment on your findings.\n(g) Based on this data set, provide an estimate for the tenth percentile of medv in Boston suburbs. Call this quantity \\(\\hat{\\mu_{0.1}}\\). (You can use the quantile() function.)\n(h) Use the bootstrap to estimate the standard error of \\(\\hat{\\mu_{0.1}}\\). Comment on your findings.\nAnswer boston\u0026lt;-MASS::Boston  Reminder   boston %\u0026gt;% summary %\u0026gt;% print ## crim zn indus chas ## Min. : 0.00632 Min. : 0.00 Min. : 0.46 Min. :0.00000 ## 1st Qu.: 0.08204 1st Qu.: 0.00 1st Qu.: 5.19 1st Qu.:0.00000 ## Median : 0.25651 Median : 0.00 Median : 9.69 Median :0.00000 ## Mean : 3.61352 Mean : 11.36 Mean :11.14 Mean :0.06917 ## 3rd Qu.: 3.67708 3rd Qu.: 12.50 3rd Qu.:18.10 3rd Qu.:0.00000 ## Max. :88.97620 Max. :100.00 Max. :27.74 Max. :1.00000 ## nox rm age dis ## Min. :0.3850 Min. :3.561 Min. : 2.90 Min. : 1.130 ## 1st Qu.:0.4490 1st Qu.:5.886 1st Qu.: 45.02 1st Qu.: 2.100 ## Median :0.5380 Median :6.208 Median : 77.50 Median : 3.207 ## Mean :0.5547 Mean :6.285 Mean : 68.57 Mean : 3.795 ## 3rd Qu.:0.6240 3rd Qu.:6.623 3rd Qu.: 94.08 3rd Qu.: 5.188 ## Max. :0.8710 Max. :8.780 Max. :100.00 Max. :12.127 ## rad tax ptratio black ## Min. : 1.000 Min. :187.0 Min. :12.60 Min. : 0.32 ## 1st Qu.: 4.000 1st Qu.:279.0 1st Qu.:17.40 1st Qu.:375.38 ## Median : 5.000 Median :330.0 Median :19.05 Median :391.44 ## Mean : 9.549 Mean :408.2 Mean :18.46 Mean :356.67 ## 3rd Qu.:24.000 3rd Qu.:666.0 3rd Qu.:20.20 3rd Qu.:396.23 ## Max. :24.000 Max. :711.0 Max. :22.00 Max. :396.90 ## lstat medv ## Min. : 1.73 Min. : 5.00 ## 1st Qu.: 6.95 1st Qu.:17.02 ## Median :11.36 Median :21.20 ## Mean :12.65 Mean :22.53 ## 3rd Qu.:16.95 3rd Qu.:25.00 ## Max. :37.97 Max. :50.00 boston %\u0026gt;% str %\u0026gt;% print ## \u0026#39;data.frame\u0026#39;: 506 obs. of 14 variables: ## $ crim : num 0.00632 0.02731 0.02729 0.03237 0.06905 ... ## $ zn : num 18 0 0 0 0 0 12.5 12.5 12.5 12.5 ... ## $ indus : num 2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ... ## $ chas : int 0 0 0 0 0 0 0 0 0 0 ... ## $ nox : num 0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ... ## $ rm : num 6.58 6.42 7.18 7 7.15 ... ## $ age : num 65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ... ## $ dis : num 4.09 4.97 4.97 6.06 6.06 ... ## $ rad : int 1 2 2 3 3 3 5 5 5 5 ... ## $ tax : num 296 242 242 222 222 222 311 311 311 311 ... ## $ ptratio: num 15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ... ## $ black : num 397 397 393 395 397 ... ## $ lstat : num 4.98 9.14 4.03 2.94 5.33 ... ## $ medv : num 24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ... ## NULL a) Mean muhat=boston$medv %\u0026gt;% mean() print(muhat) ## [1] 22.53281 b) Standard error Recall that \\(SE=\\frac{SD}{\\sqrt{N_{obs}}}\\)\nboston$medv %\u0026gt;% sd/(nrow(boston)^0.5) %\u0026gt;% print ## [1] 22.49444 ## [1] 0.4088611 c) Bootstrap estimate library(boot) myMean\u0026lt;-function(frame,ind){return(mean(frame[ind]))} boot(boston$medv,myMean,R=184) %\u0026gt;% print ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = boston$medv, statistic = myMean, R = 184) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 22.53281 0.03451839 0.409621 We see that the bootstrapped error over 184 samples is 0.4341499 while without it we had 0.4088611 which is similar enough.\nd) Confidence intervals with bootstrap and t.test boston$medv %\u0026gt;% t.test %\u0026gt;% print ## ## One Sample t-test ## ## data: . ## t = 55.111, df = 505, p-value \u0026lt; 2.2e-16 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 21.72953 23.33608 ## sample estimates: ## mean of x ## 22.53281 We can approximate this with what we already have\nbRes=boot(boston$medv,myMean,R=184) seBoot\u0026lt;-bRes$t %\u0026gt;% var %\u0026gt;% sqrt xlow=muhat-2*(seBoot) xhigh=muhat+2*(seBoot) c(xlow,xhigh) %\u0026gt;% print ## [1] 21.72675 23.33887 Our intervals are also pretty close to each other.\ne) Median boston$medv %\u0026gt;% sort %\u0026gt;% median %\u0026gt;% print ## [1] 21.2 f) Median standard error We can reuse the logic of the myMean function defined previously.\nmyMedian=function(data,ind){return(median(data[ind]))} boston$medv %\u0026gt;% boot(myMedian,R=1500) %\u0026gt;% print ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = ., statistic = myMedian, R = 1500) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 21.2 -0.03773333 0.387315 We see that the standard error is 0.3767072.\ng) Tenth percentile mu0one\u0026lt;-boston$medv %\u0026gt;% quantile(c(0.1)) print(mu0one) ## 10% ## 12.75 h) Bootstrap Once again.\nmyQuant=function(data,ind){return(quantile(data[ind],0.1))} boston$medv %\u0026gt;% boot(myQuant,R=500) %\u0026gt;% print ## ## ORDINARY NONPARAMETRIC BOOTSTRAP ## ## ## Call: ## boot(data = ., statistic = myQuant, R = 500) ## ## ## Bootstrap Statistics : ## original bias std. error ## t1* 12.75 -0.0095 0.4951415 The standard error is 0.5024526\n  James, G., Witten, D., Hastie, T., \u0026amp; Tibshirani, R. (2013). An Introduction to Statistical Learning: with Applications in R. Berlin, Germany: Springer Science \u0026amp; Business Media. \u0026#x21a9;\u0026#xfe0e;\n Lang et al., (2019). mlr3: A modern object-oriented machine learning framework in R. Journal of Open Source Software, 4(44), 1903, https://doi.org/10.21105/joss.01903 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/islr-ch5/","tags":["solutions","R","ISLR"],"title":"ISLR :: Resampling Methods"},{"categories":["programming"],"contents":"Chapter IV - Classification All the questions are as per the ISL seventh printingÂ 1.\nCommon Stuff Here I\u0026rsquo;ll load things I will be using throughout, mostly libraries.\nlibsUsed\u0026lt;-c(\u0026#34;dplyr\u0026#34;,\u0026#34;ggplot2\u0026#34;,\u0026#34;tidyverse\u0026#34;,\u0026#34;ISLR\u0026#34;,\u0026#34;caret\u0026#34;) invisible(lapply(libsUsed, library, character.only = TRUE)) Question 4.10 - Page 171 This question should be answered using the Weekly data set, which is part of the ISLR package. This data is similar in nature to the Smarket data from this chapter\u0026rsquo;s lab, except that it contains 1, 089 weekly returns for 21 years, from the beginning of 1990 to the end of 2010.\n(a) Produce some numerical and graphical summaries of the Weekly data. Do there appear to be any patterns?\n(b) Use the full data set to perform a logistic regression with Direction as the response and the five lag variables plus Volume as predictors. Use the summary function to print the results. Do any of the predictors appear to be statistically significant? If so, which ones?\n(c) Compute the confusion matrix and overall fraction of correct predictions. Explain what the confusion matrix is telling you about the types of mistakes made by logistic regression.\n(d) Now fit the logistic regression model using a training data period from 1990 to 2008, with Lag2 as the only predictor. Compute the confusion matrix and the overall fraction of correct predictions for the held out data (that is, the data from 2009 and 2010).\n(e) Repeat (d) using LDA.\n(f) Repeat (d) using QDA.\n(g) Repeat (d) using KNN with \\(K = 1\\).\n(h) Which of these methods appears to provide the best results on this data?\n(i) Experiment with different combinations of predictors, including possible transformations and interactions, for each of the methods. Report the variables, method, and associated confusion matrix that appears to provide the best results on the held out data. Note that you should also experiment with values for K in the KNN classifier.\nAnswer We will need the data in a variable for ease of use.\nweeklyDat\u0026lt;-ISLR::Weekly a) Summary Statistics Text Most of this segment relies heavily on usage of dplyr and especially the %\u0026gt;% or pipe operator for readability. The use of the skimr package2 might added more descriptive statistics, but is not covered here.\nBasic Summaries weeklyDat %\u0026gt;% str # \u0026#39;data.frame\u0026#39;: 1089 obs. of 9 variables: # $ Year : num 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ... # $ Lag1 : num 0.816 -0.27 -2.576 3.514 0.712 ... # $ Lag2 : num 1.572 0.816 -0.27 -2.576 3.514 ... # $ Lag3 : num -3.936 1.572 0.816 -0.27 -2.576 ... # $ Lag4 : num -0.229 -3.936 1.572 0.816 -0.27 ... # $ Lag5 : num -3.484 -0.229 -3.936 1.572 0.816 ... # $ Volume : num 0.155 0.149 0.16 0.162 0.154 ... # $ Today : num -0.27 -2.576 3.514 0.712 1.178 ... # $ Direction: Factor w/ 2 levels \u0026#34;Down\u0026#34;,\u0026#34;Up\u0026#34;: 1 1 2 2 2 1 2 2 2 1 ... We see that there is only one Factor, which makes sense.\nweeklyDat %\u0026gt;% summary # Year Lag1 Lag2 Lag3 # Min. :1990 Min. :-18.1950 Min. :-18.1950 Min. :-18.1950 # 1st Qu.:1995 1st Qu.: -1.1540 1st Qu.: -1.1540 1st Qu.: -1.1580 # Median :2000 Median : 0.2410 Median : 0.2410 Median : 0.2410 # Mean :2000 Mean : 0.1506 Mean : 0.1511 Mean : 0.1472 # 3rd Qu.:2005 3rd Qu.: 1.4050 3rd Qu.: 1.4090 3rd Qu.: 1.4090 # Max. :2010 Max. : 12.0260 Max. : 12.0260 Max. : 12.0260 # Lag4 Lag5 Volume Today # Min. :-18.1950 Min. :-18.1950 Min. :0.08747 Min. :-18.1950 # 1st Qu.: -1.1580 1st Qu.: -1.1660 1st Qu.:0.33202 1st Qu.: -1.1540 # Median : 0.2380 Median : 0.2340 Median :1.00268 Median : 0.2410 # Mean : 0.1458 Mean : 0.1399 Mean :1.57462 Mean : 0.1499 # 3rd Qu.: 1.4090 3rd Qu.: 1.4050 3rd Qu.:2.05373 3rd Qu.: 1.4050 # Max. : 12.0260 Max. : 12.0260 Max. :9.32821 Max. : 12.0260 # Direction # Down:484 # Up :605 # # # # Unique Values We might also want to know how many unique values are there in each column.\nweeklyDat %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) # Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today # 21 1004 1005 1005 1005 1005 1089 1003 # Direction # 2 We note that year has disproportionately lower values, something to keep in mind while constructing models later.\nRange The range of each variable might be useful as well, but we have to ignore the factor.\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% sapply(range) # Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today # [1,] 1990 -18.195 -18.195 -18.195 -18.195 -18.195 0.087465 -18.195 # [2,] 2010 12.026 12.026 12.026 12.026 12.026 9.328214 12.026 The most interesting thing about this is probably that the Lag variables all have the same range, also something to be kept in mind while applying transformations to the variable (if at all).\nMean and Std. Dev By now we might have a pretty good idea of how this will look, but it is still worth seeing.\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% sapply(mean) # Year Lag1 Lag2 Lag3 Lag4 Lag5 # 2000.0486685 0.1505849 0.1510790 0.1472048 0.1458182 0.1398926 # Volume Today # 1.5746176 0.1498990 As expected, the Lag values have almost the same mean, what is a bit interesting though, is that the Today variable has roughly the same mean as the Lag variables.\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% sapply(sd) # Year Lag1 Lag2 Lag3 Lag4 Lag5 Volume Today # 6.033182 2.357013 2.357254 2.360502 2.360279 2.361285 1.686636 2.356927 This is largely redundant in terms of new information.\nCorrelations weeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% cor # Year Lag1 Lag2 Lag3 Lag4 # Year 1.00000000 -0.032289274 -0.03339001 -0.03000649 -0.031127923 # Lag1 -0.03228927 1.000000000 -0.07485305 0.05863568 -0.071273876 # Lag2 -0.03339001 -0.074853051 1.00000000 -0.07572091 0.058381535 # Lag3 -0.03000649 0.058635682 -0.07572091 1.00000000 -0.075395865 # Lag4 -0.03112792 -0.071273876 0.05838153 -0.07539587 1.000000000 # Lag5 -0.03051910 -0.008183096 -0.07249948 0.06065717 -0.075675027 # Volume 0.84194162 -0.064951313 -0.08551314 -0.06928771 -0.061074617 # Today -0.03245989 -0.075031842 0.05916672 -0.07124364 -0.007825873 # Lag5 Volume Today # Year -0.030519101 0.84194162 -0.032459894 # Lag1 -0.008183096 -0.06495131 -0.075031842 # Lag2 -0.072499482 -0.08551314 0.059166717 # Lag3 0.060657175 -0.06928771 -0.071243639 # Lag4 -0.075675027 -0.06107462 -0.007825873 # Lag5 1.000000000 -0.05851741 0.011012698 # Volume -0.058517414 1.00000000 -0.033077783 # Today 0.011012698 -0.03307778 1.000000000 Useful though this is, it is kind of difficult to work with, in this form, so we might as well programmatic-ally remove strongly correlated data instead.\n# Uses caret corrCols=weeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% cor %\u0026gt;% findCorrelation(cutoff=0.8) reducedDat\u0026lt;-weeklyDat[-c(corrCols)] reducedDat %\u0026gt;% summary # Year Lag1 Lag2 Lag3 # Min. :1990 Min. :-18.1950 Min. :-18.1950 Min. :-18.1950 # 1st Qu.:1995 1st Qu.: -1.1540 1st Qu.: -1.1540 1st Qu.: -1.1580 # Median :2000 Median : 0.2410 Median : 0.2410 Median : 0.2410 # Mean :2000 Mean : 0.1506 Mean : 0.1511 Mean : 0.1472 # 3rd Qu.:2005 3rd Qu.: 1.4050 3rd Qu.: 1.4090 3rd Qu.: 1.4090 # Max. :2010 Max. : 12.0260 Max. : 12.0260 Max. : 12.0260 # Lag4 Lag5 Today Direction # Min. :-18.1950 Min. :-18.1950 Min. :-18.1950 Down:484 # 1st Qu.: -1.1580 1st Qu.: -1.1660 1st Qu.: -1.1540 Up :605 # Median : 0.2380 Median : 0.2340 Median : 0.2410 # Mean : 0.1458 Mean : 0.1399 Mean : 0.1499 # 3rd Qu.: 1.4090 3rd Qu.: 1.4050 3rd Qu.: 1.4050 # Max. : 12.0260 Max. : 12.0260 Max. : 12.0260 We can see that the Volume variable has been dropped, since it evidently is strongly correlated with Year. This may or may not be a useful insight, but it is good to keep in mind.\nVisualization We will be using the ggplot2 library throughout for this segment.\nLets start with some scatter plots in a one v/s all scheme, similar to the methodology described here.\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% gather(-Year,key=\u0026#34;Variable\u0026#34;, value=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=Value,y=Year)) + geom_point() + facet_wrap(~Variable) + coord_flip()   Figure 1: One v/s all for Direction\n  That didn\u0026rsquo;t really tell us much which we didn\u0026rsquo;t already get from the cor() function, but we can go the whole hog and do this for every variable since we don\u0026rsquo;t have that many in the first place..\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% pairs   Figure 2: Pairs\n  This is not especially useful, and it is doubtful if more scatter-plots will help at all, so lets move on to box plots.\nweeklyDat %\u0026gt;% pivot_longer(-c(Direction,Volume,Today,Year),names_to=\u0026#34;Lag\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=Direction,y=Value,fill=Lag)) + geom_boxplot()   Figure 3: Box plots for Direction\n  weeklyDat %\u0026gt;% pivot_longer(-c(Direction,Volume,Today,Year),names_to=\u0026#34;Lag\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=Today,y=Value,fill=Lag)) + geom_boxplot()   Figure 4: More box plots\n  weeklyDat %\u0026gt;% pivot_longer(-c(Direction,Volume,Today,Year),names_to=\u0026#34;Lag\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=Lag,y=Value,fill=Direction)) + geom_boxplot()   Figure 5: Lag v/s all\n  This does summarize our text analysis quite well. Importantly, it tells us that the Today value is largely unrelated to the \\(4\\) Lag variables.\nA really good-looking box-plot is easy to get with the caret library:\nweeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% featurePlot( y = weeklyDat$Direction, plot = \u0026#34;box\u0026#34;, # Pass in options to bwplot() scales = list(y = list(relation=\u0026#34;free\u0026#34;), x = list(rot = 90)), auto.key = list(columns = 2))   Figure 6: Plots with caret\n  We might want to visualize our correlation matrix as well.\nlibrary(reshape2) # # Attaching package: \u0026#39;reshape2\u0026#39; # The following object is masked from \u0026#39;package:tidyr\u0026#39;: # # smiths weeklyDat %\u0026gt;% subset(select=-c(Direction)) %\u0026gt;% cor %\u0026gt;% melt %\u0026gt;% ggplot(aes(x=Var1,y=Var2,fill=value)) + geom_tile()   Figure 7: Heatmap of the correlation matrix\n  b) Logistic Regression - Predictor Significance Lets start with the native glm function.\nglm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=weeklyDat, family=binomial) summary(glm.fit) # # Call: # glm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + # Volume, family = binomial, data = weeklyDat) # # Deviance Residuals: # Min 1Q Median 3Q Max # -1.6949 -1.2565 0.9913 1.0849 1.4579 # # Coefficients: # Estimate Std. Error z value Pr(\u0026gt;|z|) # (Intercept) 0.26686 0.08593 3.106 0.0019 ** # Lag1 -0.04127 0.02641 -1.563 0.1181 # Lag2 0.05844 0.02686 2.175 0.0296 * # Lag3 -0.01606 0.02666 -0.602 0.5469 # Lag4 -0.02779 0.02646 -1.050 0.2937 # Lag5 -0.01447 0.02638 -0.549 0.5833 # Volume -0.02274 0.03690 -0.616 0.5377 # --- # Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 # # (Dispersion parameter for binomial family taken to be 1) # # Null deviance: 1496.2 on 1088 degrees of freedom # Residual deviance: 1486.4 on 1082 degrees of freedom # AIC: 1500.4 # # Number of Fisher Scoring iterations: 4 Evidently, only the Lag2 value is of statistical significance.\nIt is always of importance to figure out what numeric values R will assign to our factors, and it is best not to guess.\ncontrasts(weeklyDat$Direction) # Up # Down 0 # Up 1 c) Confusion Matrix and Metrics Essentially:\n Predict the response Create an output length vector Apply thresholding to obtain labels   glm.probs = predict(glm.fit, type = \u0026#34;response\u0026#34;) glm.pred = rep(\u0026#34;Up\u0026#34;,length(glm.probs)) glm.pred[glm.probs\u0026lt;0.5]=\u0026#34;Down\u0026#34; glm.pred=factor(glm.pred) confusionMatrix(glm.pred,weeklyDat$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 54 48 # Up 430 557 # # Accuracy : 0.5611 # 95% CI : (0.531, 0.5908) # No Information Rate : 0.5556 # P-Value [Acc \u0026gt; NIR] : 0.369 # # Kappa : 0.035 # # Mcnemar\u0026#39;s Test P-Value : \u0026lt;2e-16 # # Sensitivity : 0.11157 # Specificity : 0.92066 # Pos Pred Value : 0.52941 # Neg Pred Value : 0.56434 # Prevalence : 0.44444 # Detection Rate : 0.04959 # Detection Prevalence : 0.09366 # Balanced Accuracy : 0.51612 # # \u0026#39;Positive\u0026#39; Class : Down #  We have used the confusionMatrix function from caret (documented here) instead of displaying the results with table and then calculating precision, recall and the rest by hand.  d) Train Test Splits Although we could have used the indices and passed it to glm as the subset attribute, it is cleaner to just make subsets instead.\nweeklyVal\u0026lt;-weeklyDat %\u0026gt;% filter(Year\u0026gt;=2009) weeklyTrain\u0026lt;-weeklyDat %\u0026gt;% filter(Year\u0026lt;2009) Now we can train a model on our training data.\nglm.fit=glm(Direction~Lag2,data=weeklyTrain,family=binomial) summary(glm.fit) # # Call: # glm(formula = Direction ~ Lag2, family = binomial, data = weeklyTrain) # # Deviance Residuals: # Min 1Q Median 3Q Max # -1.536 -1.264 1.021 1.091 1.368 # # Coefficients: # Estimate Std. Error z value Pr(\u0026gt;|z|) # (Intercept) 0.20326 0.06428 3.162 0.00157 ** # Lag2 0.05810 0.02870 2.024 0.04298 * # --- # Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 # # (Dispersion parameter for binomial family taken to be 1) # # Null deviance: 1354.7 on 984 degrees of freedom # Residual deviance: 1350.5 on 983 degrees of freedom # AIC: 1354.5 # # Number of Fisher Scoring iterations: 4 Having fit our model, we will test the predictions on our held out data.\nglm.probs = predict(glm.fit,weeklyVal, type = \u0026#34;response\u0026#34;) glm.pred = rep(\u0026#34;Up\u0026#34;,length(glm.probs)) glm.pred[glm.probs\u0026lt;0.5]=\u0026#34;Down\u0026#34; glm.pred=factor(glm.pred) confusionMatrix(glm.pred,weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 9 5 # Up 34 56 # # Accuracy : 0.625 # 95% CI : (0.5247, 0.718) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.2439 # # Kappa : 0.1414 # # Mcnemar\u0026#39;s Test P-Value : 7.34e-06 # # Sensitivity : 0.20930 # Specificity : 0.91803 # Pos Pred Value : 0.64286 # Neg Pred Value : 0.62222 # Prevalence : 0.41346 # Detection Rate : 0.08654 # Detection Prevalence : 0.13462 # Balanced Accuracy : 0.56367 # # \u0026#39;Positive\u0026#39; Class : Down # We really aren\u0026rsquo;t doing very well with this single variable model as is evident.\ne) LDA models At this stage we could use MASS to get the lda function, but it would be better to just switch to using caret. Note that the caret prediction is a label by default, so thresholding needs to be specified differently if required.\nlda.fit=train(Direction~Lag2,data=weeklyTrain,method=\u0026#34;lda\u0026#34;) summary(lda.fit) # Length Class Mode # prior 2 -none- numeric # counts 2 -none- numeric # means 2 -none- numeric # scaling 1 -none- numeric # lev 2 -none- character # svd 1 -none- numeric # N 1 -none- numeric # call 3 -none- call # xNames 1 -none- character # problemType 1 -none- character # tuneValue 1 data.frame list # obsLevels 2 -none- character # param 0 -none- list predict(lda.fit,weeklyVal) %\u0026gt;% confusionMatrix(weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 9 5 # Up 34 56 # # Accuracy : 0.625 # 95% CI : (0.5247, 0.718) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.2439 # # Kappa : 0.1414 # # Mcnemar\u0026#39;s Test P-Value : 7.34e-06 # # Sensitivity : 0.20930 # Specificity : 0.91803 # Pos Pred Value : 0.64286 # Neg Pred Value : 0.62222 # Prevalence : 0.41346 # Detection Rate : 0.08654 # Detection Prevalence : 0.13462 # Balanced Accuracy : 0.56367 # # \u0026#39;Positive\u0026#39; Class : Down # f) QDA models qda.fit=train(Direction~Lag2,data=weeklyTrain,method=\u0026#34;qda\u0026#34;) summary(qda.fit) # Length Class Mode # prior 2 -none- numeric # counts 2 -none- numeric # means 2 -none- numeric # scaling 2 -none- numeric # ldet 2 -none- numeric # lev 2 -none- character # N 1 -none- numeric # call 3 -none- call # xNames 1 -none- character # problemType 1 -none- character # tuneValue 1 data.frame list # obsLevels 2 -none- character # param 0 -none- list predict(qda.fit,weeklyVal) %\u0026gt;% confusionMatrix(weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 0 0 # Up 43 61 # # Accuracy : 0.5865 # 95% CI : (0.4858, 0.6823) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.5419 # # Kappa : 0 # # Mcnemar\u0026#39;s Test P-Value : 1.504e-10 # # Sensitivity : 0.0000 # Specificity : 1.0000 # Pos Pred Value : NaN # Neg Pred Value : 0.5865 # Prevalence : 0.4135 # Detection Rate : 0.0000 # Detection Prevalence : 0.0000 # Balanced Accuracy : 0.5000 # # \u0026#39;Positive\u0026#39; Class : Down # This is quite possibly the worst of the lot. As is evident, the model just predicts Up no matter what.\ng) KNN caret tends to over-zealously retrain models and find the best possible parameters. In this case that is annoying and redundant so we will use the class library. We should really scale our data before using KNN though.\nlibrary(class) set.seed(1) knn.pred=knn(as.matrix(weeklyTrain$Lag2),as.matrix(weeklyVal$Lag2),weeklyTrain$Direction,k=1) confusionMatrix(knn.pred,weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 21 30 # Up 22 31 # # Accuracy : 0.5 # 95% CI : (0.4003, 0.5997) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.9700 # # Kappa : -0.0033 # # Mcnemar\u0026#39;s Test P-Value : 0.3317 # # Sensitivity : 0.4884 # Specificity : 0.5082 # Pos Pred Value : 0.4118 # Neg Pred Value : 0.5849 # Prevalence : 0.4135 # Detection Rate : 0.2019 # Detection Prevalence : 0.4904 # Balanced Accuracy : 0.4983 # # \u0026#39;Positive\u0026#39; Class : Down # Clearly this model is not doing very well.\nh) Model Selection We will first get the ROC curves.\nlibrary(pROC) # Type \u0026#39;citation(\u0026#34;pROC\u0026#34;)\u0026#39; for a citation. # # Attaching package: \u0026#39;pROC\u0026#39; # The following objects are masked from \u0026#39;package:stats\u0026#39;: # # cov, smooth, var knnROC\u0026lt;-roc(predictor=as.numeric(knn.pred),response=weeklyVal$Direction,levels=rev(levels(weeklyVal$Direction))) # Setting direction: controls \u0026lt; cases logiROC\u0026lt;-roc(predictor=as.numeric(predict(glm.fit,weeklyVal)),response=weeklyVal$Direction) # Setting levels: control = Down, case = Up # Setting direction: controls \u0026gt; cases ldaROC\u0026lt;-roc(predictor=as.numeric(predict(lda.fit,weeklyVal)),response=weeklyVal$Direction) # Setting levels: control = Down, case = Up # Setting direction: controls \u0026lt; cases qdaROC\u0026lt;-roc(predictor=as.numeric(predict(qda.fit,weeklyVal)),response=weeklyVal$Direction) # Setting levels: control = Down, case = Up # Setting direction: controls \u0026lt; cases Now to plot them.\nggroc(list(KNN=knnROC,Logistic=logiROC,LDA=ldaROC,QDA=qdaROC))   Figure 8: ROC curves for Weekly data\n  To compare models with caret it is easy to refit the logistic and knn models in the caret formulation.\nknnCaret=train(Direction~Lag2,data=weeklyTrain,method=\u0026#34;knn\u0026#34;) However, the KNN model is the best parameter model.\nresmod \u0026lt;- resamples(list(lda=lda.fit, qda=qda.fit, KNN=knnCaret)) summary(resmod) # # Call: # summary.resamples(object = resmod) # # Models: lda, qda, KNN # Number of resamples: 25 # # Accuracy # Min. 1st Qu. Median Mean 3rd Qu. Max. NA\u0026#39;s # lda 0.5043228 0.5344353 0.5529101 0.5500861 0.5683060 0.5846995 0 # qda 0.5044248 0.5204360 0.5307263 0.5326785 0.5462428 0.5777778 0 # KNN 0.4472222 0.5082873 0.5240642 0.5168327 0.5302198 0.5485714 0 # # Kappa # Min. 1st Qu. Median Mean 3rd Qu. Max. # lda -0.02618939 -0.003638168 0.005796908 0.007801904 0.01635328 0.05431238 # qda -0.06383592 -0.005606123 0.000000000 -0.003229697 0.00000000 0.03606344 # KNN -0.11297539 0.004168597 0.024774647 0.016171229 0.04456142 0.07724439 # NA\u0026#39;s # lda 0 # qda 0 # KNN 0 bwplot(resmod)   Figure 9: Caret plots for comparison\n  dotplot(resmod)   Kappa or Cohen\u0026rsquo;s Kappa is essentially classification accuracy, normalized at the baseline of random chance. It is a more useful measure to use on problems that have imbalanced classes. There\u0026rsquo;s more on model selection here.\ni) Further Tuning Do note the caret defaults.\nfitControl \u0026lt;- trainControl(# 10-fold CV method = \u0026#34;repeatedcv\u0026#34;, number = 10, # repeated ten times repeats = 10) Logistic glm2.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=weeklyDat, family=binomial) glm2.probs = predict(glm2.fit,weeklyVal, type = \u0026#34;response\u0026#34;) glm2.pred = rep(\u0026#34;Up\u0026#34;,length(glm2.probs)) glm2.pred[glm2.probs\u0026lt;0.5]=\u0026#34;Down\u0026#34; glm2.pred=factor(glm2.pred) confusionMatrix(glm2.pred,weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 17 13 # Up 26 48 # # Accuracy : 0.625 # 95% CI : (0.5247, 0.718) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.24395 # # Kappa : 0.1907 # # Mcnemar\u0026#39;s Test P-Value : 0.05466 # # Sensitivity : 0.3953 # Specificity : 0.7869 # Pos Pred Value : 0.5667 # Neg Pred Value : 0.6486 # Prevalence : 0.4135 # Detection Rate : 0.1635 # Detection Prevalence : 0.2885 # Balanced Accuracy : 0.5911 # # \u0026#39;Positive\u0026#39; Class : Down # QDA qdaCaret=train(Direction~Lag2+Lag4,data=weeklyTrain,method=\u0026#34;qda\u0026#34;,trainControl=fitControl) summary(qdaCaret) # Length Class Mode # prior 2 -none- numeric # counts 2 -none- numeric # means 4 -none- numeric # scaling 8 -none- numeric # ldet 2 -none- numeric # lev 2 -none- character # N 1 -none- numeric # call 4 -none- call # xNames 2 -none- character # problemType 1 -none- character # tuneValue 1 data.frame list # obsLevels 2 -none- character # param 1 -none- list predict(qdaCaret,weeklyVal) %\u0026gt;% confusionMatrix(weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 9 14 # Up 34 47 # # Accuracy : 0.5385 # 95% CI : (0.438, 0.6367) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.863079 # # Kappa : -0.0217 # # Mcnemar\u0026#39;s Test P-Value : 0.006099 # # Sensitivity : 0.20930 # Specificity : 0.77049 # Pos Pred Value : 0.39130 # Neg Pred Value : 0.58025 # Prevalence : 0.41346 # Detection Rate : 0.08654 # Detection Prevalence : 0.22115 # Balanced Accuracy : 0.48990 # # \u0026#39;Positive\u0026#39; Class : Down # LDA ldaCaret=train(Direction~Lag2+Lag1+Year,data=weeklyTrain,method=\u0026#34;lda\u0026#34;,trainControl=fitControl) summary(ldaCaret) # Length Class Mode # prior 2 -none- numeric # counts 2 -none- numeric # means 6 -none- numeric # scaling 3 -none- numeric # lev 2 -none- character # svd 1 -none- numeric # N 1 -none- numeric # call 4 -none- call # xNames 3 -none- character # problemType 1 -none- character # tuneValue 1 data.frame list # obsLevels 2 -none- character # param 1 -none- list predict(ldaCaret,weeklyVal) %\u0026gt;% confusionMatrix(weeklyVal$Direction) # Confusion Matrix and Statistics # # Reference # Prediction Down Up # Down 20 19 # Up 23 42 # # Accuracy : 0.5962 # 95% CI : (0.4954, 0.6913) # No Information Rate : 0.5865 # P-Value [Acc \u0026gt; NIR] : 0.4626 # # Kappa : 0.1558 # # Mcnemar\u0026#39;s Test P-Value : 0.6434 # # Sensitivity : 0.4651 # Specificity : 0.6885 # Pos Pred Value : 0.5128 # Neg Pred Value : 0.6462 # Prevalence : 0.4135 # Detection Rate : 0.1923 # Detection Prevalence : 0.3750 # Balanced Accuracy : 0.5768 # # \u0026#39;Positive\u0026#39; Class : Down # KNN Honestly, again, this should be scaled. Plot KNN with the best parameters.\nplot(knnCaret)   Figure 10: KNN statistics\n  Evidently, the accuracy increases with an increase in the number of neighbors considered.\nplot(knnCaret, print.thres = 0.5, type=\u0026#34;S\u0026#34;)   Figure 11: Visualizing thresholds for KNN\n  However this shows that we don\u0026rsquo;t actually get much of an increase in accuracy anyway.\nQuestion 4.11 - Pages 171-172 In this problem, you will develop a model to predict whether a given car gets high or low gas mileage based on the Auto data set.\n(a) Create a binary variable, mpg01 , that contains a 1 if mpg contains a value above its median, and a 0 if mpg contains a value below its median. You can compute the median using the median() function. Note you may find it helpful to use the data.frame() function to create a single data set containing both mpg01 and the other Auto variables.\n(b) Explore the data graphically in order to investigate the association between mpg01 and the other features. Which of the other features seem most likely to be useful in predicting mpg01 ? Scatter-plots and boxplots may be useful tools to answer this question. Describe your findings.\n(c) Split the data into a training set and a test set.\n(d) Perform LDA on the training data in order to predict mpg01 using the variables that seemed most associated with mpg01 in (b). What is the test error of the model obtained?\n(e) Perform QDA on the training data in order to predict mpg01 using the variables that seemed most associated with mpg01 in (b). What is the test error of the model obtained?\n(f) Perform logistic regression on the training data in order to predict mpg01 using the variables that seemed most associated with mpg01 in (b). What is the test error of the model obtained?\n(g) Perform KNN on the training data, with several values of \\(K\\), in order to predict mpg01 . Use only the variables that seemed most associated with mpg01 in (b). What test errors do you obtain? Which value of \\(K\\) seems to perform the best on this data set?\nAnswer autoDat\u0026lt;-ISLR::Auto a) Binary Variable autoDat$mpg %\u0026gt;% sort() %\u0026gt;% median() # [1] 22.75 Now we can get a new variable from that.\nnewDat=autoDat newDat$mpg01 \u0026lt;- ifelse(autoDat$mpg\u0026lt;autoDat$mpg %\u0026gt;% sort() %\u0026gt;% median(),0,1) %\u0026gt;% factor() Note that the ifelse command takes a truthy function, value when false, value when true, but does not return a factor automatically so we piped it to factor to ensure it is factorial.\nb) Visual Exploration Some box-plots:\nnewDat %\u0026gt;% pivot_longer(-c(mpg01,name),names_to=\u0026#34;Params\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=mpg01,y=Value)) + geom_boxplot() + facet_wrap(~ Params, scales = \u0026#34;free_y\u0026#34;)   Figure 12: Box plots\n  With some scatter plots as well:\nnewDat %\u0026gt;% pivot_longer(-c(mpg01,name,weight),names_to=\u0026#34;Params\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=weight,y=Value,color=mpg01)) + geom_point() + facet_wrap(~ Params, scales = \u0026#34;free_y\u0026#34;)   Figure 13: Scatter plots\n  Clearly, origin, year and cylinder are essentially not very relevant numerically for the regression lines and confidence intervals.\nnewDat %\u0026gt;% select(-year,-origin,-cylinders) %\u0026gt;% pivot_longer(-c(mpg01,name,mpg),names_to=\u0026#34;Params\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=mpg,y=Value,color=mpg01)) + geom_point() + geom_smooth(method=lm) + facet_wrap(~ Params, scales = \u0026#34;free_y\u0026#34;)   c) Train-Test Split We can split our data very easily with caret. It is important to remember that for factors, random sampling occurs within each class to preserve the overall class distribution of the data.\nset.seed(1984) trainInd \u0026lt;- createDataPartition(newDat$mpg01, # Factor, so class sampling p=0.7, # 70-30 train-test list=FALSE, # No lists times=1) # No bootstrap autoTrain\u0026lt;-newDat[trainInd,] autoTest\u0026lt;-newDat[-trainInd,] d) LDA with Significant Variables Whenever I see significant I think correlation, so let\u0026rsquo;s take a look at that.\nnewDat %\u0026gt;% select(-mpg01,-name) %\u0026gt;% cor # mpg cylinders displacement horsepower weight # mpg 1.0000000 -0.7776175 -0.8051269 -0.7784268 -0.8322442 # cylinders -0.7776175 1.0000000 0.9508233 0.8429834 0.8975273 # displacement -0.8051269 0.9508233 1.0000000 0.8972570 0.9329944 # horsepower -0.7784268 0.8429834 0.8972570 1.0000000 0.8645377 # weight -0.8322442 0.8975273 0.9329944 0.8645377 1.0000000 # acceleration 0.4233285 -0.5046834 -0.5438005 -0.6891955 -0.4168392 # year 0.5805410 -0.3456474 -0.3698552 -0.4163615 -0.3091199 # origin 0.5652088 -0.5689316 -0.6145351 -0.4551715 -0.5850054 # acceleration year origin # mpg 0.4233285 0.5805410 0.5652088 # cylinders -0.5046834 -0.3456474 -0.5689316 # displacement -0.5438005 -0.3698552 -0.6145351 # horsepower -0.6891955 -0.4163615 -0.4551715 # weight -0.4168392 -0.3091199 -0.5850054 # acceleration 1.0000000 0.2903161 0.2127458 # year 0.2903161 1.0000000 0.1815277 # origin 0.2127458 0.1815277 1.0000000 newDat %\u0026gt;% length # [1] 10 Now lets quickly see what it looks like with correlated values removed.\ncorrCols2=newDat %\u0026gt;% select(-mpg01,-name) %\u0026gt;% cor %\u0026gt;% findCorrelation(cutoff=0.85) newRed\u0026lt;-newDat[-c(corrCols2)] newRed %\u0026gt;% summary # mpg weight acceleration year origin # Min. : 9.00 Min. :1613 Min. : 8.00 Min. :70.00 Min. :1.000 # 1st Qu.:17.00 1st Qu.:2225 1st Qu.:13.78 1st Qu.:73.00 1st Qu.:1.000 # Median :22.75 Median :2804 Median :15.50 Median :76.00 Median :1.000 # Mean :23.45 Mean :2978 Mean :15.54 Mean :75.98 Mean :1.577 # 3rd Qu.:29.00 3rd Qu.:3615 3rd Qu.:17.02 3rd Qu.:79.00 3rd Qu.:2.000 # Max. :46.60 Max. :5140 Max. :24.80 Max. :82.00 Max. :3.000 # # name mpg01 # amc matador : 5 0:196 # ford pinto : 5 1:196 # toyota corolla : 5 # amc gremlin : 4 # amc hornet : 4 # chevrolet chevette: 4 # (Other) :365 Inherent in this discussion is the fact that I consider what is correlated to mpg to be a good indicator of what will help mpg01 for obvious reasons.\nNow we can just use the columns we found with findCorrelation.\ncorrCols2 %\u0026gt;% print # [1] 3 4 2 names(newDat) # [1] \u0026#34;mpg\u0026#34; \u0026#34;cylinders\u0026#34; \u0026#34;displacement\u0026#34; \u0026#34;horsepower\u0026#34; \u0026#34;weight\u0026#34; # [6] \u0026#34;acceleration\u0026#34; \u0026#34;year\u0026#34; \u0026#34;origin\u0026#34; \u0026#34;name\u0026#34; \u0026#34;mpg01\u0026#34; autoLDA=train(mpg01~cylinders+displacement+horsepower,data=autoTrain,method=\u0026#34;lda\u0026#34;) valScoreLDA=predict(autoLDA,autoTest) Now we can check the statistics.\nconfusionMatrix(valScoreLDA,autoTest$mpg01) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 56 2 # 1 2 56 # # Accuracy : 0.9655 # 95% CI : (0.9141, 0.9905) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.931 # # Mcnemar\u0026#39;s Test P-Value : 1 # # Sensitivity : 0.9655 # Specificity : 0.9655 # Pos Pred Value : 0.9655 # Neg Pred Value : 0.9655 # Prevalence : 0.5000 # Detection Rate : 0.4828 # Detection Prevalence : 0.5000 # Balanced Accuracy : 0.9655 # # \u0026#39;Positive\u0026#39; Class : 0 # That is an amazingly accurate model.\nauto_ldaROC\u0026lt;-roc(predictor=as.numeric(valScoreLDA),response=autoTest$mpg01,levels=levels(autoTest$mpg01)) # Setting direction: controls \u0026lt; cases ggroc(auto_ldaROC)   e) QDA with Significant Variables Same deal as before.\nautoQDA=train(mpg01~cylinders+displacement+horsepower,data=autoTrain,method=\u0026#34;qda\u0026#34;) valScoreQDA=predict(autoQDA,autoTest) Now we can check the statistics.\nconfusionMatrix(valScoreQDA,autoTest$mpg01) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 56 2 # 1 2 56 # # Accuracy : 0.9655 # 95% CI : (0.9141, 0.9905) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.931 # # Mcnemar\u0026#39;s Test P-Value : 1 # # Sensitivity : 0.9655 # Specificity : 0.9655 # Pos Pred Value : 0.9655 # Neg Pred Value : 0.9655 # Prevalence : 0.5000 # Detection Rate : 0.4828 # Detection Prevalence : 0.5000 # Balanced Accuracy : 0.9655 # # \u0026#39;Positive\u0026#39; Class : 0 # auto_qdaROC\u0026lt;-roc(predictor=as.numeric(valScoreQDA),response=autoTest$mpg01,levels=levels(autoTest$mpg01)) # Setting direction: controls \u0026lt; cases ggroc(auto_qdaROC)   OK, this is weird enough to check if it isn\u0026rsquo;t some sort of artifact.\nautoQDA2=train(mpg01~horsepower, data=autoTrain,method=\u0026#39;qda\u0026#39;) valScoreQDA2=predict(autoQDA2, autoTest) confusionMatrix(valScoreQDA2,autoTest$mpg01) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 42 3 # 1 16 55 # # Accuracy : 0.8362 # 95% CI : (0.7561, 0.8984) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : 4.315e-14 # # Kappa : 0.6724 # # Mcnemar\u0026#39;s Test P-Value : 0.005905 # # Sensitivity : 0.7241 # Specificity : 0.9483 # Pos Pred Value : 0.9333 # Neg Pred Value : 0.7746 # Prevalence : 0.5000 # Detection Rate : 0.3621 # Detection Prevalence : 0.3879 # Balanced Accuracy : 0.8362 # # \u0026#39;Positive\u0026#39; Class : 0 # OK, so the model isn\u0026rsquo;t completely creepily correct all the time. In this case we should probably think about what is going on. I would think it is because of the nature of the train-test split we performed. We have ensured during the sampling of our data that the train and test sets contain the SAME distribution (assumed). So that\u0026rsquo;s why our training result and test results are both incredibly good. They\u0026rsquo;re essentially the same thing.\nIn fact, this is the perfect time to consider a validation set, just to see what the models are really doing. Won\u0026rsquo;t get into it right now though.\nf) Logistic with Significant Variables glmAuto.fit=glm(mpg01~cylinders+displacement+horsepower, data=autoTrain, family=binomial) glmAuto.probs = predict(glmAuto.fit,autoTest, type = \u0026#34;response\u0026#34;) glmAuto.pred = rep(1,length(glmAuto.probs)) glmAuto.pred[glmAuto.probs\u0026lt;0.5]=0 glmAuto.pred=factor(glmAuto.pred) confusionMatrix(glmAuto.pred,autoTest$mpg01) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 56 4 # 1 2 54 # # Accuracy : 0.9483 # 95% CI : (0.8908, 0.9808) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.8966 # # Mcnemar\u0026#39;s Test P-Value : 0.6831 # # Sensitivity : 0.9655 # Specificity : 0.9310 # Pos Pred Value : 0.9333 # Neg Pred Value : 0.9643 # Prevalence : 0.5000 # Detection Rate : 0.4828 # Detection Prevalence : 0.5172 # Balanced Accuracy : 0.9483 # # \u0026#39;Positive\u0026#39; Class : 0 # g) KNN Modeling Scale the parameters later.\nknnAuto=train(mpg01~cylinders+displacement+horsepower,data=autoTrain,method=\u0026#34;knn\u0026#34;) Plot KNN with the best parameters.\nplot(knnCaret)   Evidently, the accuracy increases with an increase in the number of neighbors considered.\nplot(knnAuto, print.thres = 0.5, type=\u0026#34;S\u0026#34;)   So we can see that \\(5\\) neighbors is a good compromise.\nQuestion 4.12 - Pages 172-173 This problem involves writing functions.\n(a) Write a function, Power() , that prints out the result of raising 2 to the 3rd power. In other words, your function should compute 2^3 and print out the results.\nHint: Recall that x^a raises x to the power a. Use the print() function to output the result.\n(b) Create a new function, Power2() , that allows you to pass any two numbers, x and a , and prints out the value of x^a . You can do this by beginning your function with the line\nPower2=function(x,a){} You should be able to call your function by entering, for instance,\nPower2(3,8) on the command line. This should output the value of \\(3^8\\), namely, \\(6,651\\).\n(c) Using the Power2() function that you just wrote, compute \\(10^3\\), \\(8^{17}\\), and \\(131^3\\).\n(d) Now create a new function, Power3(), that actually returns the result x^a as an R object, rather than simply printing it to the screen. That is, if you store the value x^a in an object called result within your function, then you can simply return() this result, using the following line:\nreturn(result) The line above should be the last line in your function, before the } symbol.\n(e) Now using the Power3() function, create a plot of \\(f(x)=x^2\\). The x-axis should display a range of integers from \\(1\\) to \\(10\\), and the y-axis should display \\(x^2\\) . Label the axes appropriately, and use an appropriate title for the figure. Consider displaying either the x-axis, the y-axis, or both on the log-scale. You can do this by using log=ââxââ, log=ââyââ, or log=ââxyââ as arguments to the plot() function.\n(f) Create a function, PlotPower() , that allows you to create a plot of x against x^a for a fixed a and for a range of values of x. For instance, if you call\nPlotPower (1:10 ,3) then a plot should be created with an x-axis taking on values \\(1,2,\u0026hellip;,10\\) and a y-axis taking on values \\(1^3,2^3,\u0026hellip;,10^3\\)\nAnswer a) Create a Squaring Function Power=function(x){print(2^x)} Power(3) # [1] 8 b) Generalizing Power to arbitrary numbers Power2=function(x,a){print(x^a)} Power2(3,8) # [1] 6561 c) Random Testing of Power2 Power2(10,3) # [1] 1000 Power2(8,17) # [1] 2.2518e+15 Power2(131,2) # [1] 17161 d) Return a value Power3=function(x,a){return(x^a)} e) Plot something with Power3 Actually now would be a good place to introduce LaTeX labeling.\n#install.packages(\u0026#34;latex2exp\u0026#34;) library(latex2exp) No log scale.\nqplot(x=seq(1,10),y=Power3(seq(1,10),2)) + ggtitle(\u0026#34;Function without a log scale\u0026#34;) + geom_point() + xlab(\u0026#34;X\u0026#34;) + ylab(TeX(\u0026#34;$X^2$\u0026#34;))   With a log scale.\nqplot(x=seq(1,10),y=Power3(seq(1,10),2)) + ggtitle(\u0026#34;Function with a log scale\u0026#34;) + geom_point() + xlab(\u0026#34;X\u0026#34;) + ylab(TeX(\u0026#34;$X^2$\u0026#34;)) + scale_y_log10()   f) PlotPower Function PlotPower=function(xrange,pow){return(qplot(x=xrange,y=Power3(xrange,pow)))} plotter\u0026lt;-PlotPower(1:10,3) plotter   The R Cookbook is quite neat for some simple tasks like this.\nQuestion 4.13 - Pages 173 Using the Boston data set, fit classification models in order to predict whether a given suburb has a crime rate above or below the median. Explore logistic regression, LDA, and KNN models using various subsets of the predictors. Describe your findings.\nAnswer OK, to speed this up, I will simply run through all the work done on the Auto set. Recall that details about this data-set are also here.\nboston\u0026lt;-MASS::Boston  Check unique values   boston %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) # crim zn indus chas nox rm age dis rad tax # 504 26 76 2 81 446 356 412 9 66 # ptratio black lstat medv # 46 357 455 229 CHAS is of course something which should be a factor, and with RAD having only \\(9\\) levels, I\u0026rsquo;m inclined to make it a factor as well.\nboston\u0026lt;-boston %\u0026gt;% mutate(rad=factor(rad),chas=factor(chas))  Make a median variable   boston$highCrime\u0026lt;- ifelse(boston$crim\u0026lt;boston$crim %\u0026gt;% median(),0,1) %\u0026gt;% factor()  Take a look at the data  Some box-plots:\nboston %\u0026gt;% pivot_longer(-c(rad,chas,highCrime),names_to=\u0026#34;Param\u0026#34;,values_to=\u0026#34;Value\u0026#34;) %\u0026gt;% ggplot(aes(x=highCrime,y=Value,fill=chas)) + geom_boxplot()+ facet_wrap(~Param,scales=\u0026#34;free_y\u0026#34;)   It is surprising, but evidently the CHAS variable is strangely relevant. 1 implies the tract bounds the river, otherwise 0.\n Correlations   boston %\u0026gt;% select(-c(rad,chas,highCrime)) %\u0026gt;% cor # crim zn indus nox rm age # crim 1.0000000 -0.2004692 0.4065834 0.4209717 -0.2192467 0.3527343 # zn -0.2004692 1.0000000 -0.5338282 -0.5166037 0.3119906 -0.5695373 # indus 0.4065834 -0.5338282 1.0000000 0.7636514 -0.3916759 0.6447785 # nox 0.4209717 -0.5166037 0.7636514 1.0000000 -0.3021882 0.7314701 # rm -0.2192467 0.3119906 -0.3916759 -0.3021882 1.0000000 -0.2402649 # age 0.3527343 -0.5695373 0.6447785 0.7314701 -0.2402649 1.0000000 # dis -0.3796701 0.6644082 -0.7080270 -0.7692301 0.2052462 -0.7478805 # tax 0.5827643 -0.3145633 0.7207602 0.6680232 -0.2920478 0.5064556 # ptratio 0.2899456 -0.3916785 0.3832476 0.1889327 -0.3555015 0.2615150 # black -0.3850639 0.1755203 -0.3569765 -0.3800506 0.1280686 -0.2735340 # lstat 0.4556215 -0.4129946 0.6037997 0.5908789 -0.6138083 0.6023385 # medv -0.3883046 0.3604453 -0.4837252 -0.4273208 0.6953599 -0.3769546 # dis tax ptratio black lstat medv # crim -0.3796701 0.5827643 0.2899456 -0.3850639 0.4556215 -0.3883046 # zn 0.6644082 -0.3145633 -0.3916785 0.1755203 -0.4129946 0.3604453 # indus -0.7080270 0.7207602 0.3832476 -0.3569765 0.6037997 -0.4837252 # nox -0.7692301 0.6680232 0.1889327 -0.3800506 0.5908789 -0.4273208 # rm 0.2052462 -0.2920478 -0.3555015 0.1280686 -0.6138083 0.6953599 # age -0.7478805 0.5064556 0.2615150 -0.2735340 0.6023385 -0.3769546 # dis 1.0000000 -0.5344316 -0.2324705 0.2915117 -0.4969958 0.2499287 # tax -0.5344316 1.0000000 0.4608530 -0.4418080 0.5439934 -0.4685359 # ptratio -0.2324705 0.4608530 1.0000000 -0.1773833 0.3740443 -0.5077867 # black 0.2915117 -0.4418080 -0.1773833 1.0000000 -0.3660869 0.3334608 # lstat -0.4969958 0.5439934 0.3740443 -0.3660869 1.0000000 -0.7376627 # medv 0.2499287 -0.4685359 -0.5077867 0.3334608 -0.7376627 1.0000000 Now, unsurprisingly, there\u0026rsquo;s nothing which is really strongly correlated here for some reason.\n Train test splits   set.seed(1984) trainIndCri \u0026lt;- createDataPartition(boston$highCrime, # Factor, so class sampling p=0.7, # 70-30 train-test list=FALSE, # No lists times=1) # No bootstrap bostonTrain\u0026lt;-boston[trainIndCri,] bostonTest\u0026lt;-boston[-trainIndCri,]  Make a bunch of models   glmBos.fit=glm(highCrime~., data=bostonTrain, family=binomial) # Warning: glm.fit: algorithm did not converge # Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred glmBos.probs = predict(glmBos.fit,bostonTest, type = \u0026#34;response\u0026#34;) glmBos.pred = rep(1,length(glmBos.probs)) glmBos.pred[glmBos.probs\u0026lt;0.5]=0 glmBos.pred=factor(glmBos.pred) confusionMatrix(glmBos.pred,bostonTest$highCrime) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 68 6 # 1 7 69 # # Accuracy : 0.9133 # 95% CI : (0.8564, 0.953) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.8267 # # Mcnemar\u0026#39;s Test P-Value : 1 # # Sensitivity : 0.9067 # Specificity : 0.9200 # Pos Pred Value : 0.9189 # Neg Pred Value : 0.9079 # Prevalence : 0.5000 # Detection Rate : 0.4533 # Detection Prevalence : 0.4933 # Balanced Accuracy : 0.9133 # # \u0026#39;Positive\u0026#39; Class : 0 # bostonLDA=train(highCrime~.,data=bostonTrain,method=\u0026#39;lda\u0026#39;) bostonQDA=train(highCrime~tax+crim,data=bostonTrain,method=\u0026#39;qda\u0026#39;) bostonKNN=train(highCrime~.,data=bostonTrain,preProcess = c(\u0026#34;center\u0026#34;,\u0026#34;scale\u0026#34;),method=\u0026#39;knn\u0026#39;) bLDAp=predict(bostonLDA,bostonTest) bQDAp=predict(bostonQDA,bostonTest) bKNNp=predict(bostonKNN,bostonTest) confusionMatrix(bLDAp,bostonTest$highCrime) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 72 6 # 1 3 69 # # Accuracy : 0.94 # 95% CI : (0.8892, 0.9722) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.88 # # Mcnemar\u0026#39;s Test P-Value : 0.505 # # Sensitivity : 0.9600 # Specificity : 0.9200 # Pos Pred Value : 0.9231 # Neg Pred Value : 0.9583 # Prevalence : 0.5000 # Detection Rate : 0.4800 # Detection Prevalence : 0.5200 # Balanced Accuracy : 0.9400 # # \u0026#39;Positive\u0026#39; Class : 0 # confusionMatrix(bQDAp,bostonTest$highCrime) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 73 5 # 1 2 70 # # Accuracy : 0.9533 # 95% CI : (0.9062, 0.981) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.9067 # # Mcnemar\u0026#39;s Test P-Value : 0.4497 # # Sensitivity : 0.9733 # Specificity : 0.9333 # Pos Pred Value : 0.9359 # Neg Pred Value : 0.9722 # Prevalence : 0.5000 # Detection Rate : 0.4867 # Detection Prevalence : 0.5200 # Balanced Accuracy : 0.9533 # # \u0026#39;Positive\u0026#39; Class : 0 # confusionMatrix(bKNNp,bostonTest$highCrime) # Confusion Matrix and Statistics # # Reference # Prediction 0 1 # 0 74 6 # 1 1 69 # # Accuracy : 0.9533 # 95% CI : (0.9062, 0.981) # No Information Rate : 0.5 # P-Value [Acc \u0026gt; NIR] : \u0026lt;2e-16 # # Kappa : 0.9067 # # Mcnemar\u0026#39;s Test P-Value : 0.1306 # # Sensitivity : 0.9867 # Specificity : 0.9200 # Pos Pred Value : 0.9250 # Neg Pred Value : 0.9857 # Prevalence : 0.5000 # Detection Rate : 0.4933 # Detection Prevalence : 0.5333 # Balanced Accuracy : 0.9533 # # \u0026#39;Positive\u0026#39; Class : 0 # Clearly in this particular case, an LDA model seems to be working out the best for this data when trained on all the parameters, though Logistic Regression is doing quite well too.\n Notes on KNN   plot(bostonKNN)   plot(bostonKNN, print.thres = 0.5, type=\u0026#34;S\u0026#34;)    Comparison  Finally, we will quickly plot some indicative measures.\nknnBosROC\u0026lt;-roc(predictor=as.numeric(bKNNp),response=bostonTest$highCrime) # Setting levels: control = 0, case = 1 # Setting direction: controls \u0026lt; cases logiBosROC\u0026lt;-roc(predictor=as.numeric(glmBos.probs),response=bostonTest$highCrime) # Setting levels: control = 0, case = 1 # Setting direction: controls \u0026lt; cases ldaBosROC\u0026lt;-roc(predictor=as.numeric(bLDAp),response=bostonTest$highCrime) # Setting levels: control = 0, case = 1 # Setting direction: controls \u0026lt; cases qdaBosROC\u0026lt;-roc(predictor=as.numeric(bQDAp),response=bostonTest$highCrime) # Setting levels: control = 0, case = 1 # Setting direction: controls \u0026lt; cases ggroc(list(KNN=knnBosROC,Logistic=logiBosROC,LDA=ldaBosROC,QDA=qdaBosROC))   Figure 14: plot of chunk unnamed-chunk-87\n  OK, one of the reasons why these models do so well is because they are all assuming an equal distribution of train and test classes, and they use crim itself as a predictor. This is no doubt a strong reason why these models uniformly perform so well. I\u0026rsquo;d say 5 is the best option.\n  James, G., Witten, D., Hastie, T., \u0026amp; Tibshirani, R. (2013). An Introduction to Statistical Learning: with Applications in R. Berlin, Germany: Springer Science \u0026amp; Business Media. \u0026#x21a9;\u0026#xfe0e;\n A good introduction to the caret and skimr packages is here \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/islr-ch4/","tags":["solutions","R","ISLR"],"title":"ISLR :: Classification"},{"categories":["personal"],"contents":"Background  Pandora doesn\u0026rsquo;t work outside the states I keep forgetting how to set-up proxychains  Proxychains Technically this article expects proxychains-ng, which seems to be the more up-to-date fork of the original proxychains.\n  Install proxychains-ng\n# I am on archlinux.. sudo pacman -S proxychains-ng   Copy the configuration to the $HOME directory\ncp /etc/proxychains.conf .   Edit said configuration to add some US-based proxy\n  In my particular case, I don\u0026rsquo;t keep the tor section enabled.\ntail $HOME/proxychains.conf # # proxy types: http, socks4, socks5 # ( auth types supported: \u0026#34;basic\u0026#34;-http \u0026#34;user/pass\u0026#34;-socks ) # [ProxyList] # add proxy here ... # meanwile # defaults set to \u0026#34;tor\u0026#34; # socks4 127.0.0.1 9050 I actually use Windscribe for my VPN needs, and they have a neat SOCKS5 proxy setup. This works out to a line like socks5 $IP $PORT $USERNAME $PASS being added. The default generator gives you a pretty server name, but to get the IP I use ping $SERVER and put that in the conf file.\nPandora I use the excellent pianobar frontend.\n  Get pianobar\nsudo pacman -S pianobar   Use it with proxychains\nproxychains pianobar   Profit\n  I also like setting up some defaults to make life easier:\nmkdir -p ~/.config/pianobar vim ~/.config/pianobar/config I normally set the following (inspired by the ArchWiki):\naudio_quality = {high, medium, low} autostart_station = $ID password = \u0026#34;$PASS\u0026#34; user = \u0026#34;$emailID\u0026#34; The autostart_station ID can be obtained by inspecting the terminal output during an initial run. I usually set it to the QuickMix station.\n","permalink":"https://rgoswami.me/posts/pandora-proxychains/","tags":["tools","workflow"],"title":"Pandora and Proxychains"},{"categories":["programming"],"contents":"Background  I dislike Jupyter notebooks (and JupyterHub) a lot EIN is really not much of a solution either  In the past I have written some posts on TeX with JupyterHub and discussed ways to use virtual Python with JupyterHub in a more reasonable manner.\nHowever, I personally found that EIN was a huge pain to work with, and I mostly ended up working with the web-interface anyway.\nIt is a bit redundant to do so, given that at-least for my purposes, the end result was a LaTeX document. Breaking down the rest of my requirements went a bit like this:\n What exports well to TeX? Org, Markdown, anything which goes into pandoc What displays code really well? LaTeX, Markdown, Org What allows easy visualization of code snippets? Rmarkdown, RStudio, JupyterHub, Org with babel  Clearly, orgmode is the common denominator, and ergo, a perfect JupyterHub alternative.\nSetup Throughout this post I will assume the following structure:\ntree tmp mkdir -p tmp/images touch tmp/myFakeJupyter.org    tmp        âââ images     âââ myFakeJupyter.org     1 directory, 1 file    As is evident, we have a folder tmp which will have all the things we need for dealing with our setup.\nVirtual Python Without waxing too eloquent on the whole reason behind doing this, since I will rant about virtual python management systems elsewhere, here I will simply describe my preferred method, which is using poetry.\n# In a folder above tmp poetry init poetry add numpy matplotlib scipy pandas The next part is optional, but a good idea if you figure out using direnv and have configured layout_poetry as described here:\n# Same place as the poetry files echo \u0026#34;layout_poetry()\u0026#34; \u0026gt;\u0026gt; .envrc Note:\n We can nest an arbitrary number of the tmp structures under a single place we define the poetry setup I prefer using direnv to ensure that I never forget to hook into the right environment  Orgmode This is not an introduction to org, however in particular, there are some basic settings to keep in mind to make sure the set-up works as expected.\nIndentation Python is notoriously weird about whitespace, so we will ensure that our export process does not mangle whitespace and offend the python interpreter. We will have the following line at the top of our orgmode file:\n# -*- org-src-preserve-indentation: t; org-edit-src-content: 0; -*- Note:\n this post is actually generating the file being discussed here by  tangling the file\n You can get the whole file here  TeX Settings These are also basically optional, but at the very least you will need the following:\n#+author: Rohit Goswami #+title: Whatever #+subtitle: Wittier line about whatever #+date: \\today #+OPTIONS: toc:nil I actually use a lot of math using the TeX input mode in Emacs, so I like the following settings for math:\n# For math display #+LATEX_HEADER: \\usepackage{amsfonts} #+LATEX_HEADER: \\usepackage{unicode-math} There are a bunch of other settings which may be used, but these are the bare minimum, more on that would be in a snippet anyway.\nNote:\n rendering math in the orgmode file in this manner requires that we use XeTeX to compile the final file  Org-Python We essentially need to ensure that:\n Babel uses our virtual python The same session is used for each block  We will get our poetry python pretty easily:\nwhich python Now we will use this as a common header-arg passed into the property drawer to make sure we don\u0026rsquo;t need to set them in every code block.\nWe can use the following structure in our file:\n\\* Python Stuff :PROPERTIES: :header-args: :python /home/haozeke/.cache/pypoetry/virtualenvs/test-2aLV_5DQ-py3.8/bin/python :session One :results output :exports both :END: Now we can simply work with code as we normally would \\#+BEGIN_SRC python print(\u0026#34;Hello World\u0026#34;) \\#+END_SRC Note:\n For some reason, this property needs to be set on every heading (as of Feb 13 2020) In the actual file you will want to remove extraneous \\ symbols:  \\* â * \\#+BEGIN_SRC â #+BEGIN_SRC \\#+END_SRC â #+END_SRC    Python Images and Orgmode To view images in orgmode as we would in a JupyterLab notebook, we will use a slight trick.\n  We will ensure that the code block returns a file object with the arguments\n  The code block should end with a print statement to actually generate the file name\nSo we want a code block like this:\n   #+BEGIN_SRC python :results output file :exports both import matplotlib.pyplot as plt from sklearn.datasets.samples_generator import make_circles X, y = make_circles(100, factor=.1, noise=.1) plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap=\u0026#39;autumn\u0026#39;) plt.xlabel(\u0026#39;x1\u0026#39;) plt.ylabel(\u0026#39;x2\u0026#39;) plt.savefig(\u0026#39;images/plotCircles.png\u0026#39;, dpi = 300) print(\u0026#39;images/plotCircles.png\u0026#39;) # return filename to org-mode #+end_src Which would give the following when executed:\n#+RESULTS: [[file:images/plotCircles.png]] Since that looks pretty ugly, this will actually look like this:\nimport matplotlib.pyplot as plt from sklearn.datasets.samples_generator import make_circles X, y = make_circles(100, factor=.1, noise=.1) plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap=\u0026#39;autumn\u0026#39;) plt.xlabel(\u0026#39;x1\u0026#39;) plt.ylabel(\u0026#39;x2\u0026#39;) plt.savefig(\u0026#39;images/plotCircles.png\u0026#39;, dpi = 300) print(\u0026#39;images/plotCircles.png\u0026#39;) # return filename to org-mode   Bonus A better way to simulate standard jupyter workflows is to just specify the properties once at the beginning.\n#+PROPERTY: header-args:python :python /home/haozeke/.cache/pypoetry/virtualenvs/test-2aLV_5DQ-py3.8/bin/python :session One :results output :exports both This setup circumvents having to set the properties per sub-tree, though for very large projects, it is useful to use different processes.\nConclusions  The last step is of course to export the file as to a TeX file and then compile that with something like latexmk -pdfxe -shell-escape file.tex  There are a million and one variations of this of course, but this is enough to get started.\nThe whole file is also reproduced here.\nComments The older commenting system was implemented with utteranc.es as seen below.\n ","permalink":"https://rgoswami.me/posts/jupyter-orgmode/","tags":["tools","emacs","workflow","orgmode"],"title":"Replacing Jupyter with Orgmode"},{"categories":["programming"],"contents":"Background  I end up writing about using poetry a lot I almost always use direnv in real life too I don\u0026rsquo;t keep writing mini scripts in my .envrc  Honestly there\u0026rsquo;s nothing here anyone using the direnv wiki will find surprising, but then it is still neat to link back to.\nSetting Up Poetry This essentially works by simply modifying the global .direnvrc which essentially gets sourced by every local .envrc anyway.\nvim $HOME/.direnvrc So what we put in there is the following snippet derived from other snippets on the wiki, and is actually now there too.\n# PUT this here layout_poetry() { if [[ ! -f pyproject.toml ]]; then log_error \u0026#39;No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.\u0026#39; exit 2 fi local VENV=$(dirname $(poetry run which python)) export VIRTUAL_ENV=$(echo \u0026#34;$VENV\u0026#34; | rev | cut -d\u0026#39;/\u0026#39; -f2- | rev) export POETRY_ACTIVE=1 PATH_add \u0026#34;$VENV\u0026#34; } Now we can just make .envrc files with layout_poetry and everything will just workâ¢.\n","permalink":"https://rgoswami.me/posts/poetry-direnv/","tags":["tools","direnv","workflow","python"],"title":"Poetry and Direnv"},{"categories":["notes"],"contents":"Background As a member of several large organizations, I get a lot of github notifications. Not all of these are of relevance to me. This is especially true of psuedo-monorepo style repositories like the JOSS review system and especially the exercism community.\n I recently (re-)joined the exercism community as a maintainer for the C++ lessons after having been a (sporadic) teacher This was largely in response to a community call to action as the group needed new blood to usher in v3 of the exercism project  Anyway, I have since found that at the small cost of possibly much of my public repo data, I can manage my notifications better with Octobox\nOctobox  It appears to be free for now It syncs on demand (useful) I can search things quite easily They have a neat logo There appear to be many features I probably won\u0026rsquo;t use  It looks like this:\n  Figure 1: Octobox Stock Photo\n  ","permalink":"https://rgoswami.me/posts/ghnotif/","tags":["tools","github","workflow"],"title":"Taming Github Notifications"},{"categories":["personal"],"contents":"Why this site exists I have a lot of online presences. I have been around (or at-least, lurking) for over ten years. Almost as long as I have been programming. Anyway, I have a penchant lately for using emacs and honestly there isn\u0026rsquo;t very good support for org-mode files. There are options recently with gatsby as well, but this seemed kinda neat.\nWhat \u0026lsquo;this\u0026rsquo; is  This site is built by Hugo The posts are generated with ox-hugo The theme is based of this excellent one by Djordje Atlialp, which in turn is based off of this theme by panr  My modifications are here    What is here  Mostly random thoughts I don\u0026rsquo;t mind people knowing Some tech stuff which isn\u0026rsquo;t coherent enough to be put in any form with references Emacs specific workflows which I might want to write about more than short notes on the config  What isn\u0026rsquo;t here  Some collections should and will go to my grimoire My doom-emacs configuration Academic stuff is better tracked on Publons or Google Scholar or my pages hosted by my favorite IITK group or UI group  ","permalink":"https://rgoswami.me/posts/rationale/","tags":["ramblings","explanations"],"title":"Site Rationale"},{"categories":["programming"],"contents":"Chapter II - Statistical Learning All the questions are as per the ISL seventh printingÂ 1.\nQuestion 2.8 - Pages 54-55 This exercise relates to the College data set, which can be found in the file College.csv. It contains a number of variables for \\(777\\) different universities and colleges in the US. The variables are\n Private : Public/private indicator Apps : Number of applications received Accept : Number of applicants accepted Enroll : Number of new students enrolled Top10perc : New students from top 10 % of high school class Top25perc : New students from top 25 % of high school class F.Undergrad : Number of full-time undergraduates P.Undergrad : Number of part-time undergraduates Outstate : Out-of-state tuition Room.Board : Room and board costs Books : Estimated book costs Personal : Estimated personal spending PhD : Percent of faculty with Ph.D.\u0026rsquo;s Terminal : Percent of faculty with terminal degree S.F.Ratio : Student/faculty ratio perc.alumni : Percent of alumni who donate Expend : Instructional expenditure per student Grad.Rate : Graduation rate  Before reading the data into R, it can be viewed in Excel or a text editor.\n(a) Use the read.csv() function to read the data into R . Call the loaded data college. Make sure that you have the directory set to the correct location for the data.\n(b) Look at the data using the fix() function. You should notice that the ï¬rst column is just the name of each university. We don\u0026rsquo;t really want R to treat this as data. However, it may be handy to have these names for later. Try the following commands:\nrownames(college)=college[,1] fix(college) You should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. However, we still need to eliminate the ï¬rst column in the data where the names are stored. Try:\ncollege=college[,-1] fix(college) (c)\n Use the summary() function to produce a numerical summary of the variables in the data set. Use the pairs() function to produce a scatterplot matrix of the ï¬rst ten columns or variables of the data. Recall that you can reference the first ten columns of a matrix A using A[,1:10] . Use the plot() function to produce side-by-side boxplots of Outstate versus Private . Create a new qualitative variable, called Elite , by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top \\(10%\\) of their high school classes exceeds \\(50%\\).   Elite = rep(\u0026#34;No\u0026#34;, nrow(college)) Elite [college$Top10perc \u0026gt;50]=\u0026#34;Yes\u0026#34; Elite = as.factor (Elite) college = data.frame (college, Elite) Use the summary() function to see how many elite univer- sities there are. Now use the plot() function to produce side-by-side boxplots of Outstate versus Elite .\n Use the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative vari- ables. You may fnd the command par(mfrow=c(2,2)) useful: it will divide the print window into four regions so that four plots can be made simultaneously. Modifying the arguments to this function will divide the screen in other ways. Continue exploring the data, and provide a brief summary of what you discover.  Answer Instead of reading in data, for ISLR in particular we can load the ISLR library which is on CRAN and contains the data-sets required for the book.\ninstall.packages(\u0026#34;ISLR\u0026#34;) Thus, we can now read it in as library(\u0026quot;ISLR\u0026quot;)\nThe remaining sections are meant to be executed, and are marked as such, with r in {}.\n(c)\nWe will load the dataset once for the whole document.\nlibrary(\u0026#34;ISLR\u0026#34;)  Usage of the summary() function   summary(ISLR::College) ## Private Apps Accept Enroll Top10perc ## No :212 Min. : 81 Min. : 72 Min. : 35 Min. : 1.00 ## Yes:565 1st Qu.: 776 1st Qu.: 604 1st Qu.: 242 1st Qu.:15.00 ## Median : 1558 Median : 1110 Median : 434 Median :23.00 ## Mean : 3002 Mean : 2019 Mean : 780 Mean :27.56 ## 3rd Qu.: 3624 3rd Qu.: 2424 3rd Qu.: 902 3rd Qu.:35.00 ## Max. :48094 Max. :26330 Max. :6392 Max. :96.00 ## Top25perc F.Undergrad P.Undergrad Outstate ## Min. : 9.0 Min. : 139 Min. : 1.0 Min. : 2340 ## 1st Qu.: 41.0 1st Qu.: 992 1st Qu.: 95.0 1st Qu.: 7320 ## Median : 54.0 Median : 1707 Median : 353.0 Median : 9990 ## Mean : 55.8 Mean : 3700 Mean : 855.3 Mean :10441 ## 3rd Qu.: 69.0 3rd Qu.: 4005 3rd Qu.: 967.0 3rd Qu.:12925 ## Max. :100.0 Max. :31643 Max. :21836.0 Max. :21700 ## Room.Board Books Personal PhD ## Min. :1780 Min. : 96.0 Min. : 250 Min. : 8.00 ## 1st Qu.:3597 1st Qu.: 470.0 1st Qu.: 850 1st Qu.: 62.00 ## Median :4200 Median : 500.0 Median :1200 Median : 75.00 ## Mean :4358 Mean : 549.4 Mean :1341 Mean : 72.66 ## 3rd Qu.:5050 3rd Qu.: 600.0 3rd Qu.:1700 3rd Qu.: 85.00 ## Max. :8124 Max. :2340.0 Max. :6800 Max. :103.00 ## Terminal S.F.Ratio perc.alumni Expend ## Min. : 24.0 Min. : 2.50 Min. : 0.00 Min. : 3186 ## 1st Qu.: 71.0 1st Qu.:11.50 1st Qu.:13.00 1st Qu.: 6751 ## Median : 82.0 Median :13.60 Median :21.00 Median : 8377 ## Mean : 79.7 Mean :14.09 Mean :22.74 Mean : 9660 ## 3rd Qu.: 92.0 3rd Qu.:16.50 3rd Qu.:31.00 3rd Qu.:10830 ## Max. :100.0 Max. :39.80 Max. :64.00 Max. :56233 ## Grad.Rate ## Min. : 10.00 ## 1st Qu.: 53.00 ## Median : 65.00 ## Mean : 65.46 ## 3rd Qu.: 78.00 ## Max. :118.00  Usage of pairs()   tenColl \u0026lt;- ISLR::College[,1:10] # For getting the first ten columns pairs(tenColl) # Scatterplot   Figure 1: Pairs\n   Boxplot creation with plot()   plot(ISLR::College$Private,ISLR::College$Outstate,xlab=\u0026#34;Private\u0026#34;,ylab=\u0026#34;Outstate\u0026#34;)   Figure 2: Boxplots\n   Binning and plotting   college=ISLR::College Elite=rep(\u0026#34;No\u0026#34;,nrow(college)) Elite[college$Top10perc\u0026gt;50]=\u0026#34;Yes\u0026#34; Elite=as.factor(Elite) college\u0026lt;-data.frame(college,Elite) summary(college$Elite) ## No Yes ## 699 78 plot(college$Outstate,college$Elite,xlab=\u0026#34;Outstate\u0026#34;,ylab=\u0026#34;Elite\u0026#34;)   Figure 3: Plotting Outstate and Elite\n   Histograms with hist()   par(mfrow=c(2,2)) hist(college$Enroll) hist(college$perc.alumni, col=2) hist(college$Personal, col=3, breaks=10) hist(college$PhD, breaks=10)   Figure 4: Histogram\n  hist(college$Top10perc, col=\u0026#34;blue\u0026#34;) hist(college$Outstate, col=23)   Figure 5: Colored Histogram\n   Explorations (graphical)  \\(0\\) implies the faculty have PhDs. It is clear that people donate more when faculty do not have terminal degrees.\nplot(college$Terminal-college$PhD, college$perc.alumni)   Figure 6: Terminal degrees and alumni\n  High tuition correlates to high graduation rate.\nplot(college$Expend, college$Grad.Rate)   Figure 7: Tuiton and graduation\n  Low acceptance implies a low student to faculty ratio.\nplot(college$Accept / college$Apps, college$S.F.Ratio)   Figure 8: Acceptance and Student/Faculty ratio\n  Question 2.9 - Page 56 This exercise involves the Auto data set studied in the lab. Make sure that the missing values have been removed from the data.\n(a) Which of the predictors are quantitative, and which are qualitative?\n(b) What is the range of each quantitative predictor? You can answer this using the range() function.\n(c) What is the mean and standard deviation of each quantitative predictor?\n(d) Now remove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor in the subset of the data that remains?\n(e) Using the full data set, investigate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predictors. Comment on your findings.\n(f) Suppose that we wish to predict gas mileage (mpg) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? Justify your answer.\nAnswer Once again, since the dataset is loaded from the library, we will simply start manipulating it.\n# Clean data autoDat\u0026lt;-na.omit(ISLR::Auto) # renamed for convenience (a) To determine weather the variables a qualitative or quantitative we can either inspect the variables by eye, or query the dataset.\nsummary(autoDat) # Observe the output for variance ## mpg cylinders displacement horsepower weight ## Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 ## 1st Qu.:17.00 1st Qu.:4.000 1st Qu.:105.0 1st Qu.: 75.0 1st Qu.:2225 ## Median :22.75 Median :4.000 Median :151.0 Median : 93.5 Median :2804 ## Mean :23.45 Mean :5.472 Mean :194.4 Mean :104.5 Mean :2978 ## 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:275.8 3rd Qu.:126.0 3rd Qu.:3615 ## Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 ## ## acceleration year origin name ## Min. : 8.00 Min. :70.00 Min. :1.000 amc matador : 5 ## 1st Qu.:13.78 1st Qu.:73.00 1st Qu.:1.000 ford pinto : 5 ## Median :15.50 Median :76.00 Median :1.000 toyota corolla : 5 ## Mean :15.54 Mean :75.98 Mean :1.577 amc gremlin : 4 ## 3rd Qu.:17.02 3rd Qu.:79.00 3rd Qu.:2.000 amc hornet : 4 ## Max. :24.80 Max. :82.00 Max. :3.000 chevrolet chevette: 4 ## (Other) :365 str(autoDat) # Directly find find out ## \u0026#39;data.frame\u0026#39;: 392 obs. of 9 variables: ## $ mpg : num 18 15 18 16 17 15 14 14 14 15 ... ## $ cylinders : num 8 8 8 8 8 8 8 8 8 8 ... ## $ displacement: num 307 350 318 304 302 429 454 440 455 390 ... ## $ horsepower : num 130 165 150 150 140 198 220 215 225 190 ... ## $ weight : num 3504 3693 3436 3433 3449 ... ## $ acceleration: num 12 11.5 11 12 10.5 10 9 8.5 10 8.5 ... ## $ year : num 70 70 70 70 70 70 70 70 70 70 ... ## $ origin : num 1 1 1 1 1 1 1 1 1 1 ... ## $ name : Factor w/ 304 levels \u0026#34;amc ambassador brougham\u0026#34;,..: 49 36 231 14 161 141 54 223 241 2 ... From the above view, we can see that there is only one listed as a qualitative variable or factor, and that is name. However, we can also do this in a cleaner manner or at-least in a different manner with a function.\nfindFactors \u0026lt;- sapply(autoDat,is.factor) findFactors ## mpg cylinders displacement horsepower weight acceleration ## FALSE FALSE FALSE FALSE FALSE FALSE ## year origin name ## FALSE FALSE TRUE Though only name is listed as a qualitative variable, we note that origin seems to be almost qualitative as well.\nlength(unique(autoDat$origin)) ## [1] 3 unique(autoDat$origin) ## [1] 1 3 2 Infact we can check that nothing else has this property by repeated application of sapply, though a pipe would be more satisfying\ngetUniq\u0026lt;-sapply(autoDat, unique) getLengths\u0026lt;-sapply(getUniq,length) getLengths ## mpg cylinders displacement horsepower weight acceleration ## 127 5 81 93 346 95 ## year origin name ## 13 3 301 This is really nicer with pipes\nlibrary(dplyr) ## ## Attaching package: \u0026#39;dplyr\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## filter, lag ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## intersect, setdiff, setequal, union autoDat %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) ## mpg cylinders displacement horsepower weight acceleration ## 127 5 81 93 346 95 ## year origin name ## 13 3 301 At any rate, we know now that origin and name are probably qualitative, and the rest are quantitative.\n(b) Using range()\nA nice feature of the dataset we have is that the suspected qualitative variables are at the end of the dataset. So we can simply select the first \\(7\\) rows and go nuts on them.\nautoDat[,1:7] %\u0026gt;% sapply(range) # or sapply(autoDat[,1:7],range) ## mpg cylinders displacement horsepower weight acceleration year ## [1,] 9.0 3 68 46 1613 8.0 70 ## [2,] 46.6 8 455 230 5140 24.8 82 Once again, more elegant with pipes and subset()\nautoDat %\u0026gt;% subset(select=-c(name,origin)) %\u0026gt;% sapply(range) ## mpg cylinders displacement horsepower weight acceleration year ## [1,] 9.0 3 68 46 1613 8.0 70 ## [2,] 46.6 8 455 230 5140 24.8 82 # Even simpler with dplyr autoDat %\u0026gt;% select(-name,-origin) %\u0026gt;% sapply(range) ## mpg cylinders displacement horsepower weight acceleration year ## [1,] 9.0 3 68 46 1613 8.0 70 ## [2,] 46.6 8 455 230 5140 24.8 82 (c) Mean and standard deviation\nnoFactors \u0026lt;- autoDat %\u0026gt;% select(-name,-origin) noFactors %\u0026gt;% sapply(mean) ## mpg cylinders displacement horsepower weight acceleration ## 23.445918 5.471939 194.411990 104.469388 2977.584184 15.541327 ## year ## 75.979592 noFactors %\u0026gt;% sapply(sd) ## mpg cylinders displacement horsepower weight acceleration ## 7.805007 1.705783 104.644004 38.491160 849.402560 2.758864 ## year ## 3.683737 (d) Removing observations 10-85 and testing.\nnoFactors[-(10:85),] %\u0026gt;% sapply(mean) ## mpg cylinders displacement horsepower weight acceleration ## 24.404430 5.373418 187.240506 100.721519 2935.971519 15.726899 ## year ## 77.145570 noFactors[-(10:85),] %\u0026gt;% sapply(sd) ## mpg cylinders displacement horsepower weight acceleration ## 7.867283 1.654179 99.678367 35.708853 811.300208 2.693721 ## year ## 3.106217 (e) Plots for determining relationships\npar(mfrow=c(2,2)) plot(autoDat$weight, autoDat$horsepower) plot(autoDat$weight, autoDat$acceleration) plot(autoDat$displacement, autoDat$acceleration) plot(autoDat$cylinders, autoDat$acceleration)   Figure 9: Relationship determination\n   Evidently horsepower is directly proportional to weight but acceleration is inversely proportional to weight Acceleration is also inversely proportional to displacement Cylinders are a poor measure, not surprising since there are only \\(5\\) values  (f) Choosing predictors for gas mileage mpg\nLet us recall certain key elements of the quantitative aspects of the dataset.\nsummary(noFactors) # To understand the spread ## mpg cylinders displacement horsepower weight ## Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 ## 1st Qu.:17.00 1st Qu.:4.000 1st Qu.:105.0 1st Qu.: 75.0 1st Qu.:2225 ## Median :22.75 Median :4.000 Median :151.0 Median : 93.5 Median :2804 ## Mean :23.45 Mean :5.472 Mean :194.4 Mean :104.5 Mean :2978 ## 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:275.8 3rd Qu.:126.0 3rd Qu.:3615 ## Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 ## acceleration year ## Min. : 8.00 Min. :70.00 ## 1st Qu.:13.78 1st Qu.:73.00 ## Median :15.50 Median :76.00 ## Mean :15.54 Mean :75.98 ## 3rd Qu.:17.02 3rd Qu.:79.00 ## Max. :24.80 Max. :82.00 getLengths # To get the number of unique values ## mpg cylinders displacement horsepower weight acceleration ## 127 5 81 93 346 95 ## year origin name ## 13 3 301 From this we can assert easily that the number of cylinders is not of much interest for predictions of the mileage.\npar(mfrow=c(3,2)) plot(noFactors$mpg,noFactors$horsepower) plot(noFactors$mpg,noFactors$weight) plot(noFactors$mpg,noFactors$displacement) plot(noFactors$mpg,noFactors$acceleration) plot(noFactors$mpg,noFactors$year)   Figure 10: Predictions\n   So now we know that the mileage increases when horsepower is low, weight is low, displacement is low and acceleration is high  Where low represents an inverse response and high represents a direct response.\n It is also clear that the mileage increases every year  Chapter III - Linear Regression Question 3.9 - Page 122 This question involves the use of multiple linear regression on the Auto data set.\n(a) Produce a scatterplot matrix which includes all of the variables in the data set.\n(b) Compute the matrix of correlations between the variables using the function cor() . You will need to exclude the name variable, cor() which is qualitative.\n(c) Use the lm() function to perform a multiple linear regression with mpg as the response and all other variables except name as the predictors. Use the summary() function to print the results. Comment on the output. For instance:\n Is there a relationship between the predictors and the response? Which predictors appear to have a statistically significant relationship to the response? What does the coefficient for the year variable suggest?  (d) Use the plot() function to produce diagnostic plots of the linear regression fit. Comment on any problems you see with the fit. Do the residual plots suggest any unusually large outliers? Does the leverage plot identify any observations with unusually high leverage?\n(e) Use the * and : symbols to fit linear regression models with interaction effects. Do any interactions appear to be statistically significant?\n(f) Try a few different transformations of the variables, such as \\(\\log{X}\\), \\(\\sqrt{X}\\), \\(X^2\\).Comment on your ï¬ndings.\nAnswer Once again, we will use the dataset from the library.\ncleanAuto \u0026lt;- na.omit(autoDat) summary(cleanAuto) # Already created above, so no need to do na.omit again ## mpg cylinders displacement horsepower weight ## Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 ## 1st Qu.:17.00 1st Qu.:4.000 1st Qu.:105.0 1st Qu.: 75.0 1st Qu.:2225 ## Median :22.75 Median :4.000 Median :151.0 Median : 93.5 Median :2804 ## Mean :23.45 Mean :5.472 Mean :194.4 Mean :104.5 Mean :2978 ## 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:275.8 3rd Qu.:126.0 3rd Qu.:3615 ## Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 ## ## acceleration year origin name ## Min. : 8.00 Min. :70.00 Min. :1.000 amc matador : 5 ## 1st Qu.:13.78 1st Qu.:73.00 1st Qu.:1.000 ford pinto : 5 ## Median :15.50 Median :76.00 Median :1.000 toyota corolla : 5 ## Mean :15.54 Mean :75.98 Mean :1.577 amc gremlin : 4 ## 3rd Qu.:17.02 3rd Qu.:79.00 3rd Qu.:2.000 amc hornet : 4 ## Max. :24.80 Max. :82.00 Max. :3.000 chevrolet chevette: 4 ## (Other) :365 (a) Scatterplot\npairs(cleanAuto)   Figure 11: Scatterplot\n  (b) Correlation matrix. For this we exclude the qualitative variables either by using select or by using the existing noFactors dataset\n# A full set ISLR::Auto %\u0026gt;% na.omit %\u0026gt;% select(-name,-origin) %\u0026gt;% cor ## mpg cylinders displacement horsepower weight ## mpg 1.0000000 -0.7776175 -0.8051269 -0.7784268 -0.8322442 ## cylinders -0.7776175 1.0000000 0.9508233 0.8429834 0.8975273 ## displacement -0.8051269 0.9508233 1.0000000 0.8972570 0.9329944 ## horsepower -0.7784268 0.8429834 0.8972570 1.0000000 0.8645377 ## weight -0.8322442 0.8975273 0.9329944 0.8645377 1.0000000 ## acceleration 0.4233285 -0.5046834 -0.5438005 -0.6891955 -0.4168392 ## year 0.5805410 -0.3456474 -0.3698552 -0.4163615 -0.3091199 ## acceleration year ## mpg 0.4233285 0.5805410 ## cylinders -0.5046834 -0.3456474 ## displacement -0.5438005 -0.3698552 ## horsepower -0.6891955 -0.4163615 ## weight -0.4168392 -0.3091199 ## acceleration 1.0000000 0.2903161 ## year 0.2903161 1.0000000 (c) Multiple Linear Regression\n# Fit against every variable lm.fit=lm(mpg~.,data=noFactors) summary(lm.fit) ## ## Call: ## lm(formula = mpg ~ ., data = noFactors) ## ## Residuals: ## Min 1Q Median 3Q Max ## -8.6927 -2.3864 -0.0801 2.0291 14.3607 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -1.454e+01 4.764e+00 -3.051 0.00244 ** ## cylinders -3.299e-01 3.321e-01 -0.993 0.32122 ## displacement 7.678e-03 7.358e-03 1.044 0.29733 ## horsepower -3.914e-04 1.384e-02 -0.028 0.97745 ## weight -6.795e-03 6.700e-04 -10.141 \u0026lt; 2e-16 *** ## acceleration 8.527e-02 1.020e-01 0.836 0.40383 ## year 7.534e-01 5.262e-02 14.318 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 3.435 on 385 degrees of freedom ## Multiple R-squared: 0.8093, Adjusted R-squared: 0.8063 ## F-statistic: 272.2 on 6 and 385 DF, p-value: \u0026lt; 2.2e-16 # Fit against one variable noFactors %\u0026gt;% lm(mpg~horsepower,data=.) %\u0026gt;% summary ## ## Call: ## lm(formula = mpg ~ horsepower, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -13.5710 -3.2592 -0.3435 2.7630 16.9240 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 39.935861 0.717499 55.66 \u0026lt;2e-16 *** ## horsepower -0.157845 0.006446 -24.49 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 4.906 on 390 degrees of freedom ## Multiple R-squared: 0.6059, Adjusted R-squared: 0.6049 ## F-statistic: 599.7 on 1 and 390 DF, p-value: \u0026lt; 2.2e-16 noFactors %\u0026gt;% lm(mpg~year,data=.) %\u0026gt;% summary ## ## Call: ## lm(formula = mpg ~ year, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -12.0212 -5.4411 -0.4412 4.9739 18.2088 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -70.01167 6.64516 -10.54 \u0026lt;2e-16 *** ## year 1.23004 0.08736 14.08 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 6.363 on 390 degrees of freedom ## Multiple R-squared: 0.337, Adjusted R-squared: 0.3353 ## F-statistic: 198.3 on 1 and 390 DF, p-value: \u0026lt; 2.2e-16 noFactors %\u0026gt;% lm(mpg~acceleration,data=.) %\u0026gt;% summary ## ## Call: ## lm(formula = mpg ~ acceleration, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -17.989 -5.616 -1.199 4.801 23.239 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 4.8332 2.0485 2.359 0.0188 * ## acceleration 1.1976 0.1298 9.228 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 7.08 on 390 degrees of freedom ## Multiple R-squared: 0.1792, Adjusted R-squared: 0.1771 ## F-statistic: 85.15 on 1 and 390 DF, p-value: \u0026lt; 2.2e-16 noFactors %\u0026gt;% lm(mpg~weight,data=.) %\u0026gt;% summary ## ## Call: ## lm(formula = mpg ~ weight, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -11.9736 -2.7556 -0.3358 2.1379 16.5194 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 46.216524 0.798673 57.87 \u0026lt;2e-16 *** ## weight -0.007647 0.000258 -29.64 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 4.333 on 390 degrees of freedom ## Multiple R-squared: 0.6926, Adjusted R-squared: 0.6918 ## F-statistic: 878.8 on 1 and 390 DF, p-value: \u0026lt; 2.2e-16 noFactors %\u0026gt;% lm(mpg~displacement,data=.) %\u0026gt;% summary ## ## Call: ## lm(formula = mpg ~ displacement, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -12.9170 -3.0243 -0.5021 2.3512 18.6128 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 35.12064 0.49443 71.03 \u0026lt;2e-16 *** ## displacement -0.06005 0.00224 -26.81 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 4.635 on 390 degrees of freedom ## Multiple R-squared: 0.6482, Adjusted R-squared: 0.6473 ## F-statistic: 718.7 on 1 and 390 DF, p-value: \u0026lt; 2.2e-16   Clearly there is a relationship between the predictors and variables, mostly as described previously, with the following broad trends:\n Inversely proportional to Horsepower, Weight, and Displacement    The predictors which have a relationship to the response are (based on R squared values): \\[ all \u0026gt; weight \u0026gt; displacement \u0026gt; horsepower \u0026gt; year \u0026gt; acceleration \\] However, things lower than horsepower are not statistically significant.\n  The visual analysis of the year variable suggests that the mileage grows every year. However, it is clear from the summary, that there is no statistical significance of year when used to fit a single parameter linear model. We note that when we compare this to the multiple linear regression analysis, we see that the year factor accounts for \\(0.7508\\) of the total, that is, the cars become more efficient every year\n  (d) Lets plot these\npar(mfrow=c(2,2)) noFactors %\u0026gt;% lm(mpg~horsepower,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage v/s Horsepower\u0026#34;)   noFactors %\u0026gt;% lm(mpg~weight,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage v/s Weight\u0026#34;)   noFactors %\u0026gt;% lm(mpg~year,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage v/s Year\u0026#34;)   noFactors %\u0026gt;% lm(mpg~acceleration,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage v/s Acceleration\u0026#34;)   noFactors %\u0026gt;% lm(mpg~displacement,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage v/s Displacement\u0026#34;)   noFactors %\u0026gt;% lm(mpg~.,data=.) %\u0026gt;% plot(main=\u0026#34;Mileage Multiple Regression\u0026#34;)   Form this we can see that the fit is not very accurate as there is a clear curve to the residuals. The 14th point has high leverage, though it is of a small magnitude. Thus it is not expected to have affected the plot too much.\nWe know that an observation with a studentized residual greater than \\(3\\) in absolute value are possible outliers. Hence we must plot this.\n# Predict and get the plot fitPlot \u0026lt;- noFactors %\u0026gt;% lm(mpg~.,data=.) # See residuals plot(xlab=\u0026#34;Prediction\u0026#34;,ylab=\u0026#34;Studentized Residual\u0026#34;,x=predict(fitPlot),y=rstudent(fitPlot))   # Try a linear fit of studentized residuals par(mfrow=c(2,2)) plot(lm(predict(fitPlot)~rstudent(fitPlot)))   Clearly the studentized residuals are nonlinear w.r.t the prediction. Also, some points are above the absolute value of \\(3\\) so they might be outliers, in keeping with the leverage plot.\n(e) Interaction effects\nWe recall that x*y corresponds to x+y+x:y\n# View the correlation matrix cleanAuto %\u0026gt;% select(-name,-origin) %\u0026gt;% cor ## mpg cylinders displacement horsepower weight ## mpg 1.0000000 -0.7776175 -0.8051269 -0.7784268 -0.8322442 ## cylinders -0.7776175 1.0000000 0.9508233 0.8429834 0.8975273 ## displacement -0.8051269 0.9508233 1.0000000 0.8972570 0.9329944 ## horsepower -0.7784268 0.8429834 0.8972570 1.0000000 0.8645377 ## weight -0.8322442 0.8975273 0.9329944 0.8645377 1.0000000 ## acceleration 0.4233285 -0.5046834 -0.5438005 -0.6891955 -0.4168392 ## year 0.5805410 -0.3456474 -0.3698552 -0.4163615 -0.3091199 ## acceleration year ## mpg 0.4233285 0.5805410 ## cylinders -0.5046834 -0.3456474 ## displacement -0.5438005 -0.3698552 ## horsepower -0.6891955 -0.4163615 ## weight -0.4168392 -0.3091199 ## acceleration 1.0000000 0.2903161 ## year 0.2903161 1.0000000 summary(lm(mpg~weight*displacement*year,data=noFactors[(10:85),])) ## ## Call: ## lm(formula = mpg ~ weight * displacement * year, data = noFactors[(10:85), ## ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.3020 -0.9055 0.0966 0.8912 3.7049 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 3.961e+02 2.578e+02 1.537 0.129 ## weight -1.030e-01 1.008e-01 -1.021 0.311 ## displacement -1.587e+00 1.308e+00 -1.213 0.229 ## year -4.889e+00 3.623e+00 -1.349 0.182 ## weight:displacement 3.926e-04 3.734e-04 1.051 0.297 ## weight:year 1.317e-03 1.418e-03 0.929 0.356 ## displacement:year 2.150e-02 1.846e-02 1.165 0.248 ## weight:displacement:year -5.287e-06 5.253e-06 -1.007 0.318 ## ## Residual standard error: 1.8 on 68 degrees of freedom ## Multiple R-squared: 0.922, Adjusted R-squared: 0.914 ## F-statistic: 114.9 on 7 and 68 DF, p-value: \u0026lt; 2.2e-16 summary(lm(mpg~weight*displacement*year,data=noFactors)) ## ## Call: ## lm(formula = mpg ~ weight * displacement * year, data = noFactors) ## ## Residuals: ## Min 1Q Median 3Q Max ## -9.6093 -1.6472 -0.0531 1.2289 14.5604 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -8.437e+01 3.128e+01 -2.697 0.0073 ** ## weight 8.489e-03 1.322e-02 0.642 0.5212 ## displacement 3.434e-01 1.969e-01 1.744 0.0820 . ## year 1.828e+00 4.127e-01 4.430 1.23e-05 *** ## weight:displacement -6.589e-05 5.055e-05 -1.303 0.1932 ## weight:year -2.433e-04 1.744e-04 -1.395 0.1638 ## displacement:year -5.566e-03 2.674e-03 -2.082 0.0380 * ## weight:displacement:year 1.144e-06 6.823e-07 1.677 0.0944 . ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.951 on 384 degrees of freedom ## Multiple R-squared: 0.8596, Adjusted R-squared: 0.8571 ## F-statistic: 336 on 7 and 384 DF, p-value: \u0026lt; 2.2e-16  Adding the interaction effects of the \\(3\\) most positive R value terms improves the existing prediction to be better than that obtained by considering all effects. We note that the best model is obtained by removing the range identified in chapter 2.  (f) Nonlinear transformations\nsummary(lm(mpg~weight*displacement*year+I(year^2),data=noFactors[(10:85),])) ## ## Call: ## lm(formula = mpg ~ weight * displacement * year + I(year^2), ## data = noFactors[(10:85), ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.1815 -0.8235 0.0144 1.0076 3.9420 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -4.205e+03 1.810e+03 -2.324 0.0232 * ## weight -8.800e-02 9.709e-02 -0.906 0.3680 ## displacement -1.030e+00 1.276e+00 -0.807 0.4225 ## year 1.238e+02 5.026e+01 2.464 0.0163 * ## I(year^2) -9.000e-01 3.506e-01 -2.567 0.0125 * ## weight:displacement 2.471e-04 3.634e-04 0.680 0.4988 ## weight:year 1.113e-03 1.365e-03 0.815 0.4177 ## displacement:year 1.368e-02 1.800e-02 0.760 0.4501 ## weight:displacement:year -3.254e-06 5.111e-06 -0.637 0.5264 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.73 on 67 degrees of freedom ## Multiple R-squared: 0.929, Adjusted R-squared: 0.9205 ## F-statistic: 109.6 on 8 and 67 DF, p-value: \u0026lt; 2.2e-16 summary(lm(mpg~.-I(log(acceleration^2)),data=noFactors[(10:85),])) ## ## Call: ## lm(formula = mpg ~ . - I(log(acceleration^2)), data = noFactors[(10:85), ## ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.232 -1.470 -0.211 1.075 7.088 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 41.3787633 24.1208720 1.715 0.0907 . ## cylinders 0.0863161 0.6112822 0.141 0.8881 ## displacement -0.0148491 0.0103249 -1.438 0.1549 ## horsepower -0.0158500 0.0151259 -1.048 0.2984 ## weight -0.0039125 0.0008546 -4.578 2.02e-05 *** ## acceleration -0.1473786 0.1438220 -1.025 0.3091 ## year -0.0378187 0.3380266 -0.112 0.9112 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.262 on 69 degrees of freedom ## Multiple R-squared: 0.8751, Adjusted R-squared: 0.8642 ## F-statistic: 80.55 on 6 and 69 DF, p-value: \u0026lt; 2.2e-16   The best model I found was still the one without the non-linear transformation but with removed outliers and additional interaction effects of displacement,=year= and weight\n  A popular approach is to use a log transform for both the inputs and the outputs\n   summary(lm(log(mpg)~.,data=noFactors[(10:85),])) ## ## Call: ## lm(formula = log(mpg) ~ ., data = noFactors[(10:85), ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.285805 -0.052358 -0.001456 0.066521 0.209739 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 3.886e+00 1.028e+00 3.781 0.000328 *** ## cylinders -1.771e-02 2.604e-02 -0.680 0.498669 ## displacement -1.540e-04 4.399e-04 -0.350 0.727314 ## horsepower -2.343e-03 6.444e-04 -3.636 0.000529 *** ## weight -1.960e-04 3.641e-05 -5.383 9.51e-07 *** ## acceleration -1.525e-02 6.128e-03 -2.489 0.015224 * ## year 4.138e-03 1.440e-02 0.287 0.774703 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 0.09636 on 69 degrees of freedom ## Multiple R-squared: 0.919, Adjusted R-squared: 0.912 ## F-statistic: 130.5 on 6 and 69 DF, p-value: \u0026lt; 2.2e-16 summary(lm(log(mpg)~log(weight*displacement*year),data=noFactors[(10:85),])) ## ## Call: ## lm(formula = log(mpg) ~ log(weight * displacement * year), data = noFactors[(10:85), ## ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.41121 -0.04107 0.01266 0.07791 0.21056 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 8.91995 0.26467 33.70 \u0026lt;2e-16 *** ## log(weight * displacement * year) -0.34250 0.01508 -22.71 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 0.1158 on 74 degrees of freedom ## Multiple R-squared: 0.8745, Adjusted R-squared: 0.8728 ## F-statistic: 515.6 on 1 and 74 DF, p-value: \u0026lt; 2.2e-16 Question 3.10 - Page 123 This question should be answered using the Carseats data set.\n(a) Fit a multiple regression model to predict Sales using Price, Urban, and US.\n(b) Provide an interpretation of each coefficient in the model. Be careful\u0026mdash;some of the variables in the model are qualitative!\n(c) Write out the model in equation form, being careful to handle the qualitative variables properly.\n(d) For which of the predictors can you reject the null hypothesis \\(H_0:\\beta_j=0\\)?\n(e) On the basis of your response to the previous question, ï¬t a smaller model that only uses the predictors for which there is evidence of association with the outcome.\n(f) How well do the models in (a) and (e) fit the data?\n(g) Using the model from (e), obtain \\(95%\\) confidence intervals for the coefficient(s).\n(h) Is there evidence of outliers or high leverage observations in the model from (e)?\nAnswer Load the dataset (and clean it)\ncleanCarSeats \u0026lt;- na.omit(ISLR::Carseats) Obtain summary statistics\ncleanCarSeats %\u0026gt;% sapply(unique) %\u0026gt;% sapply(length) ## Sales CompPrice Income Advertising Population Price ## 336 73 98 28 275 101 ## ShelveLoc Age Education Urban US ## 3 56 9 2 2 str(cleanCarSeats) ## \u0026#39;data.frame\u0026#39;: 400 obs. of 11 variables: ## $ Sales : num 9.5 11.22 10.06 7.4 4.15 ... ## $ CompPrice : num 138 111 113 117 141 124 115 136 132 132 ... ## $ Income : num 73 48 35 100 64 113 105 81 110 113 ... ## $ Advertising: num 11 16 10 4 3 13 0 15 0 0 ... ## $ Population : num 276 260 269 466 340 501 45 425 108 131 ... ## $ Price : num 120 83 80 97 128 72 108 120 124 124 ... ## $ ShelveLoc : Factor w/ 3 levels \u0026#34;Bad\u0026#34;,\u0026#34;Good\u0026#34;,\u0026#34;Medium\u0026#34;: 1 2 3 3 1 1 3 2 3 3 ... ## $ Age : num 42 65 59 55 38 78 71 67 76 76 ... ## $ Education : num 17 10 12 14 13 16 15 10 10 17 ... ## $ Urban : Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 2 2 2 2 2 1 2 2 1 1 ... ## $ US : Factor w/ 2 levels \u0026#34;No\u0026#34;,\u0026#34;Yes\u0026#34;: 2 2 2 2 1 2 1 2 1 2 ... summary(cleanCarSeats) ## Sales CompPrice Income Advertising ## Min. : 0.000 Min. : 77 Min. : 21.00 Min. : 0.000 ## 1st Qu.: 5.390 1st Qu.:115 1st Qu.: 42.75 1st Qu.: 0.000 ## Median : 7.490 Median :125 Median : 69.00 Median : 5.000 ## Mean : 7.496 Mean :125 Mean : 68.66 Mean : 6.635 ## 3rd Qu.: 9.320 3rd Qu.:135 3rd Qu.: 91.00 3rd Qu.:12.000 ## Max. :16.270 Max. :175 Max. :120.00 Max. :29.000 ## Population Price ShelveLoc Age Education ## Min. : 10.0 Min. : 24.0 Bad : 96 Min. :25.00 Min. :10.0 ## 1st Qu.:139.0 1st Qu.:100.0 Good : 85 1st Qu.:39.75 1st Qu.:12.0 ## Median :272.0 Median :117.0 Medium:219 Median :54.50 Median :14.0 ## Mean :264.8 Mean :115.8 Mean :53.32 Mean :13.9 ## 3rd Qu.:398.5 3rd Qu.:131.0 3rd Qu.:66.00 3rd Qu.:16.0 ## Max. :509.0 Max. :191.0 Max. :80.00 Max. :18.0 ## Urban US ## No :118 No :142 ## Yes:282 Yes:258 ## ## ## ## We can see that:\n Urban, US and ShelveLoc are factors with 2,2 and 3 levels respectively Education has only 9 unique values so we might as well consider it to be a factor too if we need to  (a) Multiple Regression Model\nFit it to things\nsummary(lm(Sales~.,data=cleanCarSeats)) ## ## Call: ## lm(formula = Sales ~ ., data = cleanCarSeats) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.8692 -0.6908 0.0211 0.6636 3.4115 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 5.6606231 0.6034487 9.380 \u0026lt; 2e-16 *** ## CompPrice 0.0928153 0.0041477 22.378 \u0026lt; 2e-16 *** ## Income 0.0158028 0.0018451 8.565 2.58e-16 *** ## Advertising 0.1230951 0.0111237 11.066 \u0026lt; 2e-16 *** ## Population 0.0002079 0.0003705 0.561 0.575 ## Price -0.0953579 0.0026711 -35.700 \u0026lt; 2e-16 *** ## ShelveLocGood 4.8501827 0.1531100 31.678 \u0026lt; 2e-16 *** ## ShelveLocMedium 1.9567148 0.1261056 15.516 \u0026lt; 2e-16 *** ## Age -0.0460452 0.0031817 -14.472 \u0026lt; 2e-16 *** ## Education -0.0211018 0.0197205 -1.070 0.285 ## UrbanYes 0.1228864 0.1129761 1.088 0.277 ## USYes -0.1840928 0.1498423 -1.229 0.220 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.019 on 388 degrees of freedom ## Multiple R-squared: 0.8734, Adjusted R-squared: 0.8698 ## F-statistic: 243.4 on 11 and 388 DF, p-value: \u0026lt; 2.2e-16 summary(lm(Sales~US*Price*Urban,data=cleanCarSeats)) ## ## Call: ## lm(formula = Sales ~ US * Price * Urban, data = cleanCarSeats) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.7952 -1.6659 -0.0984 1.6119 7.2433 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 13.456350 1.727210 7.791 6.03e-14 *** ## USYes 2.049051 2.322591 0.882 0.378 ## Price -0.061657 0.014875 -4.145 4.17e-05 *** ## UrbanYes -0.651545 2.071401 -0.315 0.753 ## USYes:Price -0.001567 0.019972 -0.078 0.937 ## USYes:UrbanYes -1.122034 2.759662 -0.407 0.685 ## Price:UrbanYes 0.010793 0.017796 0.606 0.545 ## USYes:Price:UrbanYes 0.001288 0.023619 0.055 0.957 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.473 on 392 degrees of freedom ## Multiple R-squared: 0.2467, Adjusted R-squared: 0.2333 ## F-statistic: 18.34 on 7 and 392 DF, p-value: \u0026lt; 2.2e-16 summary(lm(Sales~US+Price+Urban,data=cleanCarSeats)) ## ## Call: ## lm(formula = Sales ~ US + Price + Urban, data = cleanCarSeats) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.9206 -1.6220 -0.0564 1.5786 7.0581 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 13.043469 0.651012 20.036 \u0026lt; 2e-16 *** ## USYes 1.200573 0.259042 4.635 4.86e-06 *** ## Price -0.054459 0.005242 -10.389 \u0026lt; 2e-16 *** ## UrbanYes -0.021916 0.271650 -0.081 0.936 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.472 on 396 degrees of freedom ## Multiple R-squared: 0.2393, Adjusted R-squared: 0.2335 ## F-statistic: 41.52 on 3 and 396 DF, p-value: \u0026lt; 2.2e-16 (b) Interpret stuff\nTo interpret the data, we need to determine which of the models fits the data best, we will use anova() to test this:\nlmCarSAll\u0026lt;-lm(Sales~.,data=cleanCarSeats) lmCarStimesPUU\u0026lt;-lm(Sales~US*Price*Urban,data=cleanCarSeats) lmCarSplusPUU\u0026lt;-lm(Sales~US+Price+Urban,data=cleanCarSeats) anova(lmCarSAll,lmCarStimesPUU,lmCarSplusPUU) ## Analysis of Variance Table ## ## Model 1: Sales ~ CompPrice + Income + Advertising + Population + Price + ## ShelveLoc + Age + Education + Urban + US ## Model 2: Sales ~ US * Price * Urban ## Model 3: Sales ~ US + Price + Urban ## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 388 402.83 ## 2 392 2397.10 -4 -1994.27 480.2082 \u0026lt; 2.2e-16 *** ## 3 396 2420.83 -4 -23.73 5.7149 0.0001772 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 anova(lmCarStimesPUU,lmCarSplusPUU) ## Analysis of Variance Table ## ## Model 1: Sales ~ US * Price * Urban ## Model 2: Sales ~ US + Price + Urban ## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 392 2397.1 ## 2 396 2420.8 -4 -23.734 0.9703 0.4236 Remember that it is not possible to use anova() unless the same variables are present in all the models being tested, so it is meaningless to use anova for lmCarSAll along with the others, because we can\u0026rsquo;t change the interaction model to get only the main effects.\n We note that due to the low value of the F-statistic and the non-zero value of the p-value we cannot disregard the null hypothesis, or in other words, the models are basically the same in terms of their performance.  This means that I would like to continue with the simpler model, since the increase in R squared is too small to account for dealing with the additional factors.\n We see immediately, that there is a positive correlation only with being in the US Increases in price and being in an urban area actually decrease the sales, which is not surprising since being in the an urban area is probably correlated to a higher price, which we can check immediately   summary(lm(Price~Urban,data=cleanCarSeats)) ## ## Call: ## lm(formula = Price ~ Urban, data = cleanCarSeats) ## ## Residuals: ## Min 1Q Median 3Q Max ## -92.514 -15.514 1.205 14.595 74.486 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 114.076 2.180 52.330 \u0026lt;2e-16 *** ## UrbanYes 2.438 2.596 0.939 0.348 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 23.68 on 398 degrees of freedom ## Multiple R-squared: 0.002211, Adjusted R-squared: -0.0002965 ## F-statistic: 0.8817 on 1 and 398 DF, p-value: 0.3483 We see that our assumption is validated. Being in an urban area has a low t-statistic for a positive increase on the slope\n Returning to our previous model, we note that there is a high value of the p-value of the t-statistic for Urban being true, this means there isn\u0026rsquo;t a real relationship between being in an urban area and the sales. This makes intuitive sense as well  note t-test is essentially a linear model with one variable, that is, if we want to find out if there is a relation between having a store in an urban area, we could sum all the urban yes and divide by the number of observations and compare that to the sum of all the urban no divided by the number of observations which is essentially the t-test again.\n Price is significant, and has an inverse relation with the sales, so we should keep that in mind  (c) In Equation Form:\n\\[ Sales=1.200573*USYes - 0.054459*Price - 0.021916*UrbanYes + 13.043469 \\]\n(e) Other models\n We know from our case-study on testing the full multiple linear regression for Sales that there are definitely more important variables being ignored. However, we also know that Urban is not significant, so we can use a smaller model.   lmCarSplusPU\u0026lt;-lm(Sales~US+Price, data=cleanCarSeats) (f) Comparison of models\nsummary(lmCarSplusPU) ## ## Call: ## lm(formula = Sales ~ US + Price, data = cleanCarSeats) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.9269 -1.6286 -0.0574 1.5766 7.0515 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 13.03079 0.63098 20.652 \u0026lt; 2e-16 *** ## USYes 1.19964 0.25846 4.641 4.71e-06 *** ## Price -0.05448 0.00523 -10.416 \u0026lt; 2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.469 on 397 degrees of freedom ## Multiple R-squared: 0.2393, Adjusted R-squared: 0.2354 ## F-statistic: 62.43 on 2 and 397 DF, p-value: \u0026lt; 2.2e-16 anova(lmCarSplusPUU,lmCarSplusPU) ## Analysis of Variance Table ## ## Model 1: Sales ~ US + Price + Urban ## Model 2: Sales ~ US + Price ## Res.Df RSS Df Sum of Sq F Pr(\u0026gt;F) ## 1 396 2420.8 ## 2 397 2420.9 -1 -0.03979 0.0065 0.9357 As expected, the low value of the F statistic and the high p-value for the anova() test asserts that the null hypothesis cannot be neglected, thus there are no differences between the model with the insignificant parameter, which is also seen in the R squared value, which is the same for both models\n(g) Confidence Intervals\nconfint(lmCarSplusPU) ## 2.5 % 97.5 % ## (Intercept) 11.79032020 14.27126531 ## USYes 0.69151957 1.70776632 ## Price -0.06475984 -0.04419543 confint(lmCarSplusPUU) ## 2.5 % 97.5 % ## (Intercept) 11.76359670 14.32334118 ## USYes 0.69130419 1.70984121 ## Price -0.06476419 -0.04415351 ## UrbanYes -0.55597316 0.51214085  â Look into trying to plot this with ggplot  (h) Outliers\n We will first check the leverage plots   par(mfrow=c(2,2)) plot(lmCarSplusPU)   Figure 12: Leverage Plots\n  We can see there is a point with high leverage, but it has a low residual. In any case we should check further.\n Now we will check the studentized residuals to see if they are greater than 3   # See residuals plot(xlab=\u0026#34;Prediction\u0026#34;,ylab=\u0026#34;Studentized Residual\u0026#34;,x=predict(lmCarSplusPU),y=rstudent(lmCarSplusPU))   Figure 13: Studentized residuals\n  Thus I would say there are no outliers in our dataset, as none of our datapoints have an absolute studentized residual above 3.\n  James, G., Witten, D., Hastie, T., \u0026amp; Tibshirani, R. (2013). An Introduction to Statistical Learning: with Applications in R. Berlin, Germany: Springer Science \u0026amp; Business Media. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/islr-ch2-ch3/","tags":["solutions","R","ISLR"],"title":"ISLR :: Multiple Linear Regression"},{"categories":null,"contents":"Hi.\nI\u0026rsquo;m Rohit Goswami, better known across the web as HaoZeke. I\u0026rsquo;m not the first of my name, which is why instead of rgoswami, I occasionally use rg0swami when I need to be identified by something closer to my name.\nThe actual username is a throwback to back when people liked being anonymous (and with multiple personalities) online, so that ought to give an idea of how old I am. A curriculum vitae is available here.\nIt is difficult to keep this section short and not let it spill into an unstructured memoir. For a while I considered trying to consolidate my online presences but that turned out to be completely impossible without a series of posts and avatars1. I did however eventually set up a sporadically updated collection of web-links involving me. There is also, a separate list of quotes, or other things I have something to say about.\nIntangible Positions This is a set of things which are primarily online and/or voluntary in a non-academic sense.\n I administer and design a bunch of websites, mostly verified on Keybase I am a certified Software Carpentries instructor I officially maintain, for the Software Carpentries, the lesson on R (r-novice-inflammation) I also maintain some packages on the AUR (ArchLinux User Repository) I hone coursework development and teaching with univ.ai I maintain(ed) the official LineageOS image for the Xperia Z5 Dual  Historical Places What follows is a more informal set of places I am or have been associated with or are of significance to me2.\nReykjavÃ­k  I am associated with the reputed Jonsson group of the Science Institute at the University of Iceland, where I benefit from the guidance of the erudite and inspiring Prof. Hannes Jonsson My doctoral committee is here, which includes the very excellent inputs of Dr. Elvar Jonsson I have also benefited from sitting in on some formal coursework here, which has been a fascinatingly useful experience  Kanpur  I retain a close association with the fantastic Femtolab at IIT Kanpur under Prof. Debabrata Goswami, who has provided constant guidance throughout my career I am the co-lead developer of the FOSS scientific d-SEAMS software suite for graph theoretic approaches to structure determination of molecular dynamics simulations, along with my exceptional co-lead Amrita Goswami of the CNS Lab under Prof. Jayant K. Singh at IITK I worked with the Nair group as part of the Summer Undergraduate in Research Excellence (SURGE) program, also at IITK Harcourt Butler Technical Institute (HBTI) Kanpur, or the Harcourt Butler Technological University, as it is now called, was where I trained to be a chemical engineer  Bombay  I spent a formative summer under Prof. Rajarshi Chakrabarti of the IIT Bombay Chemistry department, who has been instrumental in developing my interests I also spent some time discussing experiments with Prof. Rajdip Bandyopadhyaya of the IIT Bombay Chemical Engineering department during an industrial internship in fragnance compounding at the R\u0026amp;D department of KEVA Ltd. under Dr. Debojit Chakrabarty  Bangalore  At IISc, I had the good fortune to meet Prof. Hannes Jonsson at a summer workshop on Rare events At the BIC, I undertook formal machine learning and artificial intelligence training under Harvard\u0026rsquo;s Dr. Rahul Dave and Dr. Pavlos Protopapas as part of the univ.ai summer course  Chennai  I spent a very fruitful summer on quantum tomography under Prof. Sibashish Ghosh at the Institute for Mathematical Sciences (IMSc Chennai)  Avatars I thought it might be of use to list a few of my more official visages. This is mostly to ensure people do not confuse me with a Sasquatch3. These mugshots are exactly that, mugshots for profile icons4.\n  Figure 1: A collage of mugshots, shuffled and not ordered by date to confuse people trying to kill me\n  Donations If you\u0026rsquo;ve gotten this far, you might also want to check out the following5:\n Patreon Librepay    I didn\u0026rsquo;t think it would be necessary, but just in case it isn\u0026rsquo;t clear, people listed here are not necessarily all references or anything, this is a personal list of people associated with each city, not a cover letter \u0026#x21a9;\u0026#xfe0e;\n I grew up on the verdant and beautiful TIFR Mumbai campus, and completed high school and undergraduate stuff while playing with peacocks and things on the IIT Kanpur campus \u0026#x21a9;\u0026#xfe0e;\n This is not a replacement for an Instagram feed or a Facebook wall, or even a ResearchGate or Publons or ORCID page; all of which I do sporadically remember I have \u0026#x21a9;\u0026#xfe0e;\n Made with the Mountain Tapir Collage Maker \u0026#x21a9;\u0026#xfe0e;\n There won\u0026rsquo;t ever be any content behind paywalls though \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/about/","tags":null,"title":"About"},{"categories":["personal"],"contents":" An attempt to re-claim and verify my digital presence.\n Background I mentioned on my about page, that it is nigh impossible to keep track of every digital trace there is of me. That said, it is really not even a countable infinite set yet, so it is a good idea to get started before it gets much worse. This is minimally curated, and will only be sporadically updated, so take everything here with a grain of salt. I honestly have no idea why anyone who is not me would like to see this, other than to prove one of these with respect to the rest1.\nProfiles Professional  University of Iceland FemtoLab Google Knowledge Panel  Voluntary  The Carpentries  Instructor, Maintainer, CarpentyrCon2020 Committee Task Force, CarpentryCon2020 Speaker   IGDORE Univ.ai TeX Users Group  TUG 2020 Conference Committee member TUG Zulip Admin   Google Summer of Docs 2020 Symengine  Academic  Publons PeerJ Google Scholar OrCiD Loop OSF  Societies  American Institute of Chemical Engineers IEEE  Communities  Figshare  Misc  Github Gitlab Goodreads Keybase  Pages and Articles By Me  Everything on any of my many websites Write-up on research with a ChemE undergraduate degree for the American Institute of Chemical Engineers (AIChE) Young Professionals Committee (YPC) Hackernoon article on Locking and Encrypting Apps with Encfs The Water, Chemicals and more with Computers for Chemistry (WC3m) course website A collaborative post on migrating to R 4.0 for The Carpentries  Tech Conferences These are tech talks, for academic presentations, my CV is a better guide.\n Reproducible Scalable Workflows with Nix, Papermill and Renku at PyCon India 2020 Reproducible Environments with the Nix Packaging System at CarpentryCon 2020  Lightning Talks  Nix from the dark ages (without Root) at NixCon 2020  Mentioning Me Lists  2020 Categorifications in Representation Theory (participant) Heilbronn Annual Conference 2020 (participant) CIRM - Jean-Morlet Chair - Quasi-Monte Carlo Methods and Applications (info) [participant] CIRM Mathematical Methods of Modern Statistics 2 (info) [participant] Kavli IPMU conference on \u0026ldquo;The McKay correspondence, mutation and related topics\u0026rdquo; (participant) Gallery of RARE 2019 at IISc Probablistic Data Analysis (University of Turku) AiiDA Virtual Tutotrial 2020 FortranCon 2020 Author Stan Math 3.3.0 contributor CECAM Participant for:  CECAM-DE-SMSM: (Machine) learning how to coarse-grain CECAM-DE-SMSM: ESPResSo and Python: Versatile Tools for Soft Matter Research    Teaching  Water, Chemicals and more with Computers for Chemistry (WC3m) July 28-August 28, 2020 (co-lead)  2020 MegaCodeRefinery (helper)\nCarpentries  Sciware: Git and GitHub at the Flatiron Institute September 24 and October 1, 2020 (instructor) Data Carpentry Workshop for Social Sciences Georgia Gwinnett College September 8-11, 2020 (instructor) Data Carpentry Ecology for Biotech Partners June 22-July 2, 2020 (instructor) Online Data Carpentry Workshop SADiLaR, South Africa 29 June - 3 July, 2020 (instructor)  Quotes  Quoted in a Stanford Daily Article on CS106A Code in Place Fortran Monthly Newsletter (June 2020) Emacs News  2020-06-22: for Temporary LaTeX Documents with Orgmode 2020-06-15: for Emacs for Nix-R 2020-05-11: for An Orgmode Note Workflow 2020-05-04: for Pandoc to Orgmode with Babel 2020-04-27: for Using Mathematica with Orgmode 2020-04-13: for my dotDoom doom-emacs configuration 2020-04-06: for Replacing Jupyter with Orgmode    Videos Of Me  Everything on my YouTube channel Discussion session for the CS196A Code in Place AMA with the students Panelist for the CarpentryCon 2020 session on lessons learnt from remote teaching Student Presentation at UI on Scrum for Software Quality Management CarpentryCon 2020 session recording on \u0026ldquo;Reproducible Environments with the Nix Packaging System\u0026rdquo;  Including Me This category involves recordings where I asked questions, and therefore technically involve me in a sense.\n I appear in the audience of this clip on neural networks and regularization Code in Place AMA with Stanford CS Lecturers I appear (audibly) to ask a question for the TUG2020 closing seminar by John MacFarlane  HPC Carpentry  A guided tour  Fortran Maintainers Monthly Calls  June 2020  IAS TML Lecture Questions I\u0026rsquo;ve been sitting in on these for a while thanks to Ke Li, but this section lists some of the lectures I asked a question in\n \u0026ldquo;What Do Models Learn?\u0026rdquo; by Aleksander MÄdry \u0026ldquo;Langevin Dynamics in Machine Learning\u0026rdquo; by Michael Jordan \u0026ldquo;Graph Nets: The Next Generation\u0026rdquo; by Max Welling \u0026ldquo;Priors for Semantic Variables\u0026rdquo; by Yoshua Bengio \u0026ldquo;A Blueprint of Standardized and Composable Machine Learning\u0026rdquo; by Eric Xing    If you do think you have seen me somewhere not on this list, drop me an email \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://rgoswami.me/posts/rg-collection-weblinks/","tags":["ramblings"],"title":"Collection of WebLinks"},{"categories":null,"contents":"","permalink":"https://rgoswami.me/search/","tags":null,"title":"Search"}]